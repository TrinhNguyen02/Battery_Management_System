
Battery_Management_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c04  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  08008d18  08008d18  00009d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009850  08009850  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000000  08009850  08009850  0000b07c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009850  08009850  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009854  08009854  0000a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009858  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001704  2000007c  080098d4  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001780  080098d4  0000b780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dd4  00000000  00000000  0000b0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036cd  00000000  00000000  0001fe79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00023548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df8  00000000  00000000  00024768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad53  00000000  00000000  00025560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a2c  00000000  00000000  000402b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ff0  00000000  00000000  00056cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a68  00000000  00000000  000ebd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f177c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008cfc 	.word	0x08008cfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08008cfc 	.word	0x08008cfc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_fmul>:
 8000aec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af4:	bf1e      	ittt	ne
 8000af6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afa:	ea92 0f0c 	teqne	r2, ip
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d06f      	beq.n	8000be4 <__aeabi_fmul+0xf8>
 8000b04:	441a      	add	r2, r3
 8000b06:	ea80 0c01 	eor.w	ip, r0, r1
 8000b0a:	0240      	lsls	r0, r0, #9
 8000b0c:	bf18      	it	ne
 8000b0e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b12:	d01e      	beq.n	8000b52 <__aeabi_fmul+0x66>
 8000b14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b18:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b1c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b20:	fba0 3101 	umull	r3, r1, r0, r1
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b28:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b2c:	bf3e      	ittt	cc
 8000b2e:	0049      	lslcc	r1, r1, #1
 8000b30:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b34:	005b      	lslcc	r3, r3, #1
 8000b36:	ea40 0001 	orr.w	r0, r0, r1
 8000b3a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b3e:	2afd      	cmp	r2, #253	@ 0xfd
 8000b40:	d81d      	bhi.n	8000b7e <__aeabi_fmul+0x92>
 8000b42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4a:	bf08      	it	eq
 8000b4c:	f020 0001 	biceq.w	r0, r0, #1
 8000b50:	4770      	bx	lr
 8000b52:	f090 0f00 	teq	r0, #0
 8000b56:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	0249      	lsleq	r1, r1, #9
 8000b5e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b62:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b66:	3a7f      	subs	r2, #127	@ 0x7f
 8000b68:	bfc2      	ittt	gt
 8000b6a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b6e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b72:	4770      	bxgt	lr
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	dc5d      	bgt.n	8000c3c <__aeabi_fmul+0x150>
 8000b80:	f112 0f19 	cmn.w	r2, #25
 8000b84:	bfdc      	itt	le
 8000b86:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b8a:	4770      	bxle	lr
 8000b8c:	f1c2 0200 	rsb	r2, r2, #0
 8000b90:	0041      	lsls	r1, r0, #1
 8000b92:	fa21 f102 	lsr.w	r1, r1, r2
 8000b96:	f1c2 0220 	rsb	r2, r2, #32
 8000b9a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b9e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ba2:	f140 0000 	adc.w	r0, r0, #0
 8000ba6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000baa:	bf08      	it	eq
 8000bac:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb0:	4770      	bx	lr
 8000bb2:	f092 0f00 	teq	r2, #0
 8000bb6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0040      	lsleq	r0, r0, #1
 8000bbe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bc2:	3a01      	subeq	r2, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fmul+0xce>
 8000bc6:	ea40 000c 	orr.w	r0, r0, ip
 8000bca:	f093 0f00 	teq	r3, #0
 8000bce:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd2:	bf02      	ittt	eq
 8000bd4:	0049      	lsleq	r1, r1, #1
 8000bd6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bda:	3b01      	subeq	r3, #1
 8000bdc:	d0f9      	beq.n	8000bd2 <__aeabi_fmul+0xe6>
 8000bde:	ea41 010c 	orr.w	r1, r1, ip
 8000be2:	e78f      	b.n	8000b04 <__aeabi_fmul+0x18>
 8000be4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be8:	ea92 0f0c 	teq	r2, ip
 8000bec:	bf18      	it	ne
 8000bee:	ea93 0f0c 	teqne	r3, ip
 8000bf2:	d00a      	beq.n	8000c0a <__aeabi_fmul+0x11e>
 8000bf4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bf8:	bf18      	it	ne
 8000bfa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bfe:	d1d8      	bne.n	8000bb2 <__aeabi_fmul+0xc6>
 8000c00:	ea80 0001 	eor.w	r0, r0, r1
 8000c04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	bf17      	itett	ne
 8000c10:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c14:	4608      	moveq	r0, r1
 8000c16:	f091 0f00 	teqne	r1, #0
 8000c1a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c1e:	d014      	beq.n	8000c4a <__aeabi_fmul+0x15e>
 8000c20:	ea92 0f0c 	teq	r2, ip
 8000c24:	d101      	bne.n	8000c2a <__aeabi_fmul+0x13e>
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	d10f      	bne.n	8000c4a <__aeabi_fmul+0x15e>
 8000c2a:	ea93 0f0c 	teq	r3, ip
 8000c2e:	d103      	bne.n	8000c38 <__aeabi_fmul+0x14c>
 8000c30:	024b      	lsls	r3, r1, #9
 8000c32:	bf18      	it	ne
 8000c34:	4608      	movne	r0, r1
 8000c36:	d108      	bne.n	8000c4a <__aeabi_fmul+0x15e>
 8000c38:	ea80 0001 	eor.w	r0, r0, r1
 8000c3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c52:	4770      	bx	lr

08000c54 <__aeabi_fdiv>:
 8000c54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c62:	ea92 0f0c 	teqne	r2, ip
 8000c66:	ea93 0f0c 	teqne	r3, ip
 8000c6a:	d069      	beq.n	8000d40 <__aeabi_fdiv+0xec>
 8000c6c:	eba2 0203 	sub.w	r2, r2, r3
 8000c70:	ea80 0c01 	eor.w	ip, r0, r1
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c7a:	d037      	beq.n	8000cec <__aeabi_fdiv+0x98>
 8000c7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c80:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c84:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	bf38      	it	cc
 8000c90:	005b      	lslcc	r3, r3, #1
 8000c92:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c96:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	bf24      	itt	cs
 8000c9e:	1a5b      	subcs	r3, r3, r1
 8000ca0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ca4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ca8:	bf24      	itt	cs
 8000caa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cae:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cb2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cb6:	bf24      	itt	cs
 8000cb8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cc0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cc4:	bf24      	itt	cs
 8000cc6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cca:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cd6:	d1e0      	bne.n	8000c9a <__aeabi_fdiv+0x46>
 8000cd8:	2afd      	cmp	r2, #253	@ 0xfd
 8000cda:	f63f af50 	bhi.w	8000b7e <__aeabi_fmul+0x92>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce4:	bf08      	it	eq
 8000ce6:	f020 0001 	biceq.w	r0, r0, #1
 8000cea:	4770      	bx	lr
 8000cec:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cf0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf4:	327f      	adds	r2, #127	@ 0x7f
 8000cf6:	bfc2      	ittt	gt
 8000cf8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000cfc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d00:	4770      	bxgt	lr
 8000d02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	3a01      	subs	r2, #1
 8000d0c:	e737      	b.n	8000b7e <__aeabi_fmul+0x92>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0040      	lsleq	r0, r0, #1
 8000d1a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d1e:	3a01      	subeq	r2, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fdiv+0xc2>
 8000d22:	ea40 000c 	orr.w	r0, r0, ip
 8000d26:	f093 0f00 	teq	r3, #0
 8000d2a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d2e:	bf02      	ittt	eq
 8000d30:	0049      	lsleq	r1, r1, #1
 8000d32:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d36:	3b01      	subeq	r3, #1
 8000d38:	d0f9      	beq.n	8000d2e <__aeabi_fdiv+0xda>
 8000d3a:	ea41 010c 	orr.w	r1, r1, ip
 8000d3e:	e795      	b.n	8000c6c <__aeabi_fdiv+0x18>
 8000d40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d44:	ea92 0f0c 	teq	r2, ip
 8000d48:	d108      	bne.n	8000d5c <__aeabi_fdiv+0x108>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	f47f af7d 	bne.w	8000c4a <__aeabi_fmul+0x15e>
 8000d50:	ea93 0f0c 	teq	r3, ip
 8000d54:	f47f af70 	bne.w	8000c38 <__aeabi_fmul+0x14c>
 8000d58:	4608      	mov	r0, r1
 8000d5a:	e776      	b.n	8000c4a <__aeabi_fmul+0x15e>
 8000d5c:	ea93 0f0c 	teq	r3, ip
 8000d60:	d104      	bne.n	8000d6c <__aeabi_fdiv+0x118>
 8000d62:	024b      	lsls	r3, r1, #9
 8000d64:	f43f af4c 	beq.w	8000c00 <__aeabi_fmul+0x114>
 8000d68:	4608      	mov	r0, r1
 8000d6a:	e76e      	b.n	8000c4a <__aeabi_fmul+0x15e>
 8000d6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d70:	bf18      	it	ne
 8000d72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d76:	d1ca      	bne.n	8000d0e <__aeabi_fdiv+0xba>
 8000d78:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d7c:	f47f af5c 	bne.w	8000c38 <__aeabi_fmul+0x14c>
 8000d80:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d84:	f47f af3c 	bne.w	8000c00 <__aeabi_fmul+0x114>
 8000d88:	e75f      	b.n	8000c4a <__aeabi_fmul+0x15e>
 8000d8a:	bf00      	nop

08000d8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <vApplicationGetIdleTaskMemory+0x28>)
 8000d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2280      	movs	r2, #128	@ 0x80
 8000da8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000098 	.word	0x20000098
 8000db8:	20000138 	.word	0x20000138

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b0a4      	sub	sp, #144	@ 0x90
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f001 f8b9 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f893 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 f9f7 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000dce:	f000 f9d7 	bl	8001180 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dd2:	f000 f8e9 	bl	8000fa8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000dd6:	f000 f951 	bl	800107c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dda:	f000 f97d 	bl	80010d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000dde:	f000 f9a5 	bl	800112c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000de2:	f000 fb67 	bl	80014b4 <ssd1306_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint32_t);
 8000de6:	4b36      	ldr	r3, [pc, #216]	@ (8000ec0 <main+0x104>)
 8000de8:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8000dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000df2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fc55 	bl	80046a8 <osMessageCreate>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a30      	ldr	r2, [pc, #192]	@ (8000ec4 <main+0x108>)
 8000e02:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 16, uint16_t);
 8000e04:	4b30      	ldr	r3, [pc, #192]	@ (8000ec8 <main+0x10c>)
 8000e06:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8000e10:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fc46 	bl	80046a8 <osMessageCreate>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ecc <main+0x110>)
 8000e20:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readADC_Task */
  osThreadDef(readADC_Task, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <main+0x114>)
 8000e24:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000e28:	461d      	mov	r5, r3
 8000e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readADC_TaskHandle = osThreadCreate(osThread(readADC_Task), NULL);
 8000e36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fbd3 	bl	80045e8 <osThreadCreate>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a23      	ldr	r2, [pc, #140]	@ (8000ed4 <main+0x118>)
 8000e46:	6013      	str	r3, [r2, #0]

  /* definition and creation of display_Task */
  osThreadDef(display_Task, StartTask02, osPriorityNormal, 0, 128);
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <main+0x11c>)
 8000e4a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000e4e:	461d      	mov	r5, r3
 8000e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  display_TaskHandle = osThreadCreate(osThread(display_Task), NULL);
 8000e5c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fbc0 	bl	80045e8 <osThreadCreate>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <main+0x120>)
 8000e6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ctrlBMS_Task */
  osThreadDef(ctrlBMS_Task, StartTask03, osPriorityNormal, 0, 128);
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <main+0x124>)
 8000e70:	f107 041c 	add.w	r4, r7, #28
 8000e74:	461d      	mov	r5, r3
 8000e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ctrlBMS_TaskHandle = osThreadCreate(osThread(ctrlBMS_Task), NULL);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fbad 	bl	80045e8 <osThreadCreate>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <main+0x128>)
 8000e92:	6013      	str	r3, [r2, #0]

  /* definition and creation of comUART_Task */
  osThreadDef(comUART_Task, StartTask04, osPriorityNormal, 0, 128);
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <main+0x12c>)
 8000e96:	463c      	mov	r4, r7
 8000e98:	461d      	mov	r5, r3
 8000e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  comUART_TaskHandle = osThreadCreate(osThread(comUART_Task), NULL);
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fb9c 	bl	80045e8 <osThreadCreate>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <main+0x130>)
 8000eb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000eb6:	f003 fb90 	bl	80045da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <main+0xfe>
 8000ebe:	bf00      	nop
 8000ec0:	08008d18 	.word	0x08008d18
 8000ec4:	200004a0 	.word	0x200004a0
 8000ec8:	08008d28 	.word	0x08008d28
 8000ecc:	200004a4 	.word	0x200004a4
 8000ed0:	08008d48 	.word	0x08008d48
 8000ed4:	20000490 	.word	0x20000490
 8000ed8:	08008d74 	.word	0x08008d74
 8000edc:	20000494 	.word	0x20000494
 8000ee0:	08008da0 	.word	0x08008da0
 8000ee4:	20000498 	.word	0x20000498
 8000ee8:	08008dcc 	.word	0x08008dcc
 8000eec:	2000049c 	.word	0x2000049c

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	@ 0x50
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efa:	2228      	movs	r2, #40	@ 0x28
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fcad 	bl	800685e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f3c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fd8c 	bl	8003a64 <HAL_RCC_OscConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f52:	f000 fa71 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f56:	230f      	movs	r3, #15
 8000f58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2102      	movs	r1, #2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fff8 	bl	8003f68 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f7e:	f000 fa5b 	bl	8001438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f82:	2302      	movs	r3, #2
 8000f84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 f978 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f9a:	f000 fa4d 	bl	8001438 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	@ 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fba:	4a2f      	ldr	r2, [pc, #188]	@ (8001078 <MX_ADC1_Init+0xd0>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd2:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fd4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe6:	4823      	ldr	r0, [pc, #140]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8000fe8:	f001 f82c 	bl	8002044 <HAL_ADC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ff2:	f000 fa21 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ffe:	2302      	movs	r3, #2
 8001000:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	481b      	ldr	r0, [pc, #108]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8001008:	f001 f9ee 	bl	80023e8 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fa11 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800101a:	2302      	movs	r3, #2
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4814      	ldr	r0, [pc, #80]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8001024:	f001 f9e0 	bl	80023e8 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800102e:	f000 fa03 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001032:	2302      	movs	r3, #2
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001036:	2303      	movs	r3, #3
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	@ (8001074 <MX_ADC1_Init+0xcc>)
 8001040:	f001 f9d2 	bl	80023e8 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800104a:	f000 f9f5 	bl	8001438 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800104e:	2303      	movs	r3, #3
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001052:	2304      	movs	r3, #4
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	@ (8001074 <MX_ADC1_Init+0xcc>)
 800105c:	f001 f9c4 	bl	80023e8 <HAL_ADC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001066:	f000 f9e7 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000338 	.word	0x20000338
 8001078:	40012400 	.word	0x40012400

0800107c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <MX_I2C1_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001088:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_I2C1_Init+0x58>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_I2C1_Init+0x50>)
 800109a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_I2C1_Init+0x50>)
 80010ba:	f002 f827 	bl	800310c <HAL_I2C_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f9b8 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200003ac 	.word	0x200003ac
 80010d0:	40005400 	.word	0x40005400
 80010d4:	000186a0 	.word	0x000186a0

080010d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <MX_USART1_UART_Init+0x50>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x4c>)
 8001110:	f003 f96e 	bl	80043f0 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800111a:	f000 f98d 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000400 	.word	0x20000400
 8001128:	40013800 	.word	0x40013800

0800112c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <MX_USART3_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_USART3_UART_Init+0x4c>)
 8001164:	f003 f944 	bl	80043f0 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f963 	bl	8001438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000448 	.word	0x20000448
 800117c:	40004800 	.word	0x40004800

08001180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_DMA_Init+0x38>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <MX_DMA_Init+0x38>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_DMA_Init+0x38>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2105      	movs	r1, #5
 80011a2:	200b      	movs	r0, #11
 80011a4:	f001 fbf1 	bl	800298a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011a8:	200b      	movs	r0, #11
 80011aa:	f001 fc0a 	bl	80029c2 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_GPIO_Init+0x90>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <MX_GPIO_Init+0x90>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_GPIO_Init+0x90>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <MX_GPIO_Init+0x90>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <MX_GPIO_Init+0x90>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <MX_GPIO_Init+0x90>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <MX_GPIO_Init+0x90>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a11      	ldr	r2, [pc, #68]	@ (800124c <MX_GPIO_Init+0x90>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_GPIO_Init+0x90>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800121e:	480c      	ldr	r0, [pc, #48]	@ (8001250 <MX_GPIO_Init+0x94>)
 8001220:	f001 ff5c 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001224:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4619      	mov	r1, r3
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_GPIO_Init+0x94>)
 800123e:	f001 fdc9 	bl	8002dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800

08001254 <initBff>:

/* USER CODE BEGIN 4 */
void initBff(char* bff, int len){
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e008      	b.n	8001276 <initBff+0x22>
		*bff = '\0';
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		bff++;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3301      	adds	r3, #1
 800126e:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < len; i++){
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	dbf2      	blt.n	8001264 <initBff+0x10>
	}
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
	...

0800128c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1, ADC_Value, 4);
 8001294:	2204      	movs	r2, #4
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <StartDefaultTask+0x2c>)
 8001298:	4808      	ldr	r0, [pc, #32]	@ (80012bc <StartDefaultTask+0x30>)
 800129a:	f000 ffab 	bl	80021f4 <HAL_ADC_Start_DMA>
	  xQueueSend(myQueue01Handle, &ADC_Value, portMAX_DELAY);
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <StartDefaultTask+0x34>)
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	4903      	ldr	r1, [pc, #12]	@ (80012b8 <StartDefaultTask+0x2c>)
 80012aa:	f003 fc19 	bl	8004ae0 <xQueueGenericSend>
	  osDelay(200);
 80012ae:	20c8      	movs	r0, #200	@ 0xc8
 80012b0:	f003 f9e6 	bl	8004680 <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, ADC_Value, 4);
 80012b4:	bf00      	nop
 80012b6:	e7ed      	b.n	8001294 <StartDefaultTask+0x8>
 80012b8:	200004b8 	.word	0x200004b8
 80012bc:	20000338 	.word	0x20000338
 80012c0:	200004a0 	.word	0x200004a0
 80012c4:	00000000 	.word	0x00000000

080012c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
//	uint32_t ADC_Value[4];

  for(;;)
  {
	  if(xQueueReceive(myQueue01Handle, &ADC_Value, portMAX_DELAY) == pdPASS){
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <StartTask02+0x128>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	4946      	ldr	r1, [pc, #280]	@ (80013f4 <StartTask02+0x12c>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 fd02 	bl	8004ce4 <xQueueReceive>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d178      	bne.n	80013d8 <StartTask02+0x110>
		  for(int i = 0; i < 4; i++){
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e022      	b.n	8001332 <StartTask02+0x6a>
//			  scaleValue[i] = (float)(0.1966808511 + 0.9510638298*ADC_Value[i]*3.3/4040);
			  scaleValue[i] = (float)(ADC_Value[i]*3.3/4040);
 80012ec:	4a41      	ldr	r2, [pc, #260]	@ (80013f4 <StartTask02+0x12c>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f86d 	bl	80003d4 <__aeabi_ui2d>
 80012fa:	a339      	add	r3, pc, #228	@ (adr r3, 80013e0 <StartTask02+0x118>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f8e2 	bl	80004c8 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a336      	add	r3, pc, #216	@ (adr r3, 80013e8 <StartTask02+0x120>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fa03 	bl	800071c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fb95 	bl	8000a4c <__aeabi_d2f>
 8001322:	4602      	mov	r2, r0
 8001324:	4934      	ldr	r1, [pc, #208]	@ (80013f8 <StartTask02+0x130>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for(int i = 0; i < 4; i++){
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b03      	cmp	r3, #3
 8001336:	ddd9      	ble.n	80012ec <StartTask02+0x24>
		  }

		  initBff(charValue_1, MAX_LENGTH_BFF);
 8001338:	2104      	movs	r1, #4
 800133a:	4830      	ldr	r0, [pc, #192]	@ (80013fc <StartTask02+0x134>)
 800133c:	f7ff ff8a 	bl	8001254 <initBff>
		  initBff(charValue_2, MAX_LENGTH_BFF);
 8001340:	2104      	movs	r1, #4
 8001342:	482f      	ldr	r0, [pc, #188]	@ (8001400 <StartTask02+0x138>)
 8001344:	f7ff ff86 	bl	8001254 <initBff>
		  initBff(charValue_3, MAX_LENGTH_BFF);
 8001348:	2104      	movs	r1, #4
 800134a:	482e      	ldr	r0, [pc, #184]	@ (8001404 <StartTask02+0x13c>)
 800134c:	f7ff ff82 	bl	8001254 <initBff>
		  initBff(charValue_4, MAX_LENGTH_BFF);
 8001350:	2104      	movs	r1, #4
 8001352:	482d      	ldr	r0, [pc, #180]	@ (8001408 <StartTask02+0x140>)
 8001354:	f7ff ff7e 	bl	8001254 <initBff>

		  gcvt((float)(scaleValue[0]/ratio_VSS), MAX_LENGTH_BFF, charValue_1);
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <StartTask02+0x130>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a2b      	ldr	r2, [pc, #172]	@ (800140c <StartTask02+0x144>)
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fc76 	bl	8000c54 <__aeabi_fdiv>
 8001368:	4603      	mov	r3, r0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f854 	bl	8000418 <__aeabi_f2d>
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <StartTask02+0x134>)
 8001372:	2204      	movs	r2, #4
 8001374:	f005 f94a 	bl	800660c <gcvt>
		  gcvt((float)(scaleValue[1]/ratio_VSI), MAX_LENGTH_BFF, charValue_2);
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <StartTask02+0x130>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a24      	ldr	r2, [pc, #144]	@ (8001410 <StartTask02+0x148>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc66 	bl	8000c54 <__aeabi_fdiv>
 8001388:	4603      	mov	r3, r0
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f844 	bl	8000418 <__aeabi_f2d>
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <StartTask02+0x138>)
 8001392:	2204      	movs	r2, #4
 8001394:	f005 f93a 	bl	800660c <gcvt>
		  gcvt(scaleValue[2], MAX_LENGTH_BFF, charValue_3);
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <StartTask02+0x130>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f83b 	bl	8000418 <__aeabi_f2d>
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <StartTask02+0x13c>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	f005 f931 	bl	800660c <gcvt>
		  gcvt(scaleValue[3], MAX_LENGTH_BFF, charValue_4);
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <StartTask02+0x130>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f832 	bl	8000418 <__aeabi_f2d>
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <StartTask02+0x140>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	f005 f928 	bl	800660c <gcvt>

		  displayOLED("21", charValue_1, charValue_2, charValue_3, charValue_4);
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <StartTask02+0x140>)
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <StartTask02+0x13c>)
 80013c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <StartTask02+0x138>)
 80013c4:	490d      	ldr	r1, [pc, #52]	@ (80013fc <StartTask02+0x134>)
 80013c6:	4813      	ldr	r0, [pc, #76]	@ (8001414 <StartTask02+0x14c>)
 80013c8:	f000 fa8c 	bl	80018e4 <displayOLED>
		  xQueueReset(myQueue01Handle);
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <StartTask02+0x128>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fa40 	bl	8004858 <xQueueGenericReset>
	  }
		osDelay(10);
 80013d8:	200a      	movs	r0, #10
 80013da:	f003 f951 	bl	8004680 <osDelay>
	  if(xQueueReceive(myQueue01Handle, &ADC_Value, portMAX_DELAY) == pdPASS){
 80013de:	e777      	b.n	80012d0 <StartTask02+0x8>
 80013e0:	66666666 	.word	0x66666666
 80013e4:	400a6666 	.word	0x400a6666
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40af9000 	.word	0x40af9000
 80013f0:	200004a0 	.word	0x200004a0
 80013f4:	200004b8 	.word	0x200004b8
 80013f8:	200004a8 	.word	0x200004a8
 80013fc:	200004c8 	.word	0x200004c8
 8001400:	200004cc 	.word	0x200004cc
 8001404:	200004d0 	.word	0x200004d0
 8001408:	200004d4 	.word	0x200004d4
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004
 8001414:	08008de8 	.word	0x08008de8

08001418 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f003 f92d 	bl	8004680 <osDelay>
 8001426:	e7fb      	b.n	8001420 <StartTask03+0x8>

08001428 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f003 f925 	bl	8004680 <osDelay>
 8001436:	e7fb      	b.n	8001430 <StartTask04+0x8>

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af04      	add	r7, sp, #16
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2301      	movs	r3, #1
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2301      	movs	r3, #1
 800146a:	2200      	movs	r2, #0
 800146c:	2178      	movs	r1, #120	@ 0x78
 800146e:	4803      	ldr	r0, [pc, #12]	@ (800147c <ssd1306_WriteCommand+0x2c>)
 8001470:	f001 ff90 	bl	8003394 <HAL_I2C_Mem_Write>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200003ac 	.word	0x200003ac

08001480 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	9202      	str	r2, [sp, #8]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	2240      	movs	r2, #64	@ 0x40
 800149e:	2178      	movs	r1, #120	@ 0x78
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <ssd1306_WriteData+0x30>)
 80014a2:	f001 ff77 	bl	8003394 <HAL_I2C_Mem_Write>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003ac 	.word	0x200003ac

080014b4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80014b8:	f7ff ffc4 	bl	8001444 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80014bc:	2064      	movs	r0, #100	@ 0x64
 80014be:	f000 fd9d 	bl	8001ffc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f9cc 	bl	8001860 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80014c8:	2020      	movs	r0, #32
 80014ca:	f7ff ffc1 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ffbe 	bl	8001450 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014d4:	20b0      	movs	r0, #176	@ 0xb0
 80014d6:	f7ff ffbb 	bl	8001450 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014da:	20c8      	movs	r0, #200	@ 0xc8
 80014dc:	f7ff ffb8 	bl	8001450 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff ffb5 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80014e6:	2010      	movs	r0, #16
 80014e8:	f7ff ffb2 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80014ec:	2040      	movs	r0, #64	@ 0x40
 80014ee:	f7ff ffaf 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80014f2:	20ff      	movs	r0, #255	@ 0xff
 80014f4:	f000 f9a0 	bl	8001838 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80014f8:	20a1      	movs	r0, #161	@ 0xa1
 80014fa:	f7ff ffa9 	bl	8001450 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80014fe:	20a6      	movs	r0, #166	@ 0xa6
 8001500:	f7ff ffa6 	bl	8001450 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001504:	20a8      	movs	r0, #168	@ 0xa8
 8001506:	f7ff ffa3 	bl	8001450 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800150a:	203f      	movs	r0, #63	@ 0x3f
 800150c:	f7ff ffa0 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001510:	20a4      	movs	r0, #164	@ 0xa4
 8001512:	f7ff ff9d 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001516:	20d3      	movs	r0, #211	@ 0xd3
 8001518:	f7ff ff9a 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff ff97 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001522:	20d5      	movs	r0, #213	@ 0xd5
 8001524:	f7ff ff94 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001528:	20f0      	movs	r0, #240	@ 0xf0
 800152a:	f7ff ff91 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800152e:	20d9      	movs	r0, #217	@ 0xd9
 8001530:	f7ff ff8e 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001534:	2022      	movs	r0, #34	@ 0x22
 8001536:	f7ff ff8b 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800153a:	20da      	movs	r0, #218	@ 0xda
 800153c:	f7ff ff88 	bl	8001450 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001540:	2012      	movs	r0, #18
 8001542:	f7ff ff85 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001546:	20db      	movs	r0, #219	@ 0xdb
 8001548:	f7ff ff82 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800154c:	2020      	movs	r0, #32
 800154e:	f7ff ff7f 	bl	8001450 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001552:	208d      	movs	r0, #141	@ 0x8d
 8001554:	f7ff ff7c 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001558:	2014      	movs	r0, #20
 800155a:	f7ff ff79 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800155e:	2001      	movs	r0, #1
 8001560:	f000 f97e 	bl	8001860 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001564:	2000      	movs	r0, #0
 8001566:	f000 f80f 	bl	8001588 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800156a:	f000 f825 	bl	80015b8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800156e:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <ssd1306_Init+0xd0>)
 8001570:	2200      	movs	r2, #0
 8001572:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <ssd1306_Init+0xd0>)
 8001576:	2200      	movs	r2, #0
 8001578:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800157a:	4b02      	ldr	r3, [pc, #8]	@ (8001584 <ssd1306_Init+0xd0>)
 800157c:	2201      	movs	r2, #1
 800157e:	711a      	strb	r2, [r3, #4]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200008d8 	.word	0x200008d8

08001588 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <ssd1306_Fill+0x14>
 8001598:	2300      	movs	r3, #0
 800159a:	e000      	b.n	800159e <ssd1306_Fill+0x16>
 800159c:	23ff      	movs	r3, #255	@ 0xff
 800159e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a2:	4619      	mov	r1, r3
 80015a4:	4803      	ldr	r0, [pc, #12]	@ (80015b4 <ssd1306_Fill+0x2c>)
 80015a6:	f005 f95a 	bl	800685e <memset>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200004d8 	.word	0x200004d8

080015b8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	e016      	b.n	80015f2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	3b50      	subs	r3, #80	@ 0x50
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff40 	bl	8001450 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ff3d 	bl	8001450 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80015d6:	2010      	movs	r0, #16
 80015d8:	f7ff ff3a 	bl	8001450 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	01db      	lsls	r3, r3, #7
 80015e0:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <ssd1306_UpdateScreen+0x4c>)
 80015e2:	4413      	add	r3, r2
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff4a 	bl	8001480 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	3301      	adds	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b07      	cmp	r3, #7
 80015f6:	d9e5      	bls.n	80015c4 <ssd1306_UpdateScreen+0xc>
    }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200004d8 	.word	0x200004d8

08001608 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	460b      	mov	r3, r1
 8001614:	71bb      	strb	r3, [r7, #6]
 8001616:	4613      	mov	r3, r2
 8001618:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db3d      	blt.n	800169e <ssd1306_DrawPixel+0x96>
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	2b3f      	cmp	r3, #63	@ 0x3f
 8001626:	d83a      	bhi.n	800169e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d11a      	bne.n	8001664 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800162e:	79fa      	ldrb	r2, [r7, #7]
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	b2d8      	uxtb	r0, r3
 8001636:	4603      	mov	r3, r0
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	4a1a      	ldr	r2, [pc, #104]	@ (80016a8 <ssd1306_DrawPixel+0xa0>)
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	b25a      	sxtb	r2, r3
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	b25b      	sxtb	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b259      	sxtb	r1, r3
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	4603      	mov	r3, r0
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	4413      	add	r3, r2
 800165c:	b2c9      	uxtb	r1, r1
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <ssd1306_DrawPixel+0xa0>)
 8001660:	54d1      	strb	r1, [r2, r3]
 8001662:	e01d      	b.n	80016a0 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	b2d8      	uxtb	r0, r3
 800166c:	4603      	mov	r3, r0
 800166e:	01db      	lsls	r3, r3, #7
 8001670:	4413      	add	r3, r2
 8001672:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <ssd1306_DrawPixel+0xa0>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	b25a      	sxtb	r2, r3
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	b25b      	sxtb	r3, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	b25b      	sxtb	r3, r3
 800168a:	4013      	ands	r3, r2
 800168c:	b259      	sxtb	r1, r3
 800168e:	79fa      	ldrb	r2, [r7, #7]
 8001690:	4603      	mov	r3, r0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4413      	add	r3, r2
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <ssd1306_DrawPixel+0xa0>)
 800169a:	54d1      	strb	r1, [r2, r3]
 800169c:	e000      	b.n	80016a0 <ssd1306_DrawPixel+0x98>
        return;
 800169e:	bf00      	nop
    }
}
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	200004d8 	.word	0x200004d8

080016ac <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	1d38      	adds	r0, r7, #4
 80016b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	4613      	mov	r3, r2
 80016c2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b1f      	cmp	r3, #31
 80016c8:	d902      	bls.n	80016d0 <ssd1306_WriteChar+0x24>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80016ce:	d901      	bls.n	80016d4 <ssd1306_WriteChar+0x28>
        return 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e06c      	b.n	80017ae <ssd1306_WriteChar+0x102>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016d4:	4b38      	ldr	r3, [pc, #224]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	793b      	ldrb	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	2b80      	cmp	r3, #128	@ 0x80
 80016e0:	dc06      	bgt.n	80016f0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80016e2:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 80016e4:	885b      	ldrh	r3, [r3, #2]
 80016e6:	461a      	mov	r2, r3
 80016e8:	797b      	ldrb	r3, [r7, #5]
 80016ea:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80016ec:	2b40      	cmp	r3, #64	@ 0x40
 80016ee:	dd01      	ble.n	80016f4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e05c      	b.n	80017ae <ssd1306_WriteChar+0x102>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	e04c      	b.n	8001794 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	3b20      	subs	r3, #32
 8001700:	7979      	ldrb	r1, [r7, #5]
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4619      	mov	r1, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	440b      	add	r3, r1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	e034      	b.n	8001784 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d012      	beq.n	8001750 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b2d8      	uxtb	r0, r3
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 800173a:	885b      	ldrh	r3, [r3, #2]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4413      	add	r3, r2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	7bba      	ldrb	r2, [r7, #14]
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff ff5d 	bl	8001608 <ssd1306_DrawPixel>
 800174e:	e016      	b.n	800177e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001750:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b2d8      	uxtb	r0, r3
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 8001760:	885b      	ldrh	r3, [r3, #2]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b2d9      	uxtb	r1, r3
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf0c      	ite	eq
 8001772:	2301      	moveq	r3, #1
 8001774:	2300      	movne	r3, #0
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	f7ff ff45 	bl	8001608 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	3301      	adds	r3, #1
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	793b      	ldrb	r3, [r7, #4]
 8001786:	461a      	mov	r2, r3
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	4293      	cmp	r3, r2
 800178c:	d3c5      	bcc.n	800171a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3301      	adds	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	797b      	ldrb	r3, [r7, #5]
 8001796:	461a      	mov	r2, r3
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4293      	cmp	r3, r2
 800179c:	d3ad      	bcc.n	80016fa <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	793a      	ldrb	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <ssd1306_WriteChar+0x10c>)
 80017aa:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	@ 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200008d8 	.word	0x200008d8

080017bc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	1d38      	adds	r0, r7, #4
 80017c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80017ca:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80017cc:	e012      	b.n	80017f4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7818      	ldrb	r0, [r3, #0]
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	1d3a      	adds	r2, r7, #4
 80017d6:	ca06      	ldmia	r2, {r1, r2}
 80017d8:	f7ff ff68 	bl	80016ac <ssd1306_WriteChar>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d002      	beq.n	80017ee <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	e008      	b.n	8001800 <ssd1306_WriteString+0x44>
        }
        str++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e8      	bne.n	80017ce <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	781b      	ldrb	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <ssd1306_SetCursor+0x2c>)
 800181e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <ssd1306_SetCursor+0x2c>)
 8001826:	805a      	strh	r2, [r3, #2]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200008d8 	.word	0x200008d8

08001838 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001842:	2381      	movs	r3, #129	@ 0x81
 8001844:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe01 	bl	8001450 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fdfd 	bl	8001450 <ssd1306_WriteCommand>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001870:	23af      	movs	r3, #175	@ 0xaf
 8001872:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <ssd1306_SetDisplayOn+0x38>)
 8001876:	2201      	movs	r2, #1
 8001878:	715a      	strb	r2, [r3, #5]
 800187a:	e004      	b.n	8001886 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800187c:	23ae      	movs	r3, #174	@ 0xae
 800187e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <ssd1306_SetDisplayOn+0x38>)
 8001882:	2200      	movs	r2, #0
 8001884:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fde1 	bl	8001450 <ssd1306_WriteCommand>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200008d8 	.word	0x200008d8

0800189c <msg2SSD1306>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
void msg2SSD1306(char* msg, uint8_t x, uint8_t y){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
 80018a8:	4613      	mov	r3, r2
 80018aa:	70bb      	strb	r3, [r7, #2]
	ssd1306_SetCursor(x*7, y*10);
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	461a      	mov	r2, r3
 80018b0:	00d2      	lsls	r2, r2, #3
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	4619      	mov	r1, r3
 80018ba:	0089      	lsls	r1, r1, #2
 80018bc:	440b      	add	r3, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	4610      	mov	r0, r2
 80018c6:	f7ff ff9f 	bl	8001808 <ssd1306_SetCursor>
	ssd1306_WriteString(msg, Font_7x10, White);
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <msg2SSD1306+0x44>)
 80018cc:	2301      	movs	r3, #1
 80018ce:	ca06      	ldmia	r2, {r1, r2}
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff73 	bl	80017bc <ssd1306_WriteString>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008

080018e4 <displayOLED>:


void displayOLED(char percent[], char vol_1[], char vol_2[], char curr[], char tempt[]){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
	  ssd1306_Fill(Black);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fe48 	bl	8001588 <ssd1306_Fill>

	  msg2SSD1306(" 2S battery ", 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	4831      	ldr	r0, [pc, #196]	@ (80019c4 <displayOLED+0xe0>)
 80018fe:	f7ff ffcd 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(percent, 12, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	210c      	movs	r1, #12
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f7ff ffc8 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(" % ", 14, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	210e      	movs	r1, #14
 8001910:	482d      	ldr	r0, [pc, #180]	@ (80019c8 <displayOLED+0xe4>)
 8001912:	f7ff ffc3 	bl	800189c <msg2SSD1306>

	  msg2SSD1306("Vol Cell 1: ", 0, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	2100      	movs	r1, #0
 800191a:	482c      	ldr	r0, [pc, #176]	@ (80019cc <displayOLED+0xe8>)
 800191c:	f7ff ffbe 	bl	800189c <msg2SSD1306>
	  msg2SSD1306("        ", 12, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	210c      	movs	r1, #12
 8001924:	482a      	ldr	r0, [pc, #168]	@ (80019d0 <displayOLED+0xec>)
 8001926:	f7ff ffb9 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(vol_1, 12, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	210c      	movs	r1, #12
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ffb4 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(" v", 16, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	2110      	movs	r1, #16
 8001938:	4826      	ldr	r0, [pc, #152]	@ (80019d4 <displayOLED+0xf0>)
 800193a:	f7ff ffaf 	bl	800189c <msg2SSD1306>

	  msg2SSD1306("Vol Cell 2: ", 0, 2);
 800193e:	2202      	movs	r2, #2
 8001940:	2100      	movs	r1, #0
 8001942:	4825      	ldr	r0, [pc, #148]	@ (80019d8 <displayOLED+0xf4>)
 8001944:	f7ff ffaa 	bl	800189c <msg2SSD1306>
	  msg2SSD1306("        ", 12, 2);
 8001948:	2202      	movs	r2, #2
 800194a:	210c      	movs	r1, #12
 800194c:	4820      	ldr	r0, [pc, #128]	@ (80019d0 <displayOLED+0xec>)
 800194e:	f7ff ffa5 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(vol_2, 12, 2);
 8001952:	2202      	movs	r2, #2
 8001954:	210c      	movs	r1, #12
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa0 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(" v", 16, 2);
 800195c:	2202      	movs	r2, #2
 800195e:	2110      	movs	r1, #16
 8001960:	481c      	ldr	r0, [pc, #112]	@ (80019d4 <displayOLED+0xf0>)
 8001962:	f7ff ff9b 	bl	800189c <msg2SSD1306>

	  msg2SSD1306("current : ", 0, 3);
 8001966:	2203      	movs	r2, #3
 8001968:	2100      	movs	r1, #0
 800196a:	481c      	ldr	r0, [pc, #112]	@ (80019dc <displayOLED+0xf8>)
 800196c:	f7ff ff96 	bl	800189c <msg2SSD1306>
	  msg2SSD1306("        ", 9, 3);
 8001970:	2203      	movs	r2, #3
 8001972:	2109      	movs	r1, #9
 8001974:	4816      	ldr	r0, [pc, #88]	@ (80019d0 <displayOLED+0xec>)
 8001976:	f7ff ff91 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(curr, 10, 3);
 800197a:	2203      	movs	r2, #3
 800197c:	210a      	movs	r1, #10
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f7ff ff8c 	bl	800189c <msg2SSD1306>
	  msg2SSD1306("mA", 16, 3);
 8001984:	2203      	movs	r2, #3
 8001986:	2110      	movs	r1, #16
 8001988:	4815      	ldr	r0, [pc, #84]	@ (80019e0 <displayOLED+0xfc>)
 800198a:	f7ff ff87 	bl	800189c <msg2SSD1306>

	  msg2SSD1306("temperture: ", 0, 4);
 800198e:	2204      	movs	r2, #4
 8001990:	2100      	movs	r1, #0
 8001992:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <displayOLED+0x100>)
 8001994:	f7ff ff82 	bl	800189c <msg2SSD1306>
	  msg2SSD1306("     ", 12, 4);
 8001998:	2204      	movs	r2, #4
 800199a:	210c      	movs	r1, #12
 800199c:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <displayOLED+0x104>)
 800199e:	f7ff ff7d 	bl	800189c <msg2SSD1306>
	  msg2SSD1306(tempt, 12, 4);
 80019a2:	2204      	movs	r2, #4
 80019a4:	210c      	movs	r1, #12
 80019a6:	69b8      	ldr	r0, [r7, #24]
 80019a8:	f7ff ff78 	bl	800189c <msg2SSD1306>
	  msg2SSD1306("*C", 16, 4);
 80019ac:	2204      	movs	r2, #4
 80019ae:	2110      	movs	r1, #16
 80019b0:	480e      	ldr	r0, [pc, #56]	@ (80019ec <displayOLED+0x108>)
 80019b2:	f7ff ff73 	bl	800189c <msg2SSD1306>

	  ssd1306_UpdateScreen();
 80019b6:	f7ff fdff 	bl	80015b8 <ssd1306_UpdateScreen>

}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	08008dec 	.word	0x08008dec
 80019c8:	08008dfc 	.word	0x08008dfc
 80019cc:	08008e00 	.word	0x08008e00
 80019d0:	08008e10 	.word	0x08008e10
 80019d4:	08008e1c 	.word	0x08008e1c
 80019d8:	08008e20 	.word	0x08008e20
 80019dc:	08008e30 	.word	0x08008e30
 80019e0:	08008e3c 	.word	0x08008e3c
 80019e4:	08008e40 	.word	0x08008e40
 80019e8:	08008e50 	.word	0x08008e50
 80019ec:	08008e58 	.word	0x08008e58

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <HAL_MspInit+0x68>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a17      	ldr	r2, [pc, #92]	@ (8001a58 <HAL_MspInit+0x68>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_MspInit+0x68>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_MspInit+0x68>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a11      	ldr	r2, [pc, #68]	@ (8001a58 <HAL_MspInit+0x68>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_MspInit+0x68>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	210f      	movs	r1, #15
 8001a2a:	f06f 0001 	mvn.w	r0, #1
 8001a2e:	f000 ffac 	bl	800298a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_MspInit+0x6c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_MspInit+0x6c>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000

08001a60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a28      	ldr	r2, [pc, #160]	@ (8001b1c <HAL_ADC_MspInit+0xbc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d149      	bne.n	8001b14 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_ADC_MspInit+0xc0>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a26      	ldr	r2, [pc, #152]	@ (8001b20 <HAL_ADC_MspInit+0xc0>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <HAL_ADC_MspInit+0xc0>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <HAL_ADC_MspInit+0xc0>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a20      	ldr	r2, [pc, #128]	@ (8001b20 <HAL_ADC_MspInit+0xc0>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <HAL_ADC_MspInit+0xc0>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4819      	ldr	r0, [pc, #100]	@ (8001b24 <HAL_ADC_MspInit+0xc4>)
 8001ac0:	f001 f988 	bl	8002dd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001ac6:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_ADC_MspInit+0xcc>)
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001ad8:	2280      	movs	r2, #128	@ 0x80
 8001ada:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001ade:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001aee:	2220      	movs	r2, #32
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af8:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001afa:	f000 ff7d 	bl	80029f8 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b04:	f7ff fc98 	bl	8001438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001b0c:	621a      	str	r2, [r3, #32]
 8001b0e:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_ADC_MspInit+0xc8>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40012400 	.word	0x40012400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	20000368 	.word	0x20000368
 8001b2c:	40020008 	.word	0x40020008

08001b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <HAL_I2C_MspInit+0x90>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d132      	bne.n	8001bb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b50:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001b56:	f043 0308 	orr.w	r3, r3, #8
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6e:	2312      	movs	r3, #18
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4812      	ldr	r0, [pc, #72]	@ (8001bc8 <HAL_I2C_MspInit+0x98>)
 8001b7e:	f001 f929 	bl	8002dd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_I2C_MspInit+0x9c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b98:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <HAL_I2C_MspInit+0x9c>)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001ba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_I2C_MspInit+0x94>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	@ 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010c00 	.word	0x40010c00
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	@ 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a3e      	ldr	r2, [pc, #248]	@ (8001ce4 <HAL_UART_MspInit+0x114>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d13e      	bne.n	8001c6e <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b37      	ldr	r3, [pc, #220]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a36      	ldr	r2, [pc, #216]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c20:	2340      	movs	r3, #64	@ 0x40
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4619      	mov	r1, r3
 8001c32:	482e      	ldr	r0, [pc, #184]	@ (8001cec <HAL_UART_MspInit+0x11c>)
 8001c34:	f001 f8ce 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4828      	ldr	r0, [pc, #160]	@ (8001cec <HAL_UART_MspInit+0x11c>)
 8001c4c:	f001 f8c2 	bl	8002dd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_UART_MspInit+0x120>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c58:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	4a22      	ldr	r2, [pc, #136]	@ (8001cf0 <HAL_UART_MspInit+0x120>)
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c6c:	e036      	b.n	8001cdc <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <HAL_UART_MspInit+0x124>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d131      	bne.n	8001cdc <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c82:	61d3      	str	r3, [r2, #28]
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_UART_MspInit+0x118>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480b      	ldr	r0, [pc, #44]	@ (8001cec <HAL_UART_MspInit+0x11c>)
 8001cbe:	f001 f889 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <HAL_UART_MspInit+0x11c>)
 8001cd8:	f001 f87c 	bl	8002dd4 <HAL_GPIO_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	3730      	adds	r7, #48	@ 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40010c00 	.word	0x40010c00
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40004800 	.word	0x40004800

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <NMI_Handler+0x4>

08001d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <MemManage_Handler+0x4>

08001d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 f948 	bl	8001fc4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d34:	f003 ffca 	bl	8005ccc <xTaskGetSchedulerState>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d3e:	f004 fa43 	bl	80061c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <DMA1_Channel1_IRQHandler+0x10>)
 8001d4e:	f000 ff0d 	bl	8002b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000368 	.word	0x20000368

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <_kill>:

int _kill(int pid, int sig)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d74:	f004 fe18 	bl	80069a8 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2216      	movs	r2, #22
 8001d7c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_exit>:

void _exit (int status)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d92:	f04f 31ff 	mov.w	r1, #4294967295
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffe7 	bl	8001d6a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <_exit+0x12>

08001da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e00a      	b.n	8001dc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db2:	f3af 8000 	nop.w
 8001db6:	4601      	mov	r1, r0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf0      	blt.n	8001db2 <_read+0x12>
  }

  return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e009      	b.n	8001e00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbf1      	blt.n	8001dec <_write+0x12>
  }
  return len;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_close>:

int _close(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e38:	605a      	str	r2, [r3, #4]
  return 0;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <_isatty>:

int _isatty(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
	...

08001e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <_sbrk+0x5c>)
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <_sbrk+0x60>)
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e90:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <_sbrk+0x64>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <_sbrk+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d207      	bcs.n	8001eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea4:	f004 fd80 	bl	80069a8 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	220c      	movs	r2, #12
 8001eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	e009      	b.n	8001ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <_sbrk+0x64>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <_sbrk+0x64>)
 8001ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20005000 	.word	0x20005000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	200008e0 	.word	0x200008e0
 8001edc:	20001780 	.word	0x20001780

08001ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eec:	f7ff fff8 	bl	8001ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef0:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ef2:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f08:	4c09      	ldr	r4, [pc, #36]	@ (8001f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f16:	f004 fd4d 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1a:	f7fe ff4f 	bl	8000dbc <main>
  bx lr
 8001f1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f28:	08009858 	.word	0x08009858
  ldr r2, =_sbss
 8001f2c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001f30:	20001780 	.word	0x20001780

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_Init+0x28>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	@ (8001f60 <HAL_Init+0x28>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 fd13 	bl	8002974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fd4c 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd2b 	bl	80029de <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 fcf3 	bl	800298a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	@ (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	20000014 	.word	0x20000014

08001fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_IncTick+0x1c>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_IncTick+0x20>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a03      	ldr	r2, [pc, #12]	@ (8001fe4 <HAL_IncTick+0x20>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	20000018 	.word	0x20000018
 8001fe4:	200008e4 	.word	0x200008e4

08001fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <HAL_GetTick+0x10>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	200008e4 	.word	0x200008e4

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d005      	beq.n	8002022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_Delay+0x44>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002022:	bf00      	nop
 8002024:	f7ff ffe0 	bl	8001fe8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	429a      	cmp	r2, r3
 8002032:	d8f7      	bhi.n	8002024 <HAL_Delay+0x28>
  {
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000018 	.word	0x20000018

08002044 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0be      	b.n	80021e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	2b00      	cmp	r3, #0
 8002072:	d109      	bne.n	8002088 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fcec 	bl	8001a60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 faff 	bl	800268c <ADC_ConversionStop_Disable>
 800208e:	4603      	mov	r3, r0
 8002090:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8099 	bne.w	80021d2 <HAL_ADC_Init+0x18e>
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8095 	bne.w	80021d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020b0:	f023 0302 	bic.w	r3, r3, #2
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7b1b      	ldrb	r3, [r3, #12]
 80020ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020dc:	d003      	beq.n	80020e6 <HAL_ADC_Init+0xa2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_ADC_Init+0xa8>
 80020e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ea:	e000      	b.n	80020ee <HAL_ADC_Init+0xaa>
 80020ec:	2300      	movs	r3, #0
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7d1b      	ldrb	r3, [r3, #20]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d119      	bne.n	8002130 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7b1b      	ldrb	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	3b01      	subs	r3, #1
 800210a:	035a      	lsls	r2, r3, #13
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	e00b      	b.n	8002130 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	430a      	orrs	r2, r1
 8002142:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <HAL_ADC_Init+0x1a8>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	430b      	orrs	r3, r1
 8002156:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002160:	d003      	beq.n	800216a <HAL_ADC_Init+0x126>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d104      	bne.n	8002174 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	3b01      	subs	r3, #1
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	430a      	orrs	r2, r1
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_ADC_Init+0x1ac>)
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d10b      	bne.n	80021b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021ae:	e018      	b.n	80021e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	f023 0312 	bic.w	r3, r3, #18
 80021b8:	f043 0210 	orr.w	r2, r3, #16
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	ffe1f7fd 	.word	0xffe1f7fd
 80021f0:	ff1f0efe 	.word	0xff1f0efe

080021f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a64      	ldr	r2, [pc, #400]	@ (800239c <HAL_ADC_Start_DMA+0x1a8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_ADC_Start_DMA+0x24>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a63      	ldr	r2, [pc, #396]	@ (80023a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d106      	bne.n	8002226 <HAL_ADC_Start_DMA+0x32>
 8002218:	4b60      	ldr	r3, [pc, #384]	@ (800239c <HAL_ADC_Start_DMA+0x1a8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 80b3 	bne.w	800238c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_Start_DMA+0x40>
 8002230:	2302      	movs	r3, #2
 8002232:	e0ae      	b.n	8002392 <HAL_ADC_Start_DMA+0x19e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f9cb 	bl	80025d8 <ADC_Enable>
 8002242:	4603      	mov	r3, r0
 8002244:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 809a 	bne.w	8002382 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4e      	ldr	r2, [pc, #312]	@ (80023a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d105      	bne.n	8002278 <HAL_ADC_Start_DMA+0x84>
 800226c:	4b4b      	ldr	r3, [pc, #300]	@ (800239c <HAL_ADC_Start_DMA+0x1a8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d115      	bne.n	80022a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d026      	beq.n	80022e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800229a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a2:	e01d      	b.n	80022e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a39      	ldr	r2, [pc, #228]	@ (800239c <HAL_ADC_Start_DMA+0x1a8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d004      	beq.n	80022c4 <HAL_ADC_Start_DMA+0xd0>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a38      	ldr	r2, [pc, #224]	@ (80023a0 <HAL_ADC_Start_DMA+0x1ac>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10d      	bne.n	80022e0 <HAL_ADC_Start_DMA+0xec>
 80022c4:	4b35      	ldr	r3, [pc, #212]	@ (800239c <HAL_ADC_Start_DMA+0x1a8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	f023 0206 	bic.w	r2, r3, #6
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a25      	ldr	r2, [pc, #148]	@ (80023a4 <HAL_ADC_Start_DMA+0x1b0>)
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <HAL_ADC_Start_DMA+0x1b4>)
 8002316:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a23      	ldr	r2, [pc, #140]	@ (80023ac <HAL_ADC_Start_DMA+0x1b8>)
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002338:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a18      	ldr	r0, [r3, #32]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	334c      	adds	r3, #76	@ 0x4c
 8002344:	4619      	mov	r1, r3
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f000 fbaf 	bl	8002aac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002358:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800235c:	d108      	bne.n	8002370 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800236c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800236e:	e00f      	b.n	8002390 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800237e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002380:	e006      	b.n	8002390 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800238a:	e001      	b.n	8002390 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002390:	7dfb      	ldrb	r3, [r7, #23]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40012400 	.word	0x40012400
 80023a0:	40012800 	.word	0x40012800
 80023a4:	0800270f 	.word	0x0800270f
 80023a8:	0800278b 	.word	0x0800278b
 80023ac:	080027a7 	.word	0x080027a7

080023b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x20>
 8002404:	2302      	movs	r3, #2
 8002406:	e0dc      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1da>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b06      	cmp	r3, #6
 8002416:	d81c      	bhi.n	8002452 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	3b05      	subs	r3, #5
 800242a:	221f      	movs	r2, #31
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	4019      	ands	r1, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b05      	subs	r3, #5
 8002444:	fa00 f203 	lsl.w	r2, r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002450:	e03c      	b.n	80024cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d81c      	bhi.n	8002494 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b23      	subs	r3, #35	@ 0x23
 800246c:	221f      	movs	r2, #31
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	4019      	ands	r1, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b23      	subs	r3, #35	@ 0x23
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
 8002492:	e01b      	b.n	80024cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	3b41      	subs	r3, #65	@ 0x41
 80024a6:	221f      	movs	r2, #31
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4019      	ands	r1, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b41      	subs	r3, #65	@ 0x41
 80024c0:	fa00 f203 	lsl.w	r2, r0, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b09      	cmp	r3, #9
 80024d2:	d91c      	bls.n	800250e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68d9      	ldr	r1, [r3, #12]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	3b1e      	subs	r3, #30
 80024e6:	2207      	movs	r2, #7
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4019      	ands	r1, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6898      	ldr	r0, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	3b1e      	subs	r3, #30
 8002500:	fa00 f203 	lsl.w	r2, r0, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	e019      	b.n	8002542 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6919      	ldr	r1, [r3, #16]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	2207      	movs	r2, #7
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	4019      	ands	r1, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6898      	ldr	r0, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	fa00 f203 	lsl.w	r2, r0, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b10      	cmp	r3, #16
 8002548:	d003      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800254e:	2b11      	cmp	r3, #17
 8002550:	d132      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d125      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d126      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002578:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d11a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a13      	ldr	r2, [pc, #76]	@ (80025d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9a      	lsrs	r2, r3, #18
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_ConfigChannel+0x1b2>
 80025a6:	e007      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	40012400 	.word	0x40012400
 80025d0:	20000010 	.word	0x20000010
 80025d4:	431bde83 	.word	0x431bde83

080025d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d040      	beq.n	8002678 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002606:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <ADC_Enable+0xac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <ADC_Enable+0xb0>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	0c9b      	lsrs	r3, r3, #18
 8002612:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002614:	e002      	b.n	800261c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3b01      	subs	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002622:	f7ff fce1 	bl	8001fe8 <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002628:	e01f      	b.n	800266a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800262a:	f7ff fcdd 	bl	8001fe8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d918      	bls.n	800266a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d011      	beq.n	800266a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e007      	b.n	800267a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d1d8      	bne.n	800262a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000010 	.word	0x20000010
 8002688:	431bde83 	.word	0x431bde83

0800268c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d12e      	bne.n	8002704 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026b6:	f7ff fc97 	bl	8001fe8 <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	e01b      	b.n	80026f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026be:	f7ff fc93 	bl	8001fe8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d914      	bls.n	80026f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10d      	bne.n	80026f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d0dc      	beq.n	80026be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002724:	2b00      	cmp	r3, #0
 8002726:	d127      	bne.n	8002778 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800273e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002742:	d115      	bne.n	8002770 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff fe1d 	bl	80023b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002776:	e004      	b.n	8002782 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fe12 	bl	80023c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fe01 	bl	80023d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800280c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280e:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <__NVIC_SetPriorityGrouping+0x44>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	60d3      	str	r3, [r2, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <__NVIC_GetPriorityGrouping+0x18>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0307 	and.w	r3, r3, #7
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db0b      	blt.n	800286a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	f003 021f 	and.w	r2, r3, #31
 8002858:	4906      	ldr	r1, [pc, #24]	@ (8002874 <__NVIC_EnableIRQ+0x34>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2001      	movs	r0, #1
 8002862:	fa00 f202 	lsl.w	r2, r0, r2
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100

08002878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	db0a      	blt.n	80028a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	490c      	ldr	r1, [pc, #48]	@ (80028c4 <__NVIC_SetPriority+0x4c>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	0112      	lsls	r2, r2, #4
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	440b      	add	r3, r1
 800289c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a0:	e00a      	b.n	80028b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	4908      	ldr	r1, [pc, #32]	@ (80028c8 <__NVIC_SetPriority+0x50>)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	3b04      	subs	r3, #4
 80028b0:	0112      	lsls	r2, r2, #4
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	440b      	add	r3, r1
 80028b6:	761a      	strb	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	@ 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f1c3 0307 	rsb	r3, r3, #7
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	bf28      	it	cs
 80028ea:	2304      	movcs	r3, #4
 80028ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3304      	adds	r3, #4
 80028f2:	2b06      	cmp	r3, #6
 80028f4:	d902      	bls.n	80028fc <NVIC_EncodePriority+0x30>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b03      	subs	r3, #3
 80028fa:	e000      	b.n	80028fe <NVIC_EncodePriority+0x32>
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002914:	f04f 31ff 	mov.w	r1, #4294967295
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa01 f303 	lsl.w	r3, r1, r3
 800291e:	43d9      	mvns	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	4313      	orrs	r3, r2
         );
}
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	@ 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002940:	d301      	bcc.n	8002946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002942:	2301      	movs	r3, #1
 8002944:	e00f      	b.n	8002966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <SysTick_Config+0x40>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294e:	210f      	movs	r1, #15
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f7ff ff90 	bl	8002878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <SysTick_Config+0x40>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <SysTick_Config+0x40>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff2d 	bl	80027dc <__NVIC_SetPriorityGrouping>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	607a      	str	r2, [r7, #4]
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299c:	f7ff ff42 	bl	8002824 <__NVIC_GetPriorityGrouping>
 80029a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	6978      	ldr	r0, [r7, #20]
 80029a8:	f7ff ff90 	bl	80028cc <NVIC_EncodePriority>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5f 	bl	8002878 <__NVIC_SetPriority>
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff35 	bl	8002840 <__NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff ffa2 	bl	8002930 <SysTick_Config>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e043      	b.n	8002a96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_DMA_Init+0xa8>)
 8002a16:	4413      	add	r3, r2
 8002a18:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <HAL_DMA_Init+0xac>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa8 <HAL_DMA_Init+0xb0>)
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	bffdfff8 	.word	0xbffdfff8
 8002aa4:	cccccccd 	.word	0xcccccccd
 8002aa8:	40020000 	.word	0x40020000

08002aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_DMA_Start_IT+0x20>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e04b      	b.n	8002b64 <HAL_DMA_Start_IT+0xb8>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d13a      	bne.n	8002b56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f937 	bl	8002d78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 020e 	orr.w	r2, r2, #14
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e00f      	b.n	8002b44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 020a 	orr.w	r2, r2, #10
 8002b42:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e005      	b.n	8002b62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	2204      	movs	r2, #4
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d04f      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xc8>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0204 	bic.w	r2, r2, #4
 8002bba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a66      	ldr	r2, [pc, #408]	@ (8002d5c <HAL_DMA_IRQHandler+0x1f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d029      	beq.n	8002c1a <HAL_DMA_IRQHandler+0xae>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a65      	ldr	r2, [pc, #404]	@ (8002d60 <HAL_DMA_IRQHandler+0x1f4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d022      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xaa>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a63      	ldr	r2, [pc, #396]	@ (8002d64 <HAL_DMA_IRQHandler+0x1f8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01a      	beq.n	8002c10 <HAL_DMA_IRQHandler+0xa4>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a62      	ldr	r2, [pc, #392]	@ (8002d68 <HAL_DMA_IRQHandler+0x1fc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d012      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x9e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a60      	ldr	r2, [pc, #384]	@ (8002d6c <HAL_DMA_IRQHandler+0x200>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x98>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d70 <HAL_DMA_IRQHandler+0x204>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d102      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x92>
 8002bf8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bfc:	e00e      	b.n	8002c1c <HAL_DMA_IRQHandler+0xb0>
 8002bfe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c02:	e00b      	b.n	8002c1c <HAL_DMA_IRQHandler+0xb0>
 8002c04:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c08:	e008      	b.n	8002c1c <HAL_DMA_IRQHandler+0xb0>
 8002c0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c0e:	e005      	b.n	8002c1c <HAL_DMA_IRQHandler+0xb0>
 8002c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c14:	e002      	b.n	8002c1c <HAL_DMA_IRQHandler+0xb0>
 8002c16:	2340      	movs	r3, #64	@ 0x40
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_IRQHandler+0xb0>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	4a55      	ldr	r2, [pc, #340]	@ (8002d74 <HAL_DMA_IRQHandler+0x208>)
 8002c1e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8094 	beq.w	8002d52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c32:	e08e      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2202      	movs	r2, #2
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d056      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x186>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d051      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 020a 	bic.w	r2, r2, #10
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a38      	ldr	r2, [pc, #224]	@ (8002d5c <HAL_DMA_IRQHandler+0x1f0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d029      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x166>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a37      	ldr	r2, [pc, #220]	@ (8002d60 <HAL_DMA_IRQHandler+0x1f4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_IRQHandler+0x162>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a35      	ldr	r2, [pc, #212]	@ (8002d64 <HAL_DMA_IRQHandler+0x1f8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x15c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a34      	ldr	r2, [pc, #208]	@ (8002d68 <HAL_DMA_IRQHandler+0x1fc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d012      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x156>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a32      	ldr	r2, [pc, #200]	@ (8002d6c <HAL_DMA_IRQHandler+0x200>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00a      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x150>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a31      	ldr	r2, [pc, #196]	@ (8002d70 <HAL_DMA_IRQHandler+0x204>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d102      	bne.n	8002cb6 <HAL_DMA_IRQHandler+0x14a>
 8002cb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002cb4:	e00e      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x168>
 8002cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cba:	e00b      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x168>
 8002cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc0:	e008      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x168>
 8002cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cc6:	e005      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x168>
 8002cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ccc:	e002      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x168>
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x168>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	4a27      	ldr	r2, [pc, #156]	@ (8002d74 <HAL_DMA_IRQHandler+0x208>)
 8002cd6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d034      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cf0:	e02f      	b.n	8002d52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d028      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x1e8>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020e 	bic.w	r2, r2, #14
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
    }
  }
  return;
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
}
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40020008 	.word	0x40020008
 8002d60:	4002001c 	.word	0x4002001c
 8002d64:	40020030 	.word	0x40020030
 8002d68:	40020044 	.word	0x40020044
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	4002006c 	.word	0x4002006c
 8002d74:	40020000 	.word	0x40020000

08002d78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d108      	bne.n	8002db8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002db6:	e007      	b.n	8002dc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b08b      	sub	sp, #44	@ 0x2c
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de6:	e169      	b.n	80030bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de8:	2201      	movs	r2, #1
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f040 8158 	bne.w	80030b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4a9a      	ldr	r2, [pc, #616]	@ (8003074 <HAL_GPIO_Init+0x2a0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d05e      	beq.n	8002ece <HAL_GPIO_Init+0xfa>
 8002e10:	4a98      	ldr	r2, [pc, #608]	@ (8003074 <HAL_GPIO_Init+0x2a0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d875      	bhi.n	8002f02 <HAL_GPIO_Init+0x12e>
 8002e16:	4a98      	ldr	r2, [pc, #608]	@ (8003078 <HAL_GPIO_Init+0x2a4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d058      	beq.n	8002ece <HAL_GPIO_Init+0xfa>
 8002e1c:	4a96      	ldr	r2, [pc, #600]	@ (8003078 <HAL_GPIO_Init+0x2a4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d86f      	bhi.n	8002f02 <HAL_GPIO_Init+0x12e>
 8002e22:	4a96      	ldr	r2, [pc, #600]	@ (800307c <HAL_GPIO_Init+0x2a8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d052      	beq.n	8002ece <HAL_GPIO_Init+0xfa>
 8002e28:	4a94      	ldr	r2, [pc, #592]	@ (800307c <HAL_GPIO_Init+0x2a8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d869      	bhi.n	8002f02 <HAL_GPIO_Init+0x12e>
 8002e2e:	4a94      	ldr	r2, [pc, #592]	@ (8003080 <HAL_GPIO_Init+0x2ac>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d04c      	beq.n	8002ece <HAL_GPIO_Init+0xfa>
 8002e34:	4a92      	ldr	r2, [pc, #584]	@ (8003080 <HAL_GPIO_Init+0x2ac>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d863      	bhi.n	8002f02 <HAL_GPIO_Init+0x12e>
 8002e3a:	4a92      	ldr	r2, [pc, #584]	@ (8003084 <HAL_GPIO_Init+0x2b0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d046      	beq.n	8002ece <HAL_GPIO_Init+0xfa>
 8002e40:	4a90      	ldr	r2, [pc, #576]	@ (8003084 <HAL_GPIO_Init+0x2b0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d85d      	bhi.n	8002f02 <HAL_GPIO_Init+0x12e>
 8002e46:	2b12      	cmp	r3, #18
 8002e48:	d82a      	bhi.n	8002ea0 <HAL_GPIO_Init+0xcc>
 8002e4a:	2b12      	cmp	r3, #18
 8002e4c:	d859      	bhi.n	8002f02 <HAL_GPIO_Init+0x12e>
 8002e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <HAL_GPIO_Init+0x80>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002ecf 	.word	0x08002ecf
 8002e58:	08002ea9 	.word	0x08002ea9
 8002e5c:	08002ebb 	.word	0x08002ebb
 8002e60:	08002efd 	.word	0x08002efd
 8002e64:	08002f03 	.word	0x08002f03
 8002e68:	08002f03 	.word	0x08002f03
 8002e6c:	08002f03 	.word	0x08002f03
 8002e70:	08002f03 	.word	0x08002f03
 8002e74:	08002f03 	.word	0x08002f03
 8002e78:	08002f03 	.word	0x08002f03
 8002e7c:	08002f03 	.word	0x08002f03
 8002e80:	08002f03 	.word	0x08002f03
 8002e84:	08002f03 	.word	0x08002f03
 8002e88:	08002f03 	.word	0x08002f03
 8002e8c:	08002f03 	.word	0x08002f03
 8002e90:	08002f03 	.word	0x08002f03
 8002e94:	08002f03 	.word	0x08002f03
 8002e98:	08002eb1 	.word	0x08002eb1
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	4a79      	ldr	r2, [pc, #484]	@ (8003088 <HAL_GPIO_Init+0x2b4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ea6:	e02c      	b.n	8002f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	623b      	str	r3, [r7, #32]
          break;
 8002eae:	e029      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	623b      	str	r3, [r7, #32]
          break;
 8002eb8:	e024      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	623b      	str	r3, [r7, #32]
          break;
 8002ec2:	e01f      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	623b      	str	r3, [r7, #32]
          break;
 8002ecc:	e01a      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	623b      	str	r3, [r7, #32]
          break;
 8002eda:	e013      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	611a      	str	r2, [r3, #16]
          break;
 8002eee:	e009      	b.n	8002f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	615a      	str	r2, [r3, #20]
          break;
 8002efa:	e003      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
          break;
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_Init+0x130>
          break;
 8002f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2bff      	cmp	r3, #255	@ 0xff
 8002f08:	d801      	bhi.n	8002f0e <HAL_GPIO_Init+0x13a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	e001      	b.n	8002f12 <HAL_GPIO_Init+0x13e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2bff      	cmp	r3, #255	@ 0xff
 8002f18:	d802      	bhi.n	8002f20 <HAL_GPIO_Init+0x14c>
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	e002      	b.n	8002f26 <HAL_GPIO_Init+0x152>
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	3b08      	subs	r3, #8
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	210f      	movs	r1, #15
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	6a39      	ldr	r1, [r7, #32]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	431a      	orrs	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80b1 	beq.w	80030b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f54:	4b4d      	ldr	r3, [pc, #308]	@ (800308c <HAL_GPIO_Init+0x2b8>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	@ (800308c <HAL_GPIO_Init+0x2b8>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <HAL_GPIO_Init+0x2b8>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f6c:	4a48      	ldr	r2, [pc, #288]	@ (8003090 <HAL_GPIO_Init+0x2bc>)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	220f      	movs	r2, #15
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a40      	ldr	r2, [pc, #256]	@ (8003094 <HAL_GPIO_Init+0x2c0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_GPIO_Init+0x1ec>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003098 <HAL_GPIO_Init+0x2c4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00d      	beq.n	8002fbc <HAL_GPIO_Init+0x1e8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800309c <HAL_GPIO_Init+0x2c8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <HAL_GPIO_Init+0x1e4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3d      	ldr	r2, [pc, #244]	@ (80030a0 <HAL_GPIO_Init+0x2cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d101      	bne.n	8002fb4 <HAL_GPIO_Init+0x1e0>
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e006      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e004      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e002      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_GPIO_Init+0x1ee>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fd2:	492f      	ldr	r1, [pc, #188]	@ (8003090 <HAL_GPIO_Init+0x2bc>)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fec:	4b2d      	ldr	r3, [pc, #180]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	492c      	ldr	r1, [pc, #176]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
 8002ff8:	e006      	b.n	8003008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	43db      	mvns	r3, r3
 8003002:	4928      	ldr	r1, [pc, #160]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8003004:	4013      	ands	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003014:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	4922      	ldr	r1, [pc, #136]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003022:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	43db      	mvns	r3, r3
 800302a:	491e      	ldr	r1, [pc, #120]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 800302c:	4013      	ands	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800303c:	4b19      	ldr	r3, [pc, #100]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4918      	ldr	r1, [pc, #96]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e006      	b.n	8003058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800304a:	4b16      	ldr	r3, [pc, #88]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	43db      	mvns	r3, r3
 8003052:	4914      	ldr	r1, [pc, #80]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8003054:	4013      	ands	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d021      	beq.n	80030a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	490e      	ldr	r1, [pc, #56]	@ (80030a4 <HAL_GPIO_Init+0x2d0>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e021      	b.n	80030b6 <HAL_GPIO_Init+0x2e2>
 8003072:	bf00      	nop
 8003074:	10320000 	.word	0x10320000
 8003078:	10310000 	.word	0x10310000
 800307c:	10220000 	.word	0x10220000
 8003080:	10210000 	.word	0x10210000
 8003084:	10120000 	.word	0x10120000
 8003088:	10110000 	.word	0x10110000
 800308c:	40021000 	.word	0x40021000
 8003090:	40010000 	.word	0x40010000
 8003094:	40010800 	.word	0x40010800
 8003098:	40010c00 	.word	0x40010c00
 800309c:	40011000 	.word	0x40011000
 80030a0:	40011400 	.word	0x40011400
 80030a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_GPIO_Init+0x304>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4909      	ldr	r1, [pc, #36]	@ (80030d8 <HAL_GPIO_Init+0x304>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f47f ae8e 	bne.w	8002de8 <HAL_GPIO_Init+0x14>
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	372c      	adds	r7, #44	@ 0x2c
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030f8:	e003      	b.n	8003102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e12b      	b.n	8003376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe fcfc 	bl	8001b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2224      	movs	r2, #36	@ 0x24
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800315e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800316e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003170:	f001 f842 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8003174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a81      	ldr	r2, [pc, #516]	@ (8003380 <HAL_I2C_Init+0x274>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d807      	bhi.n	8003190 <HAL_I2C_Init+0x84>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a80      	ldr	r2, [pc, #512]	@ (8003384 <HAL_I2C_Init+0x278>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e006      	b.n	800319e <HAL_I2C_Init+0x92>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a7d      	ldr	r2, [pc, #500]	@ (8003388 <HAL_I2C_Init+0x27c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	bf94      	ite	ls
 8003198:	2301      	movls	r3, #1
 800319a:	2300      	movhi	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a78      	ldr	r2, [pc, #480]	@ (800338c <HAL_I2C_Init+0x280>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0c9b      	lsrs	r3, r3, #18
 80031b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003380 <HAL_I2C_Init+0x274>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d802      	bhi.n	80031e0 <HAL_I2C_Init+0xd4>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3301      	adds	r3, #1
 80031de:	e009      	b.n	80031f4 <HAL_I2C_Init+0xe8>
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	4a69      	ldr	r2, [pc, #420]	@ (8003390 <HAL_I2C_Init+0x284>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	495c      	ldr	r1, [pc, #368]	@ (8003380 <HAL_I2C_Init+0x274>)
 8003210:	428b      	cmp	r3, r1
 8003212:	d819      	bhi.n	8003248 <HAL_I2C_Init+0x13c>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e59      	subs	r1, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003228:	400b      	ands	r3, r1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_I2C_Init+0x138>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1e59      	subs	r1, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fbb1 f3f3 	udiv	r3, r1, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	e051      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 8003244:	2304      	movs	r3, #4
 8003246:	e04f      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d111      	bne.n	8003274 <HAL_I2C_Init+0x168>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	440b      	add	r3, r1
 800325e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003262:	3301      	adds	r3, #1
 8003264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	e012      	b.n	800329a <HAL_I2C_Init+0x18e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	0099      	lsls	r1, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	fbb0 f3f3 	udiv	r3, r0, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Init+0x196>
 800329e:	2301      	movs	r3, #1
 80032a0:	e022      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10e      	bne.n	80032c8 <HAL_I2C_Init+0x1bc>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1e58      	subs	r0, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	440b      	add	r3, r1
 80032b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c6:	e00f      	b.n	80032e8 <HAL_I2C_Init+0x1dc>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	0099      	lsls	r1, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	fbb0 f3f3 	udiv	r3, r0, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	6809      	ldr	r1, [r1, #0]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6911      	ldr	r1, [r2, #16]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	4311      	orrs	r1, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	430b      	orrs	r3, r1
 800332a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	000186a0 	.word	0x000186a0
 8003384:	001e847f 	.word	0x001e847f
 8003388:	003d08ff 	.word	0x003d08ff
 800338c:	431bde83 	.word	0x431bde83
 8003390:	10624dd3 	.word	0x10624dd3

08003394 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	460b      	mov	r3, r1
 80033a8:	813b      	strh	r3, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ae:	f7fe fe1b 	bl	8001fe8 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b20      	cmp	r3, #32
 80033be:	f040 80d9 	bne.w	8003574 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2319      	movs	r3, #25
 80033c8:	2201      	movs	r2, #1
 80033ca:	496d      	ldr	r1, [pc, #436]	@ (8003580 <HAL_I2C_Mem_Write+0x1ec>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f971 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	e0cc      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Mem_Write+0x56>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0c5      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d007      	beq.n	8003410 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2221      	movs	r2, #33	@ 0x21
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2240      	movs	r2, #64	@ 0x40
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a4d      	ldr	r2, [pc, #308]	@ (8003584 <HAL_I2C_Mem_Write+0x1f0>)
 8003450:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003452:	88f8      	ldrh	r0, [r7, #6]
 8003454:	893a      	ldrh	r2, [r7, #8]
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4603      	mov	r3, r0
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f890 	bl	8003588 <I2C_RequestMemoryWrite>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d052      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e081      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa36 	bl	80038e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b04      	cmp	r3, #4
 8003488:	d107      	bne.n	800349a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06b      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_I2C_Mem_Write+0x180>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d017      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1aa      	bne.n	8003472 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fa29 	bl	8003978 <I2C_WaitOnBTFFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	2b04      	cmp	r3, #4
 8003532:	d107      	bne.n	8003544 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e016      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	00100002 	.word	0x00100002
 8003584:	ffff0000 	.word	0xffff0000

08003588 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	461a      	mov	r2, r3
 8003596:	4603      	mov	r3, r0
 8003598:	817b      	strh	r3, [r7, #10]
 800359a:	460b      	mov	r3, r1
 800359c:	813b      	strh	r3, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f878 	bl	80036b4 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00d      	beq.n	80035e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d8:	d103      	bne.n	80035e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e05f      	b.n	80036a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035e6:	897b      	ldrh	r3, [r7, #10]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	6a3a      	ldr	r2, [r7, #32]
 80035fa:	492d      	ldr	r1, [pc, #180]	@ (80036b0 <I2C_RequestMemoryWrite+0x128>)
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f8d3 	bl	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04c      	b.n	80036a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003624:	6a39      	ldr	r1, [r7, #32]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f95e 	bl	80038e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b04      	cmp	r3, #4
 8003638:	d107      	bne.n	800364a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003648:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02b      	b.n	80036a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003654:	893b      	ldrh	r3, [r7, #8]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]
 800365e:	e021      	b.n	80036a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	b29b      	uxth	r3, r3
 8003666:	b2da      	uxtb	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f938 	bl	80038e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	2b04      	cmp	r3, #4
 8003684:	d107      	bne.n	8003696 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003694:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e005      	b.n	80036a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800369a:	893b      	ldrh	r3, [r7, #8]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	00010002 	.word	0x00010002

080036b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c4:	e048      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d044      	beq.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ce:	f7fe fc8b 	bl	8001fe8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d302      	bcc.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d139      	bne.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10d      	bne.n	800370a <I2C_WaitOnFlagUntilTimeout+0x56>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	e00c      	b.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x70>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	429a      	cmp	r2, r3
 8003728:	d116      	bne.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e023      	b.n	80037a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10d      	bne.n	800377e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	e00c      	b.n	8003798 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	43da      	mvns	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4013      	ands	r3, r2
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	429a      	cmp	r2, r3
 800379c:	d093      	beq.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b6:	e071      	b.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c6:	d123      	bne.n	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e067      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d041      	beq.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fe fbe6 	bl	8001fe8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d136      	bne.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10c      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	e00b      	b.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	43da      	mvns	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e021      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d10c      	bne.n	80038c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e00b      	b.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f af6d 	bne.w	80037b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f4:	e034      	b.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f886 	bl	8003a08 <I2C_IsAcknowledgeFailed>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e034      	b.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d028      	beq.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe fb6b 	bl	8001fe8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11d      	bne.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d016      	beq.n	8003960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	f043 0220 	orr.w	r2, r3, #32
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396a:	2b80      	cmp	r3, #128	@ 0x80
 800396c:	d1c3      	bne.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003984:	e034      	b.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f83e 	bl	8003a08 <I2C_IsAcknowledgeFailed>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e034      	b.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d028      	beq.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fe fb23 	bl	8001fe8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11d      	bne.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d016      	beq.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e007      	b.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d1c3      	bne.n	8003986 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1e:	d11b      	bne.n	8003a58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f043 0204 	orr.w	r2, r3, #4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e272      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8087 	beq.w	8003b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a84:	4b92      	ldr	r3, [pc, #584]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d00c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a90:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d112      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x5e>
 8003a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aaa:	4b89      	ldr	r3, [pc, #548]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d06c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x12c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d168      	bne.n	8003b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e24c      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x76>
 8003acc:	4b80      	ldr	r3, [pc, #512]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e02e      	b.n	8003b38 <HAL_RCC_OscConfig+0xd4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x98>
 8003ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b78      	ldr	r3, [pc, #480]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a77      	ldr	r2, [pc, #476]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xd4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0xbc>
 8003b06:	4b72      	ldr	r3, [pc, #456]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a71      	ldr	r2, [pc, #452]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xd4>
 8003b20:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b68      	ldr	r3, [pc, #416]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a67      	ldr	r2, [pc, #412]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fa52 	bl	8001fe8 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe fa4e 	bl	8001fe8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e200      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe4>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe fa3e 	bl	8001fe8 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fa3a 	bl	8001fe8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	@ 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1ec      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	4b53      	ldr	r3, [pc, #332]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x10c>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d063      	beq.n	8003c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003baa:	4b49      	ldr	r3, [pc, #292]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d11c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x18c>
 8003bb6:	4b46      	ldr	r3, [pc, #280]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d116      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	4b43      	ldr	r3, [pc, #268]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_RCC_OscConfig+0x176>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d001      	beq.n	8003bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e1c0      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4939      	ldr	r1, [pc, #228]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	e03a      	b.n	8003c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf8:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe f9f3 	bl	8001fe8 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c06:	f7fe f9ef 	bl	8001fe8 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1a1      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c24:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4927      	ldr	r1, [pc, #156]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3a:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe f9d2 	bl	8001fe8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fe f9ce 	bl	8001fe8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e180      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03a      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d019      	beq.n	8003cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b17      	ldr	r3, [pc, #92]	@ (8003cd8 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fe f9b2 	bl	8001fe8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c88:	f7fe f9ae 	bl	8001fe8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e160      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f000 face 	bl	8004248 <RCC_Delay>
 8003cac:	e01c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cae:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb4:	f7fe f998 	bl	8001fe8 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cba:	e00f      	b.n	8003cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7fe f994 	bl	8001fe8 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d908      	bls.n	8003cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e146      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	42420000 	.word	0x42420000
 8003cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	4b92      	ldr	r3, [pc, #584]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e9      	bne.n	8003cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80a6 	beq.w	8003e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b88      	ldr	r3, [pc, #544]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4a87      	ldr	r2, [pc, #540]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	61d3      	str	r3, [r2, #28]
 8003d12:	4b85      	ldr	r3, [pc, #532]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b82      	ldr	r3, [pc, #520]	@ (8003f2c <HAL_RCC_OscConfig+0x4c8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f2c <HAL_RCC_OscConfig+0x4c8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a7e      	ldr	r2, [pc, #504]	@ (8003f2c <HAL_RCC_OscConfig+0x4c8>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe f955 	bl	8001fe8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fe f951 	bl	8001fe8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	@ 0x64
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e103      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b75      	ldr	r3, [pc, #468]	@ (8003f2c <HAL_RCC_OscConfig+0x4c8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x312>
 8003d68:	4b6f      	ldr	r3, [pc, #444]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6213      	str	r3, [r2, #32]
 8003d74:	e02d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x36e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x334>
 8003d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4a69      	ldr	r2, [pc, #420]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6213      	str	r3, [r2, #32]
 8003d8a:	4b67      	ldr	r3, [pc, #412]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	4a66      	ldr	r2, [pc, #408]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	6213      	str	r3, [r2, #32]
 8003d96:	e01c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x36e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b05      	cmp	r3, #5
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCC_OscConfig+0x356>
 8003da0:	4b61      	ldr	r3, [pc, #388]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4a60      	ldr	r2, [pc, #384]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	6213      	str	r3, [r2, #32]
 8003dac:	4b5e      	ldr	r3, [pc, #376]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6213      	str	r3, [r2, #32]
 8003db8:	e00b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x36e>
 8003dba:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	4b58      	ldr	r3, [pc, #352]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	4a57      	ldr	r2, [pc, #348]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d015      	beq.n	8003e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fe f905 	bl	8001fe8 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fe f901 	bl	8001fe8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0b1      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	4b4b      	ldr	r3, [pc, #300]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ee      	beq.n	8003de2 <HAL_RCC_OscConfig+0x37e>
 8003e04:	e014      	b.n	8003e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e06:	f7fe f8ef 	bl	8001fe8 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fe f8eb 	bl	8001fe8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e09b      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e24:	4b40      	ldr	r3, [pc, #256]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ee      	bne.n	8003e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4b3c      	ldr	r3, [pc, #240]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8087 	beq.w	8003f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4c:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 030c 	and.w	r3, r3, #12
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d061      	beq.n	8003f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d146      	bne.n	8003eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e60:	4b33      	ldr	r3, [pc, #204]	@ (8003f30 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe f8bf 	bl	8001fe8 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6e:	f7fe f8bb 	bl	8001fe8 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e06d      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	4b29      	ldr	r3, [pc, #164]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e94:	d108      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e96:	4b24      	ldr	r3, [pc, #144]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4921      	ldr	r1, [pc, #132]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a19      	ldr	r1, [r3, #32]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	491b      	ldr	r1, [pc, #108]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fe f88f 	bl	8001fe8 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ece:	f7fe f88b 	bl	8001fe8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e03d      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee0:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x46a>
 8003eec:	e035      	b.n	8003f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <HAL_RCC_OscConfig+0x4cc>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f878 	bl	8001fe8 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efc:	f7fe f874 	bl	8001fe8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e026      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x498>
 8003f1a:	e01e      	b.n	8003f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e019      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f34:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <HAL_RCC_OscConfig+0x500>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000

08003f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0d0      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d910      	bls.n	8003fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b67      	ldr	r3, [pc, #412]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0207 	bic.w	r2, r3, #7
 8003f92:	4965      	ldr	r1, [pc, #404]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b63      	ldr	r3, [pc, #396]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b8      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc4:	4b59      	ldr	r3, [pc, #356]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fdc:	4b53      	ldr	r3, [pc, #332]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	494d      	ldr	r1, [pc, #308]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d040      	beq.n	8004088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d115      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07f      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b41      	ldr	r3, [pc, #260]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e073      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b3d      	ldr	r3, [pc, #244]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e06b      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b39      	ldr	r3, [pc, #228]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4936      	ldr	r1, [pc, #216]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004058:	f7fd ffc6 	bl	8001fe8 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e00a      	b.n	8004076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7fd ffc2 	bl	8001fe8 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e053      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b2d      	ldr	r3, [pc, #180]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 020c 	and.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1eb      	bne.n	8004060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d210      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 0207 	bic.w	r2, r3, #7
 800409e:	4922      	ldr	r1, [pc, #136]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e032      	b.n	800411e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b19      	ldr	r3, [pc, #100]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4916      	ldr	r1, [pc, #88]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	490e      	ldr	r1, [pc, #56]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040f6:	f000 f821 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	490a      	ldr	r1, [pc, #40]	@ (8004130 <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <HAL_RCC_ClockConfig+0x1cc>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004112:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <HAL_RCC_ClockConfig+0x1d0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd ff24 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40022000 	.word	0x40022000
 800412c:	40021000 	.word	0x40021000
 8004130:	080095d0 	.word	0x080095d0
 8004134:	20000010 	.word	0x20000010
 8004138:	20000014 	.word	0x20000014

0800413c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004156:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x30>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x36>
 800416a:	e027      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800416e:	613b      	str	r3, [r7, #16]
      break;
 8004170:	e027      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800417c:	5cd3      	ldrb	r3, [r2, r3]
 800417e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800418a:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0c5b      	lsrs	r3, r3, #17
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	4a11      	ldr	r2, [pc, #68]	@ (80041dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a0d      	ldr	r2, [pc, #52]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800419e:	fb03 f202 	mul.w	r2, r3, r2
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e004      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0c      	ldr	r2, [pc, #48]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	613b      	str	r3, [r7, #16]
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80041be:	613b      	str	r3, [r7, #16]
      break;
 80041c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c2:	693b      	ldr	r3, [r7, #16]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	007a1200 	.word	0x007a1200
 80041d8:	080095e8 	.word	0x080095e8
 80041dc:	080095f8 	.word	0x080095f8
 80041e0:	003d0900 	.word	0x003d0900

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b02      	ldr	r3, [pc, #8]	@ (80041f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	20000010 	.word	0x20000010

080041f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041fc:	f7ff fff2 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	4903      	ldr	r1, [pc, #12]	@ (800421c <HAL_RCC_GetPCLK1Freq+0x24>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004214:	4618      	mov	r0, r3
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	080095e0 	.word	0x080095e0

08004220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004224:	f7ff ffde 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0adb      	lsrs	r3, r3, #11
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4903      	ldr	r1, [pc, #12]	@ (8004244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	080095e0 	.word	0x080095e0

08004248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004250:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <RCC_Delay+0x34>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <RCC_Delay+0x38>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0a5b      	lsrs	r3, r3, #9
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004264:	bf00      	nop
  }
  while (Delay --);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1e5a      	subs	r2, r3, #1
 800426a:	60fa      	str	r2, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f9      	bne.n	8004264 <RCC_Delay+0x1c>
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	20000010 	.word	0x20000010
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d07d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a4:	4b4f      	ldr	r3, [pc, #316]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10d      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b0:	4b4c      	ldr	r3, [pc, #304]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4a4b      	ldr	r2, [pc, #300]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	61d3      	str	r3, [r2, #28]
 80042bc:	4b49      	ldr	r3, [pc, #292]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042cc:	4b46      	ldr	r3, [pc, #280]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d118      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d8:	4b43      	ldr	r3, [pc, #268]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a42      	ldr	r2, [pc, #264]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e4:	f7fd fe80 	bl	8001fe8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ea:	e008      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ec:	f7fd fe7c 	bl	8001fe8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	@ 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e06d      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b3a      	ldr	r3, [pc, #232]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800430a:	4b36      	ldr	r3, [pc, #216]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d02e      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d027      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004328:	4b2e      	ldr	r3, [pc, #184]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004332:	4b2e      	ldr	r3, [pc, #184]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004338:	4b2c      	ldr	r3, [pc, #176]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800433e:	4a29      	ldr	r2, [pc, #164]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d014      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd fe4b 	bl	8001fe8 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd fe47 	bl	8001fe8 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e036      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004378:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4917      	ldr	r1, [pc, #92]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	4313      	orrs	r3, r2
 8004388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800439a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	490b      	ldr	r1, [pc, #44]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c6:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4904      	ldr	r1, [pc, #16]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42420440 	.word	0x42420440

080043f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e042      	b.n	8004488 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd fbda 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	@ 0x24
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f82b 	bl	8004490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80044ca:	f023 030c 	bic.w	r3, r3, #12
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	@ (80045a4 <UART_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7ff fe92 	bl	8004220 <HAL_RCC_GetPCLK2Freq>
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	e002      	b.n	8004506 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7ff fe7a 	bl	80041f8 <HAL_RCC_GetPCLK1Freq>
 8004504:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	4a22      	ldr	r2, [pc, #136]	@ (80045a8 <UART_SetConfig+0x118>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	0119      	lsls	r1, r3, #4
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <UART_SetConfig+0x118>)
 800453e:	fba3 0302 	umull	r0, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2064      	movs	r0, #100	@ 0x64
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	3332      	adds	r3, #50	@ 0x32
 8004550:	4a15      	ldr	r2, [pc, #84]	@ (80045a8 <UART_SetConfig+0x118>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800455c:	4419      	add	r1, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009a      	lsls	r2, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fbb2 f2f3 	udiv	r2, r2, r3
 8004574:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <UART_SetConfig+0x118>)
 8004576:	fba3 0302 	umull	r0, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2064      	movs	r0, #100	@ 0x64
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	@ 0x32
 8004588:	4a07      	ldr	r2, [pc, #28]	@ (80045a8 <UART_SetConfig+0x118>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	440a      	add	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40013800 	.word	0x40013800
 80045a8:	51eb851f 	.word	0x51eb851f

080045ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045be:	2b84      	cmp	r3, #132	@ 0x84
 80045c0:	d005      	beq.n	80045ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	3303      	adds	r3, #3
 80045cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045de:	f000 ff4f 	bl	8005480 <vTaskStartScheduler>
  
  return osOK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <osThreadCreate+0x54>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01c      	beq.n	800463c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685c      	ldr	r4, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691e      	ldr	r6, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ffc9 	bl	80045ac <makeFreeRtosPriority>
 800461a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004624:	9202      	str	r2, [sp, #8]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	9100      	str	r1, [sp, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	4632      	mov	r2, r6
 800462e:	4629      	mov	r1, r5
 8004630:	4620      	mov	r0, r4
 8004632:	f000 fd49 	bl	80050c8 <xTaskCreateStatic>
 8004636:	4603      	mov	r3, r0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e01c      	b.n	8004676 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685c      	ldr	r4, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004648:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ffab 	bl	80045ac <makeFreeRtosPriority>
 8004656:	4602      	mov	r2, r0
 8004658:	f107 030c 	add.w	r3, r7, #12
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	9200      	str	r2, [sp, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4632      	mov	r2, r6
 8004664:	4629      	mov	r1, r5
 8004666:	4620      	mov	r0, r4
 8004668:	f000 fd8d 	bl	8005186 <xTaskCreate>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004676:	68fb      	ldr	r3, [r7, #12]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004680 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <osDelay+0x16>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	e000      	b.n	8004698 <osDelay+0x18>
 8004696:	2301      	movs	r3, #1
 8004698:	4618      	mov	r0, r3
 800469a:	f000 febb 	bl	8005414 <vTaskDelay>
  
  return osOK;
 800469e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d011      	beq.n	80046de <osMessageCreate+0x36>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00d      	beq.n	80046de <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2400      	movs	r4, #0
 80046d4:	9400      	str	r4, [sp, #0]
 80046d6:	f000 f929 	bl	800492c <xQueueGenericCreateStatic>
 80046da:	4603      	mov	r3, r0
 80046dc:	e008      	b.n	80046f0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	4619      	mov	r1, r3
 80046ea:	f000 f99b 	bl	8004a24 <xQueueGenericCreate>
 80046ee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}

080046f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 0208 	add.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f04f 32ff 	mov.w	r2, #4294967295
 8004710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0208 	add.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f103 0208 	add.w	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d103      	bne.n	80047b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	e00c      	b.n	80047ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3308      	adds	r3, #8
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e002      	b.n	80047c2 <vListInsert+0x2e>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d2f6      	bcs.n	80047bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	601a      	str	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6892      	ldr	r2, [r2, #8]
 800481a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d103      	bne.n	8004838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1e5a      	subs	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
	...

08004858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004884:	f001 fc22 	bl	80060cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	3b01      	subs	r3, #1
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	22ff      	movs	r2, #255	@ 0xff
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	22ff      	movs	r2, #255	@ 0xff
 80048d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d114      	bne.n	8004904 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01a      	beq.n	8004918 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3310      	adds	r3, #16
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f826 	bl	8005938 <xTaskRemoveFromEventList>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <xQueueGenericReset+0xd0>)
 80048f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	e009      	b.n	8004918 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3310      	adds	r3, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fef5 	bl	80046f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3324      	adds	r3, #36	@ 0x24
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fef0 	bl	80046f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004918:	f001 fc08 	bl	800612c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800491c:	2301      	movs	r3, #1
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	@ 0x38
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10b      	bne.n	8004976 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <xQueueGenericCreateStatic+0x56>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <xQueueGenericCreateStatic+0x5a>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueGenericCreateStatic+0x5c>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	623b      	str	r3, [r7, #32]
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	e7fd      	b.n	80049a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <xQueueGenericCreateStatic+0x84>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <xQueueGenericCreateStatic+0x88>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <xQueueGenericCreateStatic+0x8a>
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	61fb      	str	r3, [r7, #28]
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049d2:	2348      	movs	r3, #72	@ 0x48
 80049d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b48      	cmp	r3, #72	@ 0x48
 80049da:	d00b      	beq.n	80049f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	61bb      	str	r3, [r7, #24]
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a06:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f844 	bl	8004aa2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3730      	adds	r7, #48	@ 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	613b      	str	r3, [r7, #16]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e004      	b.n	8004a66 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	3348      	adds	r3, #72	@ 0x48
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fbf0 	bl	8006250 <pvPortMalloc>
 8004a70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00f      	beq.n	8004a98 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	3348      	adds	r3, #72	@ 0x48
 8004a7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a86:	79fa      	ldrb	r2, [r7, #7]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f805 	bl	8004aa2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a98:	69bb      	ldr	r3, [r7, #24]
	}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e002      	b.n	8004ac4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	69b8      	ldr	r0, [r7, #24]
 8004ad4:	f7ff fec0 	bl	8004858 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08e      	sub	sp, #56	@ 0x38
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aee:	2300      	movs	r3, #0
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <xQueueGenericSend+0x34>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <xQueueGenericSend+0x42>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <xQueueGenericSend+0x46>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <xQueueGenericSend+0x48>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <xQueueGenericSend+0x64>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d103      	bne.n	8004b52 <xQueueGenericSend+0x72>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <xQueueGenericSend+0x76>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xQueueGenericSend+0x78>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <xQueueGenericSend+0x94>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	623b      	str	r3, [r7, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b74:	f001 f8aa 	bl	8005ccc <xTaskGetSchedulerState>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <xQueueGenericSend+0xa4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <xQueueGenericSend+0xa8>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <xQueueGenericSend+0xaa>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	61fb      	str	r3, [r7, #28]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ba6:	f001 fa91 	bl	80060cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <xQueueGenericSend+0xdc>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d129      	bne.n	8004c10 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bc2:	f000 f971 	bl	8004ea8 <prvCopyDataToQueue>
 8004bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	3324      	adds	r3, #36	@ 0x24
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 feaf 	bl	8005938 <xTaskRemoveFromEventList>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ce0 <xQueueGenericSend+0x200>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	e00a      	b.n	8004c08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bf8:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <xQueueGenericSend+0x200>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c08:	f001 fa90 	bl	800612c <vPortExitCritical>
				return pdPASS;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e063      	b.n	8004cd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c16:	f001 fa89 	bl	800612c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e05c      	b.n	8004cd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fee9 	bl	8005a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c32:	f001 fa7b 	bl	800612c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c36:	f000 fc8d 	bl	8005554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c3a:	f001 fa47 	bl	80060cc <vPortEnterCritical>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d103      	bne.n	8004c54 <xQueueGenericSend+0x174>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d103      	bne.n	8004c6a <xQueueGenericSend+0x18a>
 8004c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c6a:	f001 fa5f 	bl	800612c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c6e:	1d3a      	adds	r2, r7, #4
 8004c70:	f107 0314 	add.w	r3, r7, #20
 8004c74:	4611      	mov	r1, r2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fed8 	bl	8005a2c <xTaskCheckForTimeOut>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d124      	bne.n	8004ccc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c84:	f000 fa08 	bl	8005098 <prvIsQueueFull>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d018      	beq.n	8004cc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	3310      	adds	r3, #16
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fe28 	bl	80058ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c9e:	f000 f993 	bl	8004fc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ca2:	f000 fc65 	bl	8005570 <xTaskResumeAll>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f47f af7c 	bne.w	8004ba6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004cae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <xQueueGenericSend+0x200>)
 8004cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	e772      	b.n	8004ba6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cc2:	f000 f981 	bl	8004fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cc6:	f000 fc53 	bl	8005570 <xTaskResumeAll>
 8004cca:	e76c      	b.n	8004ba6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cce:	f000 f97b 	bl	8004fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cd2:	f000 fc4d 	bl	8005570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cd6:	2300      	movs	r3, #0
		}
	}
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3738      	adds	r7, #56	@ 0x38
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	@ 0x30
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <xQueueReceive+0x32>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	623b      	str	r3, [r7, #32]
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <xQueueReceive+0x40>
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <xQueueReceive+0x44>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <xQueueReceive+0x46>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <xQueueReceive+0x62>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	61fb      	str	r3, [r7, #28]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d46:	f000 ffc1 	bl	8005ccc <xTaskGetSchedulerState>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <xQueueReceive+0x72>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueReceive+0x76>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueReceive+0x78>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <xQueueReceive+0x94>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	61bb      	str	r3, [r7, #24]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d78:	f001 f9a8 	bl	80060cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01f      	beq.n	8004dc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d8c:	f000 f8f6 	bl	8004f7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	1e5a      	subs	r2, r3, #1
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00f      	beq.n	8004dc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	3310      	adds	r3, #16
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fdc7 	bl	8005938 <xTaskRemoveFromEventList>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004db0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea4 <xQueueReceive+0x1c0>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dc0:	f001 f9b4 	bl	800612c <vPortExitCritical>
				return pdPASS;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e069      	b.n	8004e9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dce:	f001 f9ad 	bl	800612c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e062      	b.n	8004e9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fe0d 	bl	8005a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dea:	f001 f99f 	bl	800612c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dee:	f000 fbb1 	bl	8005554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df2:	f001 f96b 	bl	80060cc <vPortEnterCritical>
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dfc:	b25b      	sxtb	r3, r3
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d103      	bne.n	8004e0c <xQueueReceive+0x128>
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d103      	bne.n	8004e22 <xQueueReceive+0x13e>
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e22:	f001 f983 	bl	800612c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e26:	1d3a      	adds	r2, r7, #4
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fdfc 	bl	8005a2c <xTaskCheckForTimeOut>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d123      	bne.n	8004e82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e3c:	f000 f916 	bl	800506c <prvIsQueueEmpty>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d017      	beq.n	8004e76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	3324      	adds	r3, #36	@ 0x24
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fd4c 	bl	80058ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e56:	f000 f8b7 	bl	8004fc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e5a:	f000 fb89 	bl	8005570 <xTaskResumeAll>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d189      	bne.n	8004d78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004e64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <xQueueReceive+0x1c0>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	e780      	b.n	8004d78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e78:	f000 f8a6 	bl	8004fc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e7c:	f000 fb78 	bl	8005570 <xTaskResumeAll>
 8004e80:	e77a      	b.n	8004d78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e84:	f000 f8a0 	bl	8004fc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e88:	f000 fb72 	bl	8005570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e8e:	f000 f8ed 	bl	800506c <prvIsQueueEmpty>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f43f af6f 	beq.w	8004d78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3730      	adds	r7, #48	@ 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10d      	bne.n	8004ee2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d14d      	bne.n	8004f6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 ff18 	bl	8005d08 <xTaskPriorityDisinherit>
 8004ed8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	e043      	b.n	8004f6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d119      	bne.n	8004f1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6898      	ldr	r0, [r3, #8]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	f001 fd85 	bl	8006a02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d32b      	bcc.n	8004f6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	e026      	b.n	8004f6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68d8      	ldr	r0, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f24:	461a      	mov	r2, r3
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	f001 fd6b 	bl	8006a02 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	425b      	negs	r3, r3
 8004f36:	441a      	add	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d207      	bcs.n	8004f58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	425b      	negs	r3, r3
 8004f52:	441a      	add	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d105      	bne.n	8004f6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f72:	697b      	ldr	r3, [r7, #20]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d303      	bcc.n	8004fb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68d9      	ldr	r1, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6838      	ldr	r0, [r7, #0]
 8004fbc:	f001 fd21 	bl	8006a02 <memcpy>
	}
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fd0:	f001 f87c 	bl	80060cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fdc:	e011      	b.n	8005002 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d012      	beq.n	800500c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3324      	adds	r3, #36	@ 0x24
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fca4 	bl	8005938 <xTaskRemoveFromEventList>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ff6:	f000 fd7d 	bl	8005af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	dce9      	bgt.n	8004fde <prvUnlockQueue+0x16>
 800500a:	e000      	b.n	800500e <prvUnlockQueue+0x46>
					break;
 800500c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	22ff      	movs	r2, #255	@ 0xff
 8005012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005016:	f001 f889 	bl	800612c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800501a:	f001 f857 	bl	80060cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005024:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005026:	e011      	b.n	800504c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3310      	adds	r3, #16
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fc7f 	bl	8005938 <xTaskRemoveFromEventList>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005040:	f000 fd58 	bl	8005af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	3b01      	subs	r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800504c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005050:	2b00      	cmp	r3, #0
 8005052:	dce9      	bgt.n	8005028 <prvUnlockQueue+0x60>
 8005054:	e000      	b.n	8005058 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005056:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	22ff      	movs	r2, #255	@ 0xff
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005060:	f001 f864 	bl	800612c <vPortExitCritical>
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005074:	f001 f82a 	bl	80060cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e001      	b.n	800508a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800508a:	f001 f84f 	bl	800612c <vPortExitCritical>

	return xReturn;
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050a0:	f001 f814 	bl	80060cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d102      	bne.n	80050b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050b0:	2301      	movs	r3, #1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e001      	b.n	80050ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ba:	f001 f837 	bl	800612c <vPortExitCritical>

	return xReturn;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08e      	sub	sp, #56	@ 0x38
 80050cc:	af04      	add	r7, sp, #16
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	623b      	str	r3, [r7, #32]
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10b      	bne.n	8005112 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	61fb      	str	r3, [r7, #28]
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	e7fd      	b.n	800510e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005112:	23a0      	movs	r3, #160	@ 0xa0
 8005114:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2ba0      	cmp	r3, #160	@ 0xa0
 800511a:	d00b      	beq.n	8005134 <xTaskCreateStatic+0x6c>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	61bb      	str	r3, [r7, #24]
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01e      	beq.n	8005178 <xTaskCreateStatic+0xb0>
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	2202      	movs	r2, #2
 800514e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005152:	2300      	movs	r3, #0
 8005154:	9303      	str	r3, [sp, #12]
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	9302      	str	r3, [sp, #8]
 800515a:	f107 0314 	add.w	r3, r7, #20
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f850 	bl	8005210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005172:	f000 f8e5 	bl	8005340 <prvAddNewTaskToReadyList>
 8005176:	e001      	b.n	800517c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800517c:	697b      	ldr	r3, [r7, #20]
	}
 800517e:	4618      	mov	r0, r3
 8005180:	3728      	adds	r7, #40	@ 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005186:	b580      	push	{r7, lr}
 8005188:	b08c      	sub	sp, #48	@ 0x30
 800518a:	af04      	add	r7, sp, #16
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f858 	bl	8006250 <pvPortMalloc>
 80051a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00e      	beq.n	80051c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051a8:	20a0      	movs	r0, #160	@ 0xa0
 80051aa:	f001 f851 	bl	8006250 <pvPortMalloc>
 80051ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80051bc:	e005      	b.n	80051ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051be:	6978      	ldr	r0, [r7, #20]
 80051c0:	f001 f90e 	bl	80063e0 <vPortFree>
 80051c4:	e001      	b.n	80051ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d017      	beq.n	8005200 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	2300      	movs	r3, #0
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	9302      	str	r3, [sp, #8]
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f80e 	bl	8005210 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051f4:	69f8      	ldr	r0, [r7, #28]
 80051f6:	f000 f8a3 	bl	8005340 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051fa:	2301      	movs	r3, #1
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e002      	b.n	8005206 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005200:	f04f 33ff 	mov.w	r3, #4294967295
 8005204:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005206:	69bb      	ldr	r3, [r7, #24]
	}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005228:	3b01      	subs	r3, #1
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f023 0307 	bic.w	r3, r3, #7
 8005236:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	617b      	str	r3, [r7, #20]
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	e7fd      	b.n	8005256 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e012      	b.n	8005286 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	7819      	ldrb	r1, [r3, #0]
 8005268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	3334      	adds	r3, #52	@ 0x34
 8005270:	460a      	mov	r2, r1
 8005272:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	3301      	adds	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b0f      	cmp	r3, #15
 800528a:	d9e9      	bls.n	8005260 <prvInitialiseNewTask+0x50>
 800528c:	e000      	b.n	8005290 <prvInitialiseNewTask+0x80>
		{
			break;
 800528e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	2b06      	cmp	r3, #6
 800529c:	d901      	bls.n	80052a2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800529e:	2306      	movs	r3, #6
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2200      	movs	r2, #0
 80052b2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	3304      	adds	r3, #4
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fa3c 	bl	8004736 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	3318      	adds	r3, #24
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fa37 	bl	8004736 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d0:	f1c3 0207 	rsb	r2, r3, #7
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	334c      	adds	r3, #76	@ 0x4c
 80052f2:	224c      	movs	r2, #76	@ 0x4c
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f001 fab1 	bl	800685e <memset>
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005334 <prvInitialiseNewTask+0x124>)
 8005300:	651a      	str	r2, [r3, #80]	@ 0x50
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	4a0c      	ldr	r2, [pc, #48]	@ (8005338 <prvInitialiseNewTask+0x128>)
 8005306:	655a      	str	r2, [r3, #84]	@ 0x54
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	4a0c      	ldr	r2, [pc, #48]	@ (800533c <prvInitialiseNewTask+0x12c>)
 800530c:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	68f9      	ldr	r1, [r7, #12]
 8005312:	69b8      	ldr	r0, [r7, #24]
 8005314:	f000 fde6 	bl	8005ee4 <pxPortInitialiseStack>
 8005318:	4602      	mov	r2, r0
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800532a:	bf00      	nop
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20001634 	.word	0x20001634
 8005338:	2000169c 	.word	0x2000169c
 800533c:	20001704 	.word	0x20001704

08005340 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005348:	f000 fec0 	bl	80060cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800534c:	4b2a      	ldr	r3, [pc, #168]	@ (80053f8 <prvAddNewTaskToReadyList+0xb8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a29      	ldr	r2, [pc, #164]	@ (80053f8 <prvAddNewTaskToReadyList+0xb8>)
 8005354:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005356:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <prvAddNewTaskToReadyList+0xbc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800535e:	4a27      	ldr	r2, [pc, #156]	@ (80053fc <prvAddNewTaskToReadyList+0xbc>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005364:	4b24      	ldr	r3, [pc, #144]	@ (80053f8 <prvAddNewTaskToReadyList+0xb8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d110      	bne.n	800538e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800536c:	f000 fbe6 	bl	8005b3c <prvInitialiseTaskLists>
 8005370:	e00d      	b.n	800538e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005372:	4b23      	ldr	r3, [pc, #140]	@ (8005400 <prvAddNewTaskToReadyList+0xc0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <prvAddNewTaskToReadyList+0xbc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	429a      	cmp	r2, r3
 8005386:	d802      	bhi.n	800538e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005388:	4a1c      	ldr	r2, [pc, #112]	@ (80053fc <prvAddNewTaskToReadyList+0xbc>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800538e:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <prvAddNewTaskToReadyList+0xc4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	4a1b      	ldr	r2, [pc, #108]	@ (8005404 <prvAddNewTaskToReadyList+0xc4>)
 8005396:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	2201      	movs	r2, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <prvAddNewTaskToReadyList+0xc8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	4a18      	ldr	r2, [pc, #96]	@ (8005408 <prvAddNewTaskToReadyList+0xc8>)
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4a15      	ldr	r2, [pc, #84]	@ (800540c <prvAddNewTaskToReadyList+0xcc>)
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7ff f9c4 	bl	800474e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053c6:	f000 feb1 	bl	800612c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <prvAddNewTaskToReadyList+0xc0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <prvAddNewTaskToReadyList+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	429a      	cmp	r2, r3
 80053de:	d207      	bcs.n	80053f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <prvAddNewTaskToReadyList+0xd0>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200009e8 	.word	0x200009e8
 80053fc:	200008e8 	.word	0x200008e8
 8005400:	200009f4 	.word	0x200009f4
 8005404:	20000a04 	.word	0x20000a04
 8005408:	200009f0 	.word	0x200009f0
 800540c:	200008ec 	.word	0x200008ec
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d018      	beq.n	8005458 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005426:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <vTaskDelay+0x64>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <vTaskDelay+0x32>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005446:	f000 f885 	bl	8005554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800544a:	2100      	movs	r1, #0
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fce3 	bl	8005e18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005452:	f000 f88d 	bl	8005570 <xTaskResumeAll>
 8005456:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800545e:	4b07      	ldr	r3, [pc, #28]	@ (800547c <vTaskDelay+0x68>)
 8005460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000a10 	.word	0x20000a10
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	@ 0x28
 8005484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800548e:	463a      	mov	r2, r7
 8005490:	1d39      	adds	r1, r7, #4
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	4618      	mov	r0, r3
 8005498:	f7fb fc78 	bl	8000d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	9202      	str	r2, [sp, #8]
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2300      	movs	r3, #0
 80054ac:	460a      	mov	r2, r1
 80054ae:	4921      	ldr	r1, [pc, #132]	@ (8005534 <vTaskStartScheduler+0xb4>)
 80054b0:	4821      	ldr	r0, [pc, #132]	@ (8005538 <vTaskStartScheduler+0xb8>)
 80054b2:	f7ff fe09 	bl	80050c8 <xTaskCreateStatic>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a20      	ldr	r2, [pc, #128]	@ (800553c <vTaskStartScheduler+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <vTaskStartScheduler+0xbc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054c4:	2301      	movs	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e001      	b.n	80054ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d11b      	bne.n	800550c <vTaskStartScheduler+0x8c>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	613b      	str	r3, [r7, #16]
}
 80054e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054e8:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <vTaskStartScheduler+0xc0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	334c      	adds	r3, #76	@ 0x4c
 80054ee:	4a15      	ldr	r2, [pc, #84]	@ (8005544 <vTaskStartScheduler+0xc4>)
 80054f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054f2:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <vTaskStartScheduler+0xc8>)
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295
 80054f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054fa:	4b14      	ldr	r3, [pc, #80]	@ (800554c <vTaskStartScheduler+0xcc>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005500:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <vTaskStartScheduler+0xd0>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005506:	f000 fd6f 	bl	8005fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800550a:	e00f      	b.n	800552c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d10b      	bne.n	800552c <vTaskStartScheduler+0xac>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <vTaskStartScheduler+0xa8>
}
 800552c:	bf00      	nop
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	08008e5c 	.word	0x08008e5c
 8005538:	08005b0d 	.word	0x08005b0d
 800553c:	20000a0c 	.word	0x20000a0c
 8005540:	200008e8 	.word	0x200008e8
 8005544:	2000002c 	.word	0x2000002c
 8005548:	20000a08 	.word	0x20000a08
 800554c:	200009f4 	.word	0x200009f4
 8005550:	200009ec 	.word	0x200009ec

08005554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <vTaskSuspendAll+0x18>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	4a03      	ldr	r2, [pc, #12]	@ (800556c <vTaskSuspendAll+0x18>)
 8005560:	6013      	str	r3, [r2, #0]
}
 8005562:	bf00      	nop
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000a10 	.word	0x20000a10

08005570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800557e:	4b42      	ldr	r3, [pc, #264]	@ (8005688 <xTaskResumeAll+0x118>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xTaskResumeAll+0x2e>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	603b      	str	r3, [r7, #0]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800559e:	f000 fd95 	bl	80060cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <xTaskResumeAll+0x118>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a37      	ldr	r2, [pc, #220]	@ (8005688 <xTaskResumeAll+0x118>)
 80055aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ac:	4b36      	ldr	r3, [pc, #216]	@ (8005688 <xTaskResumeAll+0x118>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d161      	bne.n	8005678 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055b4:	4b35      	ldr	r3, [pc, #212]	@ (800568c <xTaskResumeAll+0x11c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d05d      	beq.n	8005678 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055bc:	e02e      	b.n	800561c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055be:	4b34      	ldr	r3, [pc, #208]	@ (8005690 <xTaskResumeAll+0x120>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3318      	adds	r3, #24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff f91a 	bl	8004804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f915 	bl	8004804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	2201      	movs	r2, #1
 80055e0:	409a      	lsls	r2, r3
 80055e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005694 <xTaskResumeAll+0x124>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005694 <xTaskResumeAll+0x124>)
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a27      	ldr	r2, [pc, #156]	@ (8005698 <xTaskResumeAll+0x128>)
 80055fa:	441a      	add	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7ff f8a3 	bl	800474e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560c:	4b23      	ldr	r3, [pc, #140]	@ (800569c <xTaskResumeAll+0x12c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	429a      	cmp	r2, r3
 8005614:	d302      	bcc.n	800561c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005616:	4b22      	ldr	r3, [pc, #136]	@ (80056a0 <xTaskResumeAll+0x130>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800561c:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <xTaskResumeAll+0x120>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1cc      	bne.n	80055be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800562a:	f000 fb2b 	bl	8005c84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800562e:	4b1d      	ldr	r3, [pc, #116]	@ (80056a4 <xTaskResumeAll+0x134>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800563a:	f000 f837 	bl	80056ac <xTaskIncrementTick>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005644:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <xTaskResumeAll+0x130>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3b01      	subs	r3, #1
 800564e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f1      	bne.n	800563a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005656:	4b13      	ldr	r3, [pc, #76]	@ (80056a4 <xTaskResumeAll+0x134>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800565c:	4b10      	ldr	r3, [pc, #64]	@ (80056a0 <xTaskResumeAll+0x130>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005668:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <xTaskResumeAll+0x138>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005678:	f000 fd58 	bl	800612c <vPortExitCritical>

	return xAlreadyYielded;
 800567c:	68bb      	ldr	r3, [r7, #8]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000a10 	.word	0x20000a10
 800568c:	200009e8 	.word	0x200009e8
 8005690:	200009a8 	.word	0x200009a8
 8005694:	200009f0 	.word	0x200009f0
 8005698:	200008ec 	.word	0x200008ec
 800569c:	200008e8 	.word	0x200008e8
 80056a0:	200009fc 	.word	0x200009fc
 80056a4:	200009f8 	.word	0x200009f8
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b6:	4b51      	ldr	r3, [pc, #324]	@ (80057fc <xTaskIncrementTick+0x150>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 808e 	bne.w	80057dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005800 <xTaskIncrementTick+0x154>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005800 <xTaskIncrementTick+0x154>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d121      	bne.n	8005718 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005804 <xTaskIncrementTick+0x158>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	603b      	str	r3, [r7, #0]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <xTaskIncrementTick+0x46>
 80056f6:	4b43      	ldr	r3, [pc, #268]	@ (8005804 <xTaskIncrementTick+0x158>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	4b42      	ldr	r3, [pc, #264]	@ (8005808 <xTaskIncrementTick+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a40      	ldr	r2, [pc, #256]	@ (8005804 <xTaskIncrementTick+0x158>)
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4a40      	ldr	r2, [pc, #256]	@ (8005808 <xTaskIncrementTick+0x15c>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4b40      	ldr	r3, [pc, #256]	@ (800580c <xTaskIncrementTick+0x160>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	4a3e      	ldr	r2, [pc, #248]	@ (800580c <xTaskIncrementTick+0x160>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	f000 fab6 	bl	8005c84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005718:	4b3d      	ldr	r3, [pc, #244]	@ (8005810 <xTaskIncrementTick+0x164>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	429a      	cmp	r2, r3
 8005720:	d34d      	bcc.n	80057be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005722:	4b38      	ldr	r3, [pc, #224]	@ (8005804 <xTaskIncrementTick+0x158>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <xTaskIncrementTick+0x84>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <xTaskIncrementTick+0x86>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d004      	beq.n	8005740 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005736:	4b36      	ldr	r3, [pc, #216]	@ (8005810 <xTaskIncrementTick+0x164>)
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	601a      	str	r2, [r3, #0]
					break;
 800573e:	e03e      	b.n	80057be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005740:	4b30      	ldr	r3, [pc, #192]	@ (8005804 <xTaskIncrementTick+0x158>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d203      	bcs.n	8005760 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005758:	4a2d      	ldr	r2, [pc, #180]	@ (8005810 <xTaskIncrementTick+0x164>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6013      	str	r3, [r2, #0]
						break;
 800575e:	e02e      	b.n	80057be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff f84d 	bl	8004804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	3318      	adds	r3, #24
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff f844 	bl	8004804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	2201      	movs	r2, #1
 8005782:	409a      	lsls	r2, r3
 8005784:	4b23      	ldr	r3, [pc, #140]	@ (8005814 <xTaskIncrementTick+0x168>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4313      	orrs	r3, r2
 800578a:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <xTaskIncrementTick+0x168>)
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <xTaskIncrementTick+0x16c>)
 800579c:	441a      	add	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	3304      	adds	r3, #4
 80057a2:	4619      	mov	r1, r3
 80057a4:	4610      	mov	r0, r2
 80057a6:	f7fe ffd2 	bl	800474e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <xTaskIncrementTick+0x170>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d3b4      	bcc.n	8005722 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057bc:	e7b1      	b.n	8005722 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057be:	4b17      	ldr	r3, [pc, #92]	@ (800581c <xTaskIncrementTick+0x170>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4914      	ldr	r1, [pc, #80]	@ (8005818 <xTaskIncrementTick+0x16c>)
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d907      	bls.n	80057e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80057d6:	2301      	movs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e004      	b.n	80057e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057dc:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <xTaskIncrementTick+0x174>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	4a0f      	ldr	r2, [pc, #60]	@ (8005820 <xTaskIncrementTick+0x174>)
 80057e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <xTaskIncrementTick+0x178>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057f2:	697b      	ldr	r3, [r7, #20]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000a10 	.word	0x20000a10
 8005800:	200009ec 	.word	0x200009ec
 8005804:	200009a0 	.word	0x200009a0
 8005808:	200009a4 	.word	0x200009a4
 800580c:	20000a00 	.word	0x20000a00
 8005810:	20000a08 	.word	0x20000a08
 8005814:	200009f0 	.word	0x200009f0
 8005818:	200008ec 	.word	0x200008ec
 800581c:	200008e8 	.word	0x200008e8
 8005820:	200009f8 	.word	0x200009f8
 8005824:	200009fc 	.word	0x200009fc

08005828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800582e:	4b29      	ldr	r3, [pc, #164]	@ (80058d4 <vTaskSwitchContext+0xac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005836:	4b28      	ldr	r3, [pc, #160]	@ (80058d8 <vTaskSwitchContext+0xb0>)
 8005838:	2201      	movs	r2, #1
 800583a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800583c:	e045      	b.n	80058ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800583e:	4b26      	ldr	r3, [pc, #152]	@ (80058d8 <vTaskSwitchContext+0xb0>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005844:	4b25      	ldr	r3, [pc, #148]	@ (80058dc <vTaskSwitchContext+0xb4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	f1c3 031f 	rsb	r3, r3, #31
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	4921      	ldr	r1, [pc, #132]	@ (80058e0 <vTaskSwitchContext+0xb8>)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <vTaskSwitchContext+0x5e>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	607b      	str	r3, [r7, #4]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <vTaskSwitchContext+0x5a>
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <vTaskSwitchContext+0xb8>)
 8005892:	4413      	add	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3308      	adds	r3, #8
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d104      	bne.n	80058b6 <vTaskSwitchContext+0x8e>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a09      	ldr	r2, [pc, #36]	@ (80058e4 <vTaskSwitchContext+0xbc>)
 80058be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c0:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <vTaskSwitchContext+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	334c      	adds	r3, #76	@ 0x4c
 80058c6:	4a08      	ldr	r2, [pc, #32]	@ (80058e8 <vTaskSwitchContext+0xc0>)
 80058c8:	6013      	str	r3, [r2, #0]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	20000a10 	.word	0x20000a10
 80058d8:	200009fc 	.word	0x200009fc
 80058dc:	200009f0 	.word	0x200009f0
 80058e0:	200008ec 	.word	0x200008ec
 80058e4:	200008e8 	.word	0x200008e8
 80058e8:	2000002c 	.word	0x2000002c

080058ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	e7fd      	b.n	8005910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005914:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <vTaskPlaceOnEventList+0x48>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3318      	adds	r3, #24
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fe ff39 	bl	8004794 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005922:	2101      	movs	r1, #1
 8005924:	6838      	ldr	r0, [r7, #0]
 8005926:	f000 fa77 	bl	8005e18 <prvAddCurrentTaskToDelayedList>
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	200008e8 	.word	0x200008e8

08005938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	60fb      	str	r3, [r7, #12]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3318      	adds	r3, #24
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe ff4a 	bl	8004804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <xTaskRemoveFromEventList+0xb0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11c      	bne.n	80059b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3304      	adds	r3, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe ff41 	bl	8004804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	2201      	movs	r2, #1
 8005988:	409a      	lsls	r2, r3
 800598a:	4b18      	ldr	r3, [pc, #96]	@ (80059ec <xTaskRemoveFromEventList+0xb4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4313      	orrs	r3, r2
 8005990:	4a16      	ldr	r2, [pc, #88]	@ (80059ec <xTaskRemoveFromEventList+0xb4>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <xTaskRemoveFromEventList+0xb8>)
 80059a2:	441a      	add	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fe fecf 	bl	800474e <vListInsertEnd>
 80059b0:	e005      	b.n	80059be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3318      	adds	r3, #24
 80059b6:	4619      	mov	r1, r3
 80059b8:	480e      	ldr	r0, [pc, #56]	@ (80059f4 <xTaskRemoveFromEventList+0xbc>)
 80059ba:	f7fe fec8 	bl	800474e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	4b0d      	ldr	r3, [pc, #52]	@ (80059f8 <xTaskRemoveFromEventList+0xc0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d905      	bls.n	80059d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059cc:	2301      	movs	r3, #1
 80059ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	@ (80059fc <xTaskRemoveFromEventList+0xc4>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e001      	b.n	80059dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059dc:	697b      	ldr	r3, [r7, #20]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000a10 	.word	0x20000a10
 80059ec:	200009f0 	.word	0x200009f0
 80059f0:	200008ec 	.word	0x200008ec
 80059f4:	200009a8 	.word	0x200009a8
 80059f8:	200008e8 	.word	0x200008e8
 80059fc:	200009fc 	.word	0x200009fc

08005a00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <vTaskInternalSetTimeOutState+0x24>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a10:	4b05      	ldr	r3, [pc, #20]	@ (8005a28 <vTaskInternalSetTimeOutState+0x28>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	605a      	str	r2, [r3, #4]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000a00 	.word	0x20000a00
 8005a28:	200009ec 	.word	0x200009ec

08005a2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	613b      	str	r3, [r7, #16]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60fb      	str	r3, [r7, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a72:	f000 fb2b 	bl	80060cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a76:	4b1d      	ldr	r3, [pc, #116]	@ (8005aec <xTaskCheckForTimeOut+0xc0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d102      	bne.n	8005a96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e023      	b.n	8005ade <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b15      	ldr	r3, [pc, #84]	@ (8005af0 <xTaskCheckForTimeOut+0xc4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d007      	beq.n	8005ab2 <xTaskCheckForTimeOut+0x86>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e015      	b.n	8005ade <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d20b      	bcs.n	8005ad4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff99 	bl	8005a00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e004      	b.n	8005ade <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ade:	f000 fb25 	bl	800612c <vPortExitCritical>

	return xReturn;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	200009ec 	.word	0x200009ec
 8005af0:	20000a00 	.word	0x20000a00

08005af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005af8:	4b03      	ldr	r3, [pc, #12]	@ (8005b08 <vTaskMissedYield+0x14>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	200009fc 	.word	0x200009fc

08005b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b14:	f000 f852 	bl	8005bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <prvIdleTask+0x28>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d9f9      	bls.n	8005b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b20:	4b05      	ldr	r3, [pc, #20]	@ (8005b38 <prvIdleTask+0x2c>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b30:	e7f0      	b.n	8005b14 <prvIdleTask+0x8>
 8005b32:	bf00      	nop
 8005b34:	200008ec 	.word	0x200008ec
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e00c      	b.n	8005b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a12      	ldr	r2, [pc, #72]	@ (8005b9c <prvInitialiseTaskLists+0x60>)
 8005b54:	4413      	add	r3, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fdce 	bl	80046f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d9ef      	bls.n	8005b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b68:	480d      	ldr	r0, [pc, #52]	@ (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b6a:	f7fe fdc5 	bl	80046f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b6e:	480d      	ldr	r0, [pc, #52]	@ (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b70:	f7fe fdc2 	bl	80046f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b74:	480c      	ldr	r0, [pc, #48]	@ (8005ba8 <prvInitialiseTaskLists+0x6c>)
 8005b76:	f7fe fdbf 	bl	80046f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b7a:	480c      	ldr	r0, [pc, #48]	@ (8005bac <prvInitialiseTaskLists+0x70>)
 8005b7c:	f7fe fdbc 	bl	80046f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b80:	480b      	ldr	r0, [pc, #44]	@ (8005bb0 <prvInitialiseTaskLists+0x74>)
 8005b82:	f7fe fdb9 	bl	80046f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <prvInitialiseTaskLists+0x78>)
 8005b88:	4a05      	ldr	r2, [pc, #20]	@ (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <prvInitialiseTaskLists+0x7c>)
 8005b8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	200008ec 	.word	0x200008ec
 8005ba0:	20000978 	.word	0x20000978
 8005ba4:	2000098c 	.word	0x2000098c
 8005ba8:	200009a8 	.word	0x200009a8
 8005bac:	200009bc 	.word	0x200009bc
 8005bb0:	200009d4 	.word	0x200009d4
 8005bb4:	200009a0 	.word	0x200009a0
 8005bb8:	200009a4 	.word	0x200009a4

08005bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc2:	e019      	b.n	8005bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bc4:	f000 fa82 	bl	80060cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005bc8:	4b10      	ldr	r3, [pc, #64]	@ (8005c0c <prvCheckTasksWaitingTermination+0x50>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fe15 	bl	8004804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bee:	f000 fa9d 	bl	800612c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f810 	bl	8005c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf8:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e1      	bne.n	8005bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200009bc 	.word	0x200009bc
 8005c10:	200009e8 	.word	0x200009e8
 8005c14:	200009d0 	.word	0x200009d0

08005c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	334c      	adds	r3, #76	@ 0x4c
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fe33 	bl	8006890 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d108      	bne.n	8005c46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fbd1 	bl	80063e0 <vPortFree>
				vPortFree( pxTCB );
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fbce 	bl	80063e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c44:	e019      	b.n	8005c7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d103      	bne.n	8005c58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fbc5 	bl	80063e0 <vPortFree>
	}
 8005c56:	e010      	b.n	8005c7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d00b      	beq.n	8005c7a <prvDeleteTCB+0x62>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60fb      	str	r3, [r7, #12]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <prvDeleteTCB+0x5e>
	}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc4 <prvResetNextTaskUnblockTime+0x40>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <prvResetNextTaskUnblockTime+0x14>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <prvResetNextTaskUnblockTime+0x16>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc8 <prvResetNextTaskUnblockTime+0x44>)
 8005ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ca6:	e008      	b.n	8005cba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ca8:	4b06      	ldr	r3, [pc, #24]	@ (8005cc4 <prvResetNextTaskUnblockTime+0x40>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	4a04      	ldr	r2, [pc, #16]	@ (8005cc8 <prvResetNextTaskUnblockTime+0x44>)
 8005cb8:	6013      	str	r3, [r2, #0]
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	200009a0 	.word	0x200009a0
 8005cc8:	20000a08 	.word	0x20000a08

08005ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <xTaskGetSchedulerState+0x34>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	e008      	b.n	8005cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce0:	4b08      	ldr	r3, [pc, #32]	@ (8005d04 <xTaskGetSchedulerState+0x38>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ce8:	2302      	movs	r3, #2
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	e001      	b.n	8005cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cf2:	687b      	ldr	r3, [r7, #4]
	}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	200009f4 	.word	0x200009f4
 8005d04:	20000a10 	.word	0x20000a10

08005d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d070      	beq.n	8005e00 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e0c <xTaskPriorityDisinherit+0x104>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d00b      	beq.n	8005d40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	60fb      	str	r3, [r7, #12]
}
 8005d3a:	bf00      	nop
 8005d3c:	bf00      	nop
 8005d3e:	e7fd      	b.n	8005d3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	60bb      	str	r3, [r7, #8]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d044      	beq.n	8005e00 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d140      	bne.n	8005e00 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fd3e 	bl	8004804 <uxListRemove>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d115      	bne.n	8005dba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	491f      	ldr	r1, [pc, #124]	@ (8005e10 <xTaskPriorityDisinherit+0x108>)
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xTaskPriorityDisinherit+0xb2>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	2201      	movs	r2, #1
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43da      	mvns	r2, r3
 8005db0:	4b18      	ldr	r3, [pc, #96]	@ (8005e14 <xTaskPriorityDisinherit+0x10c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4013      	ands	r3, r2
 8005db6:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <xTaskPriorityDisinherit+0x10c>)
 8005db8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	f1c3 0207 	rsb	r2, r3, #7
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005e14 <xTaskPriorityDisinherit+0x10c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e14 <xTaskPriorityDisinherit+0x10c>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a08      	ldr	r2, [pc, #32]	@ (8005e10 <xTaskPriorityDisinherit+0x108>)
 8005dee:	441a      	add	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f7fe fca9 	bl	800474e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e00:	697b      	ldr	r3, [r7, #20]
	}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200008e8 	.word	0x200008e8
 8005e10:	200008ec 	.word	0x200008ec
 8005e14:	200009f0 	.word	0x200009f0

08005e18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e22:	4b29      	ldr	r3, [pc, #164]	@ (8005ec8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e28:	4b28      	ldr	r3, [pc, #160]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fce8 	bl	8004804 <uxListRemove>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	2201      	movs	r2, #1
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43da      	mvns	r2, r3
 8005e48:	4b21      	ldr	r3, [pc, #132]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	4a20      	ldr	r2, [pc, #128]	@ (8005ed0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e58:	d10a      	bne.n	8005e70 <prvAddCurrentTaskToDelayedList+0x58>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	481a      	ldr	r0, [pc, #104]	@ (8005ed4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e6a:	f7fe fc70 	bl	800474e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e6e:	e026      	b.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d209      	bcs.n	8005e9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe fc7d 	bl	8004794 <vListInsert>
}
 8005e9a:	e010      	b.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe fc73 	bl	8004794 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d202      	bcs.n	8005ebe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005eb8:	4a09      	ldr	r2, [pc, #36]	@ (8005ee0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6013      	str	r3, [r2, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200009ec 	.word	0x200009ec
 8005ecc:	200008e8 	.word	0x200008e8
 8005ed0:	200009f0 	.word	0x200009f0
 8005ed4:	200009d4 	.word	0x200009d4
 8005ed8:	200009a4 	.word	0x200009a4
 8005edc:	200009a0 	.word	0x200009a0
 8005ee0:	20000a08 	.word	0x20000a08

08005ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b04      	subs	r3, #4
 8005f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f14:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <pxPortInitialiseStack+0x54>)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3b14      	subs	r3, #20
 8005f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3b20      	subs	r3, #32
 8005f2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr
 8005f38:	08005f3d 	.word	0x08005f3d

08005f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f46:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <prvTaskExitError+0x54>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d00b      	beq.n	8005f68 <prvTaskExitError+0x2c>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60fb      	str	r3, [r7, #12]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <prvTaskExitError+0x28>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60bb      	str	r3, [r7, #8]
}
 8005f7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f7c:	bf00      	nop
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0fc      	beq.n	8005f7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	2000001c 	.word	0x2000001c
	...

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	@ (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8005fbe:	4770      	bx	lr

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005fc8:	4806      	ldr	r0, [pc, #24]	@ (8005fe4 <prvPortStartFirstTask+0x1c>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	b662      	cpsie	i
 8005fd4:	b661      	cpsie	f
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	df00      	svc	0
 8005fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed08 	.word	0xe000ed08

08005fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fee:	4b32      	ldr	r3, [pc, #200]	@ (80060b8 <xPortStartScheduler+0xd0>)
 8005ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	22ff      	movs	r2, #255	@ 0xff
 8005ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b2a      	ldr	r3, [pc, #168]	@ (80060bc <xPortStartScheduler+0xd4>)
 8006014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006016:	4b2a      	ldr	r3, [pc, #168]	@ (80060c0 <xPortStartScheduler+0xd8>)
 8006018:	2207      	movs	r2, #7
 800601a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800601c:	e009      	b.n	8006032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800601e:	4b28      	ldr	r3, [pc, #160]	@ (80060c0 <xPortStartScheduler+0xd8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3b01      	subs	r3, #1
 8006024:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <xPortStartScheduler+0xd8>)
 8006026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	b2db      	uxtb	r3, r3
 8006030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603a:	2b80      	cmp	r3, #128	@ 0x80
 800603c:	d0ef      	beq.n	800601e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800603e:	4b20      	ldr	r3, [pc, #128]	@ (80060c0 <xPortStartScheduler+0xd8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1c3 0307 	rsb	r3, r3, #7
 8006046:	2b04      	cmp	r3, #4
 8006048:	d00b      	beq.n	8006062 <xPortStartScheduler+0x7a>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	60bb      	str	r3, [r7, #8]
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	e7fd      	b.n	800605e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006062:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <xPortStartScheduler+0xd8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <xPortStartScheduler+0xd8>)
 800606a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800606c:	4b14      	ldr	r3, [pc, #80]	@ (80060c0 <xPortStartScheduler+0xd8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006074:	4a12      	ldr	r2, [pc, #72]	@ (80060c0 <xPortStartScheduler+0xd8>)
 8006076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006080:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <xPortStartScheduler+0xdc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a0f      	ldr	r2, [pc, #60]	@ (80060c4 <xPortStartScheduler+0xdc>)
 8006086:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800608a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800608c:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <xPortStartScheduler+0xdc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <xPortStartScheduler+0xdc>)
 8006092:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006098:	f000 f8b8 	bl	800620c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <xPortStartScheduler+0xe0>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060a2:	f7ff ff91 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060a6:	f7ff fbbf 	bl	8005828 <vTaskSwitchContext>
	prvTaskExitError();
 80060aa:	f7ff ff47 	bl	8005f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	e000e400 	.word	0xe000e400
 80060bc:	20000a14 	.word	0x20000a14
 80060c0:	20000a18 	.word	0x20000a18
 80060c4:	e000ed20 	.word	0xe000ed20
 80060c8:	2000001c 	.word	0x2000001c

080060cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	607b      	str	r3, [r7, #4]
}
 80060e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <vPortEnterCritical+0x58>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006124 <vPortEnterCritical+0x58>)
 80060ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006124 <vPortEnterCritical+0x58>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d110      	bne.n	800611a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <vPortEnterCritical+0x5c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <vPortEnterCritical+0x4e>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	603b      	str	r3, [r7, #0]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <vPortEnterCritical+0x4a>
	}
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	2000001c 	.word	0x2000001c
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006132:	4b12      	ldr	r3, [pc, #72]	@ (800617c <vPortExitCritical+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <vPortExitCritical+0x26>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006152:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <vPortExitCritical+0x50>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a08      	ldr	r2, [pc, #32]	@ (800617c <vPortExitCritical+0x50>)
 800615a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <vPortExitCritical+0x50>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <vPortExitCritical+0x44>
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800616e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	2000001c 	.word	0x2000001c

08006180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006180:	f3ef 8009 	mrs	r0, PSP
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4b0d      	ldr	r3, [pc, #52]	@ (80061c0 <pxCurrentTCBConst>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006190:	6010      	str	r0, [r2, #0]
 8006192:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006196:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800619a:	f380 8811 	msr	BASEPRI, r0
 800619e:	f7ff fb43 	bl	8005828 <vTaskSwitchContext>
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8811 	msr	BASEPRI, r0
 80061aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	6808      	ldr	r0, [r1, #0]
 80061b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061b6:	f380 8809 	msr	PSP, r0
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	4770      	bx	lr

080061c0 <pxCurrentTCBConst>:
 80061c0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061e2:	f7ff fa63 	bl	80056ac <xTaskIncrementTick>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <xPortSysTickHandler+0x40>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
}
 80061fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006210:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <vPortSetupTimerInterrupt+0x30>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006216:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800621c:	4b09      	ldr	r3, [pc, #36]	@ (8006244 <vPortSetupTimerInterrupt+0x38>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a09      	ldr	r2, [pc, #36]	@ (8006248 <vPortSetupTimerInterrupt+0x3c>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a08      	ldr	r2, [pc, #32]	@ (800624c <vPortSetupTimerInterrupt+0x40>)
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800622e:	4b03      	ldr	r3, [pc, #12]	@ (800623c <vPortSetupTimerInterrupt+0x30>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr
 800623c:	e000e010 	.word	0xe000e010
 8006240:	e000e018 	.word	0xe000e018
 8006244:	20000010 	.word	0x20000010
 8006248:	10624dd3 	.word	0x10624dd3
 800624c:	e000e014 	.word	0xe000e014

08006250 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800625c:	f7ff f97a 	bl	8005554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006260:	4b5a      	ldr	r3, [pc, #360]	@ (80063cc <pvPortMalloc+0x17c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006268:	f000 f916 	bl	8006498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800626c:	4b58      	ldr	r3, [pc, #352]	@ (80063d0 <pvPortMalloc+0x180>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 8090 	bne.w	800639a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01e      	beq.n	80062be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006280:	2208      	movs	r2, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b00      	cmp	r3, #0
 8006290:	d015      	beq.n	80062be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f023 0307 	bic.w	r3, r3, #7
 8006298:	3308      	adds	r3, #8
 800629a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <pvPortMalloc+0x6e>
	__asm volatile
 80062a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	617b      	str	r3, [r7, #20]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d06a      	beq.n	800639a <pvPortMalloc+0x14a>
 80062c4:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <pvPortMalloc+0x184>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d865      	bhi.n	800639a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062ce:	4b42      	ldr	r3, [pc, #264]	@ (80063d8 <pvPortMalloc+0x188>)
 80062d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062d2:	4b41      	ldr	r3, [pc, #260]	@ (80063d8 <pvPortMalloc+0x188>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062d8:	e004      	b.n	80062e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d903      	bls.n	80062f6 <pvPortMalloc+0xa6>
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f1      	bne.n	80062da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062f6:	4b35      	ldr	r3, [pc, #212]	@ (80063cc <pvPortMalloc+0x17c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d04c      	beq.n	800639a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2208      	movs	r2, #8
 8006306:	4413      	add	r3, r2
 8006308:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	1ad2      	subs	r2, r2, r3
 800631a:	2308      	movs	r3, #8
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	429a      	cmp	r2, r3
 8006320:	d920      	bls.n	8006364 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4413      	add	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <pvPortMalloc+0xfc>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	613b      	str	r3, [r7, #16]
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	e7fd      	b.n	8006348 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	1ad2      	subs	r2, r2, r3
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800635e:	69b8      	ldr	r0, [r7, #24]
 8006360:	f000 f8fc 	bl	800655c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006364:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <pvPortMalloc+0x184>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	4a19      	ldr	r2, [pc, #100]	@ (80063d4 <pvPortMalloc+0x184>)
 8006370:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006372:	4b18      	ldr	r3, [pc, #96]	@ (80063d4 <pvPortMalloc+0x184>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b19      	ldr	r3, [pc, #100]	@ (80063dc <pvPortMalloc+0x18c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d203      	bcs.n	8006386 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800637e:	4b15      	ldr	r3, [pc, #84]	@ (80063d4 <pvPortMalloc+0x184>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a16      	ldr	r2, [pc, #88]	@ (80063dc <pvPortMalloc+0x18c>)
 8006384:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <pvPortMalloc+0x180>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	431a      	orrs	r2, r3
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800639a:	f7ff f8e9 	bl	8005570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <pvPortMalloc+0x170>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	60fb      	str	r3, [r7, #12]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <pvPortMalloc+0x16c>
	return pvReturn;
 80063c0:	69fb      	ldr	r3, [r7, #28]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	@ 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20001624 	.word	0x20001624
 80063d0:	20001630 	.word	0x20001630
 80063d4:	20001628 	.word	0x20001628
 80063d8:	2000161c 	.word	0x2000161c
 80063dc:	2000162c 	.word	0x2000162c

080063e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04a      	beq.n	8006488 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063f2:	2308      	movs	r3, #8
 80063f4:	425b      	negs	r3, r3
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4b22      	ldr	r3, [pc, #136]	@ (8006490 <vPortFree+0xb0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <vPortFree+0x46>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	60fb      	str	r3, [r7, #12]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <vPortFree+0x66>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60bb      	str	r3, [r7, #8]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <vPortFree+0xb0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d019      	beq.n	8006488 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d115      	bne.n	8006488 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <vPortFree+0xb0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	43db      	mvns	r3, r3
 8006466:	401a      	ands	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800646c:	f7ff f872 	bl	8005554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4b07      	ldr	r3, [pc, #28]	@ (8006494 <vPortFree+0xb4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4413      	add	r3, r2
 800647a:	4a06      	ldr	r2, [pc, #24]	@ (8006494 <vPortFree+0xb4>)
 800647c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800647e:	6938      	ldr	r0, [r7, #16]
 8006480:	f000 f86c 	bl	800655c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006484:	f7ff f874 	bl	8005570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006488:	bf00      	nop
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20001630 	.word	0x20001630
 8006494:	20001628 	.word	0x20001628

08006498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800649e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80064a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064a4:	4b27      	ldr	r3, [pc, #156]	@ (8006544 <prvHeapInit+0xac>)
 80064a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00c      	beq.n	80064cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3307      	adds	r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0307 	bic.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006544 <prvHeapInit+0xac>)
 80064c8:	4413      	add	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <prvHeapInit+0xb0>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006548 <prvHeapInit+0xb0>)
 80064d8:	2200      	movs	r2, #0
 80064da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4413      	add	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064e4:	2208      	movs	r2, #8
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0307 	bic.w	r3, r3, #7
 80064f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a15      	ldr	r2, [pc, #84]	@ (800654c <prvHeapInit+0xb4>)
 80064f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064fa:	4b14      	ldr	r3, [pc, #80]	@ (800654c <prvHeapInit+0xb4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006502:	4b12      	ldr	r3, [pc, #72]	@ (800654c <prvHeapInit+0xb4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	1ad2      	subs	r2, r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006518:	4b0c      	ldr	r3, [pc, #48]	@ (800654c <prvHeapInit+0xb4>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4a0a      	ldr	r2, [pc, #40]	@ (8006550 <prvHeapInit+0xb8>)
 8006526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a09      	ldr	r2, [pc, #36]	@ (8006554 <prvHeapInit+0xbc>)
 800652e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <prvHeapInit+0xc0>)
 8006532:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006536:	601a      	str	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000a1c 	.word	0x20000a1c
 8006548:	2000161c 	.word	0x2000161c
 800654c:	20001624 	.word	0x20001624
 8006550:	2000162c 	.word	0x2000162c
 8006554:	20001628 	.word	0x20001628
 8006558:	20001630 	.word	0x20001630

0800655c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006564:	4b27      	ldr	r3, [pc, #156]	@ (8006604 <prvInsertBlockIntoFreeList+0xa8>)
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e002      	b.n	8006570 <prvInsertBlockIntoFreeList+0x14>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d8f7      	bhi.n	800656a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	4413      	add	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	d108      	bne.n	800659e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	441a      	add	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d118      	bne.n	80065e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4b14      	ldr	r3, [pc, #80]	@ (8006608 <prvInsertBlockIntoFreeList+0xac>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d00d      	beq.n	80065da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e008      	b.n	80065ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065da:	4b0b      	ldr	r3, [pc, #44]	@ (8006608 <prvInsertBlockIntoFreeList+0xac>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e003      	b.n	80065ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d002      	beq.n	80065fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr
 8006604:	2000161c 	.word	0x2000161c
 8006608:	20001624 	.word	0x20001624

0800660c <gcvt>:
 800660c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800660e:	461c      	mov	r4, r3
 8006610:	4615      	mov	r5, r2
 8006612:	2300      	movs	r3, #0
 8006614:	2200      	movs	r2, #0
 8006616:	b085      	sub	sp, #20
 8006618:	4606      	mov	r6, r0
 800661a:	460f      	mov	r7, r1
 800661c:	f7fa f9c6 	bl	80009ac <__aeabi_dcmplt>
 8006620:	4623      	mov	r3, r4
 8006622:	b118      	cbz	r0, 800662c <gcvt+0x20>
 8006624:	222d      	movs	r2, #45	@ 0x2d
 8006626:	3d01      	subs	r5, #1
 8006628:	f803 2b01 	strb.w	r2, [r3], #1
 800662c:	2267      	movs	r2, #103	@ 0x67
 800662e:	2100      	movs	r1, #0
 8006630:	e9cd 5300 	strd	r5, r3, [sp]
 8006634:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8006638:	4905      	ldr	r1, [pc, #20]	@ (8006650 <gcvt+0x44>)
 800663a:	4632      	mov	r2, r6
 800663c:	463b      	mov	r3, r7
 800663e:	6808      	ldr	r0, [r1, #0]
 8006640:	f000 fb5e 	bl	8006d00 <_gcvt>
 8006644:	2800      	cmp	r0, #0
 8006646:	bf18      	it	ne
 8006648:	4620      	movne	r0, r4
 800664a:	b005      	add	sp, #20
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	bf00      	nop
 8006650:	2000002c 	.word	0x2000002c

08006654 <std>:
 8006654:	2300      	movs	r3, #0
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	e9c0 3300 	strd	r3, r3, [r0]
 800665e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	@ 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6183      	str	r3, [r0, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	2208      	movs	r2, #8
 8006670:	305c      	adds	r0, #92	@ 0x5c
 8006672:	f000 f8f4 	bl	800685e <memset>
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <std+0x58>)
 8006678:	6224      	str	r4, [r4, #32]
 800667a:	6263      	str	r3, [r4, #36]	@ 0x24
 800667c:	4b0c      	ldr	r3, [pc, #48]	@ (80066b0 <std+0x5c>)
 800667e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <std+0x60>)
 8006682:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006684:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <std+0x64>)
 8006686:	6323      	str	r3, [r4, #48]	@ 0x30
 8006688:	4b0c      	ldr	r3, [pc, #48]	@ (80066bc <std+0x68>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d006      	beq.n	800669c <std+0x48>
 800668e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006692:	4294      	cmp	r4, r2
 8006694:	d002      	beq.n	800669c <std+0x48>
 8006696:	33d0      	adds	r3, #208	@ 0xd0
 8006698:	429c      	cmp	r4, r3
 800669a:	d105      	bne.n	80066a8 <std+0x54>
 800669c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	f000 b9aa 	b.w	80069fc <__retarget_lock_init_recursive>
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	bf00      	nop
 80066ac:	080067d9 	.word	0x080067d9
 80066b0:	080067fb 	.word	0x080067fb
 80066b4:	08006833 	.word	0x08006833
 80066b8:	08006857 	.word	0x08006857
 80066bc:	20001634 	.word	0x20001634

080066c0 <stdio_exit_handler>:
 80066c0:	4a02      	ldr	r2, [pc, #8]	@ (80066cc <stdio_exit_handler+0xc>)
 80066c2:	4903      	ldr	r1, [pc, #12]	@ (80066d0 <stdio_exit_handler+0x10>)
 80066c4:	4803      	ldr	r0, [pc, #12]	@ (80066d4 <stdio_exit_handler+0x14>)
 80066c6:	f000 b869 	b.w	800679c <_fwalk_sglue>
 80066ca:	bf00      	nop
 80066cc:	20000020 	.word	0x20000020
 80066d0:	08006f89 	.word	0x08006f89
 80066d4:	20000030 	.word	0x20000030

080066d8 <cleanup_stdio>:
 80066d8:	6841      	ldr	r1, [r0, #4]
 80066da:	4b0c      	ldr	r3, [pc, #48]	@ (800670c <cleanup_stdio+0x34>)
 80066dc:	b510      	push	{r4, lr}
 80066de:	4299      	cmp	r1, r3
 80066e0:	4604      	mov	r4, r0
 80066e2:	d001      	beq.n	80066e8 <cleanup_stdio+0x10>
 80066e4:	f000 fc50 	bl	8006f88 <_fflush_r>
 80066e8:	68a1      	ldr	r1, [r4, #8]
 80066ea:	4b09      	ldr	r3, [pc, #36]	@ (8006710 <cleanup_stdio+0x38>)
 80066ec:	4299      	cmp	r1, r3
 80066ee:	d002      	beq.n	80066f6 <cleanup_stdio+0x1e>
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fc49 	bl	8006f88 <_fflush_r>
 80066f6:	68e1      	ldr	r1, [r4, #12]
 80066f8:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <cleanup_stdio+0x3c>)
 80066fa:	4299      	cmp	r1, r3
 80066fc:	d004      	beq.n	8006708 <cleanup_stdio+0x30>
 80066fe:	4620      	mov	r0, r4
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	f000 bc40 	b.w	8006f88 <_fflush_r>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	bf00      	nop
 800670c:	20001634 	.word	0x20001634
 8006710:	2000169c 	.word	0x2000169c
 8006714:	20001704 	.word	0x20001704

08006718 <global_stdio_init.part.0>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <global_stdio_init.part.0+0x30>)
 800671c:	4c0b      	ldr	r4, [pc, #44]	@ (800674c <global_stdio_init.part.0+0x34>)
 800671e:	4a0c      	ldr	r2, [pc, #48]	@ (8006750 <global_stdio_init.part.0+0x38>)
 8006720:	4620      	mov	r0, r4
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	2104      	movs	r1, #4
 8006726:	2200      	movs	r2, #0
 8006728:	f7ff ff94 	bl	8006654 <std>
 800672c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006730:	2201      	movs	r2, #1
 8006732:	2109      	movs	r1, #9
 8006734:	f7ff ff8e 	bl	8006654 <std>
 8006738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800673c:	2202      	movs	r2, #2
 800673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006742:	2112      	movs	r1, #18
 8006744:	f7ff bf86 	b.w	8006654 <std>
 8006748:	2000176c 	.word	0x2000176c
 800674c:	20001634 	.word	0x20001634
 8006750:	080066c1 	.word	0x080066c1

08006754 <__sfp_lock_acquire>:
 8006754:	4801      	ldr	r0, [pc, #4]	@ (800675c <__sfp_lock_acquire+0x8>)
 8006756:	f000 b952 	b.w	80069fe <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	20001775 	.word	0x20001775

08006760 <__sfp_lock_release>:
 8006760:	4801      	ldr	r0, [pc, #4]	@ (8006768 <__sfp_lock_release+0x8>)
 8006762:	f000 b94d 	b.w	8006a00 <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	20001775 	.word	0x20001775

0800676c <__sinit>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	f7ff fff0 	bl	8006754 <__sfp_lock_acquire>
 8006774:	6a23      	ldr	r3, [r4, #32]
 8006776:	b11b      	cbz	r3, 8006780 <__sinit+0x14>
 8006778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677c:	f7ff bff0 	b.w	8006760 <__sfp_lock_release>
 8006780:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <__sinit+0x28>)
 8006782:	6223      	str	r3, [r4, #32]
 8006784:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <__sinit+0x2c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f5      	bne.n	8006778 <__sinit+0xc>
 800678c:	f7ff ffc4 	bl	8006718 <global_stdio_init.part.0>
 8006790:	e7f2      	b.n	8006778 <__sinit+0xc>
 8006792:	bf00      	nop
 8006794:	080066d9 	.word	0x080066d9
 8006798:	2000176c 	.word	0x2000176c

0800679c <_fwalk_sglue>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	4607      	mov	r7, r0
 80067a2:	4688      	mov	r8, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	2600      	movs	r6, #0
 80067a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ac:	f1b9 0901 	subs.w	r9, r9, #1
 80067b0:	d505      	bpl.n	80067be <_fwalk_sglue+0x22>
 80067b2:	6824      	ldr	r4, [r4, #0]
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	d1f7      	bne.n	80067a8 <_fwalk_sglue+0xc>
 80067b8:	4630      	mov	r0, r6
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d907      	bls.n	80067d4 <_fwalk_sglue+0x38>
 80067c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067c8:	3301      	adds	r3, #1
 80067ca:	d003      	beq.n	80067d4 <_fwalk_sglue+0x38>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	4306      	orrs	r6, r0
 80067d4:	3568      	adds	r5, #104	@ 0x68
 80067d6:	e7e9      	b.n	80067ac <_fwalk_sglue+0x10>

080067d8 <__sread>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	460c      	mov	r4, r1
 80067dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e0:	f000 f8be 	bl	8006960 <_read_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	bfab      	itete	ge
 80067e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ea:	89a3      	ldrhlt	r3, [r4, #12]
 80067ec:	181b      	addge	r3, r3, r0
 80067ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067f2:	bfac      	ite	ge
 80067f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067f6:	81a3      	strhlt	r3, [r4, #12]
 80067f8:	bd10      	pop	{r4, pc}

080067fa <__swrite>:
 80067fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fe:	461f      	mov	r7, r3
 8006800:	898b      	ldrh	r3, [r1, #12]
 8006802:	4605      	mov	r5, r0
 8006804:	05db      	lsls	r3, r3, #23
 8006806:	460c      	mov	r4, r1
 8006808:	4616      	mov	r6, r2
 800680a:	d505      	bpl.n	8006818 <__swrite+0x1e>
 800680c:	2302      	movs	r3, #2
 800680e:	2200      	movs	r2, #0
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	f000 f892 	bl	800693c <_lseek_r>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	4632      	mov	r2, r6
 800681c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	4628      	mov	r0, r5
 8006824:	463b      	mov	r3, r7
 8006826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800682e:	f000 b8a9 	b.w	8006984 <_write_r>

08006832 <__sseek>:
 8006832:	b510      	push	{r4, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683a:	f000 f87f 	bl	800693c <_lseek_r>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	bf15      	itete	ne
 8006844:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006846:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800684a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800684e:	81a3      	strheq	r3, [r4, #12]
 8006850:	bf18      	it	ne
 8006852:	81a3      	strhne	r3, [r4, #12]
 8006854:	bd10      	pop	{r4, pc}

08006856 <__sclose>:
 8006856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685a:	f000 b809 	b.w	8006870 <_close_r>

0800685e <memset>:
 800685e:	4603      	mov	r3, r0
 8006860:	4402      	add	r2, r0
 8006862:	4293      	cmp	r3, r2
 8006864:	d100      	bne.n	8006868 <memset+0xa>
 8006866:	4770      	bx	lr
 8006868:	f803 1b01 	strb.w	r1, [r3], #1
 800686c:	e7f9      	b.n	8006862 <memset+0x4>
	...

08006870 <_close_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	2300      	movs	r3, #0
 8006874:	4d05      	ldr	r5, [pc, #20]	@ (800688c <_close_r+0x1c>)
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	f7fb fac9 	bl	8001e12 <_close>
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d102      	bne.n	800688a <_close_r+0x1a>
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	b103      	cbz	r3, 800688a <_close_r+0x1a>
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	20001770 	.word	0x20001770

08006890 <_reclaim_reent>:
 8006890:	4b29      	ldr	r3, [pc, #164]	@ (8006938 <_reclaim_reent+0xa8>)
 8006892:	b570      	push	{r4, r5, r6, lr}
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4604      	mov	r4, r0
 8006898:	4283      	cmp	r3, r0
 800689a:	d04b      	beq.n	8006934 <_reclaim_reent+0xa4>
 800689c:	69c3      	ldr	r3, [r0, #28]
 800689e:	b1ab      	cbz	r3, 80068cc <_reclaim_reent+0x3c>
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	b16b      	cbz	r3, 80068c0 <_reclaim_reent+0x30>
 80068a4:	2500      	movs	r5, #0
 80068a6:	69e3      	ldr	r3, [r4, #28]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	5959      	ldr	r1, [r3, r5]
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d13b      	bne.n	8006928 <_reclaim_reent+0x98>
 80068b0:	3504      	adds	r5, #4
 80068b2:	2d80      	cmp	r5, #128	@ 0x80
 80068b4:	d1f7      	bne.n	80068a6 <_reclaim_reent+0x16>
 80068b6:	69e3      	ldr	r3, [r4, #28]
 80068b8:	4620      	mov	r0, r4
 80068ba:	68d9      	ldr	r1, [r3, #12]
 80068bc:	f000 f8b0 	bl	8006a20 <_free_r>
 80068c0:	69e3      	ldr	r3, [r4, #28]
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	b111      	cbz	r1, 80068cc <_reclaim_reent+0x3c>
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 f8aa 	bl	8006a20 <_free_r>
 80068cc:	6961      	ldr	r1, [r4, #20]
 80068ce:	b111      	cbz	r1, 80068d6 <_reclaim_reent+0x46>
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 f8a5 	bl	8006a20 <_free_r>
 80068d6:	69e1      	ldr	r1, [r4, #28]
 80068d8:	b111      	cbz	r1, 80068e0 <_reclaim_reent+0x50>
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 f8a0 	bl	8006a20 <_free_r>
 80068e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80068e2:	b111      	cbz	r1, 80068ea <_reclaim_reent+0x5a>
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 f89b 	bl	8006a20 <_free_r>
 80068ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068ec:	b111      	cbz	r1, 80068f4 <_reclaim_reent+0x64>
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f896 	bl	8006a20 <_free_r>
 80068f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80068f6:	b111      	cbz	r1, 80068fe <_reclaim_reent+0x6e>
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 f891 	bl	8006a20 <_free_r>
 80068fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006900:	b111      	cbz	r1, 8006908 <_reclaim_reent+0x78>
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f88c 	bl	8006a20 <_free_r>
 8006908:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800690a:	b111      	cbz	r1, 8006912 <_reclaim_reent+0x82>
 800690c:	4620      	mov	r0, r4
 800690e:	f000 f887 	bl	8006a20 <_free_r>
 8006912:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006914:	b111      	cbz	r1, 800691c <_reclaim_reent+0x8c>
 8006916:	4620      	mov	r0, r4
 8006918:	f000 f882 	bl	8006a20 <_free_r>
 800691c:	6a23      	ldr	r3, [r4, #32]
 800691e:	b14b      	cbz	r3, 8006934 <_reclaim_reent+0xa4>
 8006920:	4620      	mov	r0, r4
 8006922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006926:	4718      	bx	r3
 8006928:	680e      	ldr	r6, [r1, #0]
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f878 	bl	8006a20 <_free_r>
 8006930:	4631      	mov	r1, r6
 8006932:	e7bb      	b.n	80068ac <_reclaim_reent+0x1c>
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	bf00      	nop
 8006938:	2000002c 	.word	0x2000002c

0800693c <_lseek_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	4611      	mov	r1, r2
 8006944:	2200      	movs	r2, #0
 8006946:	4d05      	ldr	r5, [pc, #20]	@ (800695c <_lseek_r+0x20>)
 8006948:	602a      	str	r2, [r5, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f7fb fa85 	bl	8001e5a <_lseek>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_lseek_r+0x1e>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_lseek_r+0x1e>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	20001770 	.word	0x20001770

08006960 <_read_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	2200      	movs	r2, #0
 800696a:	4d05      	ldr	r5, [pc, #20]	@ (8006980 <_read_r+0x20>)
 800696c:	602a      	str	r2, [r5, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	f7fb fa16 	bl	8001da0 <_read>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_read_r+0x1e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_read_r+0x1e>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20001770 	.word	0x20001770

08006984 <_write_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	4611      	mov	r1, r2
 800698c:	2200      	movs	r2, #0
 800698e:	4d05      	ldr	r5, [pc, #20]	@ (80069a4 <_write_r+0x20>)
 8006990:	602a      	str	r2, [r5, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	f7fb fa21 	bl	8001dda <_write>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_write_r+0x1e>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_write_r+0x1e>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20001770 	.word	0x20001770

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	@ (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2000002c 	.word	0x2000002c

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	2600      	movs	r6, #0
 80069b8:	4d0c      	ldr	r5, [pc, #48]	@ (80069ec <__libc_init_array+0x38>)
 80069ba:	4c0d      	ldr	r4, [pc, #52]	@ (80069f0 <__libc_init_array+0x3c>)
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	f002 f99a 	bl	8008cfc <_init>
 80069c8:	2600      	movs	r6, #0
 80069ca:	4d0a      	ldr	r5, [pc, #40]	@ (80069f4 <__libc_init_array+0x40>)
 80069cc:	4c0a      	ldr	r4, [pc, #40]	@ (80069f8 <__libc_init_array+0x44>)
 80069ce:	1b64      	subs	r4, r4, r5
 80069d0:	10a4      	asrs	r4, r4, #2
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08009850 	.word	0x08009850
 80069f0:	08009850 	.word	0x08009850
 80069f4:	08009850 	.word	0x08009850
 80069f8:	08009854 	.word	0x08009854

080069fc <__retarget_lock_init_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_acquire_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <__retarget_lock_release_recursive>:
 8006a00:	4770      	bx	lr

08006a02 <memcpy>:
 8006a02:	440a      	add	r2, r1
 8006a04:	4291      	cmp	r1, r2
 8006a06:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a0a:	d100      	bne.n	8006a0e <memcpy+0xc>
 8006a0c:	4770      	bx	lr
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a14:	4291      	cmp	r1, r2
 8006a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a1a:	d1f9      	bne.n	8006a10 <memcpy+0xe>
 8006a1c:	bd10      	pop	{r4, pc}
	...

08006a20 <_free_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4605      	mov	r5, r0
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d040      	beq.n	8006aaa <_free_r+0x8a>
 8006a28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a2c:	1f0c      	subs	r4, r1, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfb8      	it	lt
 8006a32:	18e4      	addlt	r4, r4, r3
 8006a34:	f000 f8de 	bl	8006bf4 <__malloc_lock>
 8006a38:	4a1c      	ldr	r2, [pc, #112]	@ (8006aac <_free_r+0x8c>)
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	b933      	cbnz	r3, 8006a4c <_free_r+0x2c>
 8006a3e:	6063      	str	r3, [r4, #4]
 8006a40:	6014      	str	r4, [r2, #0]
 8006a42:	4628      	mov	r0, r5
 8006a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a48:	f000 b8da 	b.w	8006c00 <__malloc_unlock>
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	d908      	bls.n	8006a62 <_free_r+0x42>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428b      	cmp	r3, r1
 8006a56:	bf01      	itttt	eq
 8006a58:	6819      	ldreq	r1, [r3, #0]
 8006a5a:	685b      	ldreq	r3, [r3, #4]
 8006a5c:	1809      	addeq	r1, r1, r0
 8006a5e:	6021      	streq	r1, [r4, #0]
 8006a60:	e7ed      	b.n	8006a3e <_free_r+0x1e>
 8006a62:	461a      	mov	r2, r3
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b10b      	cbz	r3, 8006a6c <_free_r+0x4c>
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d9fa      	bls.n	8006a62 <_free_r+0x42>
 8006a6c:	6811      	ldr	r1, [r2, #0]
 8006a6e:	1850      	adds	r0, r2, r1
 8006a70:	42a0      	cmp	r0, r4
 8006a72:	d10b      	bne.n	8006a8c <_free_r+0x6c>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	4401      	add	r1, r0
 8006a78:	1850      	adds	r0, r2, r1
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	d1e0      	bne.n	8006a42 <_free_r+0x22>
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	4408      	add	r0, r1
 8006a86:	6010      	str	r0, [r2, #0]
 8006a88:	6053      	str	r3, [r2, #4]
 8006a8a:	e7da      	b.n	8006a42 <_free_r+0x22>
 8006a8c:	d902      	bls.n	8006a94 <_free_r+0x74>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	e7d6      	b.n	8006a42 <_free_r+0x22>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	1821      	adds	r1, r4, r0
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	bf01      	itttt	eq
 8006a9c:	6819      	ldreq	r1, [r3, #0]
 8006a9e:	685b      	ldreq	r3, [r3, #4]
 8006aa0:	1809      	addeq	r1, r1, r0
 8006aa2:	6021      	streq	r1, [r4, #0]
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6054      	str	r4, [r2, #4]
 8006aa8:	e7cb      	b.n	8006a42 <_free_r+0x22>
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	2000177c 	.word	0x2000177c

08006ab0 <sbrk_aligned>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8006af0 <sbrk_aligned+0x40>)
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	6831      	ldr	r1, [r6, #0]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	b911      	cbnz	r1, 8006ac2 <sbrk_aligned+0x12>
 8006abc:	f000 fa8c 	bl	8006fd8 <_sbrk_r>
 8006ac0:	6030      	str	r0, [r6, #0]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 fa87 	bl	8006fd8 <_sbrk_r>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d103      	bne.n	8006ad6 <sbrk_aligned+0x26>
 8006ace:	f04f 34ff 	mov.w	r4, #4294967295
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	bd70      	pop	{r4, r5, r6, pc}
 8006ad6:	1cc4      	adds	r4, r0, #3
 8006ad8:	f024 0403 	bic.w	r4, r4, #3
 8006adc:	42a0      	cmp	r0, r4
 8006ade:	d0f8      	beq.n	8006ad2 <sbrk_aligned+0x22>
 8006ae0:	1a21      	subs	r1, r4, r0
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 fa78 	bl	8006fd8 <_sbrk_r>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d1f2      	bne.n	8006ad2 <sbrk_aligned+0x22>
 8006aec:	e7ef      	b.n	8006ace <sbrk_aligned+0x1e>
 8006aee:	bf00      	nop
 8006af0:	20001778 	.word	0x20001778

08006af4 <_malloc_r>:
 8006af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af8:	1ccd      	adds	r5, r1, #3
 8006afa:	f025 0503 	bic.w	r5, r5, #3
 8006afe:	3508      	adds	r5, #8
 8006b00:	2d0c      	cmp	r5, #12
 8006b02:	bf38      	it	cc
 8006b04:	250c      	movcc	r5, #12
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	4606      	mov	r6, r0
 8006b0a:	db01      	blt.n	8006b10 <_malloc_r+0x1c>
 8006b0c:	42a9      	cmp	r1, r5
 8006b0e:	d904      	bls.n	8006b1a <_malloc_r+0x26>
 8006b10:	230c      	movs	r3, #12
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	2000      	movs	r0, #0
 8006b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bf0 <_malloc_r+0xfc>
 8006b1e:	f000 f869 	bl	8006bf4 <__malloc_lock>
 8006b22:	f8d8 3000 	ldr.w	r3, [r8]
 8006b26:	461c      	mov	r4, r3
 8006b28:	bb44      	cbnz	r4, 8006b7c <_malloc_r+0x88>
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f7ff ffbf 	bl	8006ab0 <sbrk_aligned>
 8006b32:	1c43      	adds	r3, r0, #1
 8006b34:	4604      	mov	r4, r0
 8006b36:	d158      	bne.n	8006bea <_malloc_r+0xf6>
 8006b38:	f8d8 4000 	ldr.w	r4, [r8]
 8006b3c:	4627      	mov	r7, r4
 8006b3e:	2f00      	cmp	r7, #0
 8006b40:	d143      	bne.n	8006bca <_malloc_r+0xd6>
 8006b42:	2c00      	cmp	r4, #0
 8006b44:	d04b      	beq.n	8006bde <_malloc_r+0xea>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	eb04 0903 	add.w	r9, r4, r3
 8006b50:	f000 fa42 	bl	8006fd8 <_sbrk_r>
 8006b54:	4581      	cmp	r9, r0
 8006b56:	d142      	bne.n	8006bde <_malloc_r+0xea>
 8006b58:	6821      	ldr	r1, [r4, #0]
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	1a6d      	subs	r5, r5, r1
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7ff ffa6 	bl	8006ab0 <sbrk_aligned>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d03a      	beq.n	8006bde <_malloc_r+0xea>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	442b      	add	r3, r5
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	bb62      	cbnz	r2, 8006bd0 <_malloc_r+0xdc>
 8006b76:	f8c8 7000 	str.w	r7, [r8]
 8006b7a:	e00f      	b.n	8006b9c <_malloc_r+0xa8>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	1b52      	subs	r2, r2, r5
 8006b80:	d420      	bmi.n	8006bc4 <_malloc_r+0xd0>
 8006b82:	2a0b      	cmp	r2, #11
 8006b84:	d917      	bls.n	8006bb6 <_malloc_r+0xc2>
 8006b86:	1961      	adds	r1, r4, r5
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	6025      	str	r5, [r4, #0]
 8006b8c:	bf18      	it	ne
 8006b8e:	6059      	strne	r1, [r3, #4]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	bf08      	it	eq
 8006b94:	f8c8 1000 	streq.w	r1, [r8]
 8006b98:	5162      	str	r2, [r4, r5]
 8006b9a:	604b      	str	r3, [r1, #4]
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f82f 	bl	8006c00 <__malloc_unlock>
 8006ba2:	f104 000b 	add.w	r0, r4, #11
 8006ba6:	1d23      	adds	r3, r4, #4
 8006ba8:	f020 0007 	bic.w	r0, r0, #7
 8006bac:	1ac2      	subs	r2, r0, r3
 8006bae:	bf1c      	itt	ne
 8006bb0:	1a1b      	subne	r3, r3, r0
 8006bb2:	50a3      	strne	r3, [r4, r2]
 8006bb4:	e7af      	b.n	8006b16 <_malloc_r+0x22>
 8006bb6:	6862      	ldr	r2, [r4, #4]
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	bf0c      	ite	eq
 8006bbc:	f8c8 2000 	streq.w	r2, [r8]
 8006bc0:	605a      	strne	r2, [r3, #4]
 8006bc2:	e7eb      	b.n	8006b9c <_malloc_r+0xa8>
 8006bc4:	4623      	mov	r3, r4
 8006bc6:	6864      	ldr	r4, [r4, #4]
 8006bc8:	e7ae      	b.n	8006b28 <_malloc_r+0x34>
 8006bca:	463c      	mov	r4, r7
 8006bcc:	687f      	ldr	r7, [r7, #4]
 8006bce:	e7b6      	b.n	8006b3e <_malloc_r+0x4a>
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d1fb      	bne.n	8006bd0 <_malloc_r+0xdc>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6053      	str	r3, [r2, #4]
 8006bdc:	e7de      	b.n	8006b9c <_malloc_r+0xa8>
 8006bde:	230c      	movs	r3, #12
 8006be0:	4630      	mov	r0, r6
 8006be2:	6033      	str	r3, [r6, #0]
 8006be4:	f000 f80c 	bl	8006c00 <__malloc_unlock>
 8006be8:	e794      	b.n	8006b14 <_malloc_r+0x20>
 8006bea:	6005      	str	r5, [r0, #0]
 8006bec:	e7d6      	b.n	8006b9c <_malloc_r+0xa8>
 8006bee:	bf00      	nop
 8006bf0:	2000177c 	.word	0x2000177c

08006bf4 <__malloc_lock>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__malloc_lock+0x8>)
 8006bf6:	f7ff bf02 	b.w	80069fe <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	20001774 	.word	0x20001774

08006c00 <__malloc_unlock>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__malloc_unlock+0x8>)
 8006c02:	f7ff befd 	b.w	8006a00 <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	20001774 	.word	0x20001774

08006c0c <print_e>:
 8006c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0e:	b08b      	sub	sp, #44	@ 0x2c
 8006c10:	460d      	mov	r5, r1
 8006c12:	a908      	add	r1, sp, #32
 8006c14:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c16:	9104      	str	r1, [sp, #16]
 8006c18:	a907      	add	r1, sp, #28
 8006c1a:	9103      	str	r1, [sp, #12]
 8006c1c:	a909      	add	r1, sp, #36	@ 0x24
 8006c1e:	9102      	str	r1, [sp, #8]
 8006c20:	1c71      	adds	r1, r6, #1
 8006c22:	9101      	str	r1, [sp, #4]
 8006c24:	2102      	movs	r1, #2
 8006c26:	9100      	str	r1, [sp, #0]
 8006c28:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 8006c2c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8006c2e:	f000 fa73 	bl	8007118 <_dtoa_r>
 8006c32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c38:	4601      	mov	r1, r0
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d104      	bne.n	8006c48 <print_e+0x3c>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f9da 	bl	8006ff8 <strcpy>
 8006c44:	b00b      	add	sp, #44	@ 0x2c
 8006c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c48:	462b      	mov	r3, r5
 8006c4a:	7800      	ldrb	r0, [r0, #0]
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	f803 0b01 	strb.w	r0, [r3], #1
 8006c52:	bfc8      	it	gt
 8006c54:	2401      	movgt	r4, #1
 8006c56:	202e      	movs	r0, #46	@ 0x2e
 8006c58:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006c5c:	b10d      	cbz	r5, 8006c62 <print_e+0x56>
 8006c5e:	2e00      	cmp	r6, #0
 8006c60:	dc29      	bgt.n	8006cb6 <print_e+0xaa>
 8006c62:	2f67      	cmp	r7, #103	@ 0x67
 8006c64:	d038      	beq.n	8006cd8 <print_e+0xcc>
 8006c66:	2f47      	cmp	r7, #71	@ 0x47
 8006c68:	d038      	beq.n	8006cdc <print_e+0xd0>
 8006c6a:	212e      	movs	r1, #46	@ 0x2e
 8006c6c:	2030      	movs	r0, #48	@ 0x30
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	dc2a      	bgt.n	8006cc8 <print_e+0xbc>
 8006c72:	1e51      	subs	r1, r2, #1
 8006c74:	2900      	cmp	r1, #0
 8006c76:	bfa8      	it	ge
 8006c78:	222b      	movge	r2, #43	@ 0x2b
 8006c7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c7c:	bfbd      	ittte	lt
 8006c7e:	212d      	movlt	r1, #45	@ 0x2d
 8006c80:	f1c2 0201 	rsblt	r2, r2, #1
 8006c84:	9209      	strlt	r2, [sp, #36]	@ 0x24
 8006c86:	705a      	strbge	r2, [r3, #1]
 8006c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c8a:	bfb8      	it	lt
 8006c8c:	7059      	strblt	r1, [r3, #1]
 8006c8e:	2a63      	cmp	r2, #99	@ 0x63
 8006c90:	701f      	strb	r7, [r3, #0]
 8006c92:	dc25      	bgt.n	8006ce0 <print_e+0xd4>
 8006c94:	1c98      	adds	r0, r3, #2
 8006c96:	220a      	movs	r2, #10
 8006c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8006c9e:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 8006ca2:	7001      	strb	r1, [r0, #0]
 8006ca4:	f06f 0109 	mvn.w	r1, #9
 8006ca8:	fb01 3302 	mla	r3, r1, r2, r3
 8006cac:	3330      	adds	r3, #48	@ 0x30
 8006cae:	7043      	strb	r3, [r0, #1]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	7083      	strb	r3, [r0, #2]
 8006cb4:	e7c6      	b.n	8006c44 <print_e+0x38>
 8006cb6:	b10c      	cbz	r4, 8006cbc <print_e+0xb0>
 8006cb8:	f803 0b01 	strb.w	r0, [r3], #1
 8006cbc:	780c      	ldrb	r4, [r1, #0]
 8006cbe:	3e01      	subs	r6, #1
 8006cc0:	f803 4b01 	strb.w	r4, [r3], #1
 8006cc4:	2400      	movs	r4, #0
 8006cc6:	e7c7      	b.n	8006c58 <print_e+0x4c>
 8006cc8:	b10c      	cbz	r4, 8006cce <print_e+0xc2>
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	2400      	movs	r4, #0
 8006cd0:	f803 0b01 	strb.w	r0, [r3], #1
 8006cd4:	3e01      	subs	r6, #1
 8006cd6:	e7ca      	b.n	8006c6e <print_e+0x62>
 8006cd8:	2765      	movs	r7, #101	@ 0x65
 8006cda:	e7ca      	b.n	8006c72 <print_e+0x66>
 8006cdc:	2745      	movs	r7, #69	@ 0x45
 8006cde:	e7c8      	b.n	8006c72 <print_e+0x66>
 8006ce0:	2164      	movs	r1, #100	@ 0x64
 8006ce2:	fb92 f1f1 	sdiv	r1, r2, r1
 8006ce6:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 8006cea:	1cd8      	adds	r0, r3, #3
 8006cec:	709c      	strb	r4, [r3, #2]
 8006cee:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8006cf2:	fb03 2201 	mla	r2, r3, r1, r2
 8006cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cf8:	e7cd      	b.n	8006c96 <print_e+0x8a>
 8006cfa:	0000      	movs	r0, r0
 8006cfc:	0000      	movs	r0, r0
	...

08006d00 <_gcvt>:
 8006d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4690      	mov	r8, r2
 8006d06:	4699      	mov	r9, r3
 8006d08:	b08b      	sub	sp, #44	@ 0x2c
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	@ 0x48
 8006d10:	2200      	movs	r2, #0
 8006d12:	2300      	movs	r3, #0
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006d1a:	f7f9 fe47 	bl	80009ac <__aeabi_dcmplt>
 8006d1e:	b110      	cbz	r0, 8006d26 <_gcvt+0x26>
 8006d20:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006d24:	4699      	mov	r9, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	f7f9 fe33 	bl	8000998 <__aeabi_dcmpeq>
 8006d32:	b138      	cbz	r0, 8006d44 <_gcvt+0x44>
 8006d34:	2330      	movs	r3, #48	@ 0x30
 8006d36:	702b      	strb	r3, [r5, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	706b      	strb	r3, [r5, #1]
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	b00b      	add	sp, #44	@ 0x2c
 8006d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d44:	4640      	mov	r0, r8
 8006d46:	a34e      	add	r3, pc, #312	@ (adr r3, 8006e80 <_gcvt+0x180>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fe37 	bl	80009c0 <__aeabi_dcmple>
 8006d52:	b160      	cbz	r0, 8006d6e <_gcvt+0x6e>
 8006d54:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8006d58:	3c01      	subs	r4, #1
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	4629      	mov	r1, r5
 8006d62:	4638      	mov	r0, r7
 8006d64:	9602      	str	r6, [sp, #8]
 8006d66:	9400      	str	r4, [sp, #0]
 8006d68:	f7ff ff50 	bl	8006c0c <print_e>
 8006d6c:	e7e6      	b.n	8006d3c <_gcvt+0x3c>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f001 fb22 	bl	80083b8 <_mprec_log10>
 8006d74:	4642      	mov	r2, r8
 8006d76:	464b      	mov	r3, r9
 8006d78:	f7f9 fe22 	bl	80009c0 <__aeabi_dcmple>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1e9      	bne.n	8006d54 <_gcvt+0x54>
 8006d80:	ab09      	add	r3, sp, #36	@ 0x24
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	ab08      	add	r3, sp, #32
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	ab07      	add	r3, sp, #28
 8006d8a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8006d8e:	2302      	movs	r3, #2
 8006d90:	4642      	mov	r2, r8
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	4638      	mov	r0, r7
 8006d96:	464b      	mov	r3, r9
 8006d98:	f000 f9be 	bl	8007118 <_dtoa_r>
 8006d9c:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006da0:	9a07      	ldr	r2, [sp, #28]
 8006da2:	4601      	mov	r1, r0
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d00d      	beq.n	8006dc4 <_gcvt+0xc4>
 8006da8:	462b      	mov	r3, r5
 8006daa:	460f      	mov	r7, r1
 8006dac:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006db0:	9a07      	ldr	r2, [sp, #28]
 8006db2:	b108      	cbz	r0, 8006db8 <_gcvt+0xb8>
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	dc09      	bgt.n	8006dcc <_gcvt+0xcc>
 8006db8:	1928      	adds	r0, r5, r4
 8006dba:	2100      	movs	r1, #0
 8006dbc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8006dc0:	1ac0      	subs	r0, r0, r3
 8006dc2:	e00c      	b.n	8006dde <_gcvt+0xde>
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f917 	bl	8006ff8 <strcpy>
 8006dca:	e7b7      	b.n	8006d3c <_gcvt+0x3c>
 8006dcc:	3a01      	subs	r2, #1
 8006dce:	f803 0b01 	strb.w	r0, [r3], #1
 8006dd2:	9207      	str	r2, [sp, #28]
 8006dd4:	e7e9      	b.n	8006daa <_gcvt+0xaa>
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	f803 cb01 	strb.w	ip, [r3], #1
 8006ddc:	3801      	subs	r0, #1
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	4614      	mov	r4, r2
 8006de2:	dc2e      	bgt.n	8006e42 <_gcvt+0x142>
 8006de4:	b101      	cbz	r1, 8006de8 <_gcvt+0xe8>
 8006de6:	9207      	str	r2, [sp, #28]
 8006de8:	b90e      	cbnz	r6, 8006dee <_gcvt+0xee>
 8006dea:	783a      	ldrb	r2, [r7, #0]
 8006dec:	b332      	cbz	r2, 8006e3c <_gcvt+0x13c>
 8006dee:	42ab      	cmp	r3, r5
 8006df0:	bf04      	itt	eq
 8006df2:	2230      	moveq	r2, #48	@ 0x30
 8006df4:	f803 2b01 	strbeq.w	r2, [r3], #1
 8006df8:	222e      	movs	r2, #46	@ 0x2e
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	f04f 0c00 	mov.w	ip, #0
 8006e00:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	9a07      	ldr	r2, [sp, #28]
 8006e08:	1ad4      	subs	r4, r2, r3
 8006e0a:	42cc      	cmn	r4, r1
 8006e0c:	d421      	bmi.n	8006e52 <_gcvt+0x152>
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	f1c2 0100 	rsb	r1, r2, #0
 8006e14:	bfd4      	ite	le
 8006e16:	460c      	movle	r4, r1
 8006e18:	2400      	movgt	r4, #0
 8006e1a:	3401      	adds	r4, #1
 8006e1c:	4423      	add	r3, r4
 8006e1e:	f1bc 0f00 	cmp.w	ip, #0
 8006e22:	d004      	beq.n	8006e2e <_gcvt+0x12e>
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	bfc8      	it	gt
 8006e28:	2100      	movgt	r1, #0
 8006e2a:	440a      	add	r2, r1
 8006e2c:	9207      	str	r2, [sp, #28]
 8006e2e:	1e7a      	subs	r2, r7, #1
 8006e30:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8006e34:	b109      	cbz	r1, 8006e3a <_gcvt+0x13a>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	dc10      	bgt.n	8006e5c <_gcvt+0x15c>
 8006e3a:	b9e6      	cbnz	r6, 8006e76 <_gcvt+0x176>
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e77c      	b.n	8006d3c <_gcvt+0x3c>
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e48:	dcc5      	bgt.n	8006dd6 <_gcvt+0xd6>
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	d0cc      	beq.n	8006de8 <_gcvt+0xe8>
 8006e4e:	9407      	str	r4, [sp, #28]
 8006e50:	e7ca      	b.n	8006de8 <_gcvt+0xe8>
 8006e52:	f04f 0c01 	mov.w	ip, #1
 8006e56:	f801 ef01 	strb.w	lr, [r1, #1]!
 8006e5a:	e7d6      	b.n	8006e0a <_gcvt+0x10a>
 8006e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e60:	3801      	subs	r0, #1
 8006e62:	e7e5      	b.n	8006e30 <_gcvt+0x130>
 8006e64:	f802 6b01 	strb.w	r6, [r2], #1
 8006e68:	1aa1      	subs	r1, r4, r2
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	dcfa      	bgt.n	8006e64 <_gcvt+0x164>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	bfa8      	it	ge
 8006e72:	181b      	addge	r3, r3, r0
 8006e74:	e7e2      	b.n	8006e3c <_gcvt+0x13c>
 8006e76:	461a      	mov	r2, r3
 8006e78:	2630      	movs	r6, #48	@ 0x30
 8006e7a:	181c      	adds	r4, r3, r0
 8006e7c:	e7f4      	b.n	8006e68 <_gcvt+0x168>
 8006e7e:	bf00      	nop
 8006e80:	eb1c432d 	.word	0xeb1c432d
 8006e84:	3f1a36e2 	.word	0x3f1a36e2

08006e88 <__sflush_r>:
 8006e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8e:	0716      	lsls	r6, r2, #28
 8006e90:	4605      	mov	r5, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	d454      	bmi.n	8006f40 <__sflush_r+0xb8>
 8006e96:	684b      	ldr	r3, [r1, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dc02      	bgt.n	8006ea2 <__sflush_r+0x1a>
 8006e9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	dd48      	ble.n	8006f34 <__sflush_r+0xac>
 8006ea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ea4:	2e00      	cmp	r6, #0
 8006ea6:	d045      	beq.n	8006f34 <__sflush_r+0xac>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006eae:	682f      	ldr	r7, [r5, #0]
 8006eb0:	6a21      	ldr	r1, [r4, #32]
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	d030      	beq.n	8006f18 <__sflush_r+0x90>
 8006eb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	0759      	lsls	r1, r3, #29
 8006ebc:	d505      	bpl.n	8006eca <__sflush_r+0x42>
 8006ebe:	6863      	ldr	r3, [r4, #4]
 8006ec0:	1ad2      	subs	r2, r2, r3
 8006ec2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ec4:	b10b      	cbz	r3, 8006eca <__sflush_r+0x42>
 8006ec6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	4628      	mov	r0, r5
 8006ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ed0:	6a21      	ldr	r1, [r4, #32]
 8006ed2:	47b0      	blx	r6
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	d106      	bne.n	8006ee8 <__sflush_r+0x60>
 8006eda:	6829      	ldr	r1, [r5, #0]
 8006edc:	291d      	cmp	r1, #29
 8006ede:	d82b      	bhi.n	8006f38 <__sflush_r+0xb0>
 8006ee0:	4a28      	ldr	r2, [pc, #160]	@ (8006f84 <__sflush_r+0xfc>)
 8006ee2:	410a      	asrs	r2, r1
 8006ee4:	07d6      	lsls	r6, r2, #31
 8006ee6:	d427      	bmi.n	8006f38 <__sflush_r+0xb0>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	6062      	str	r2, [r4, #4]
 8006eec:	6922      	ldr	r2, [r4, #16]
 8006eee:	04d9      	lsls	r1, r3, #19
 8006ef0:	6022      	str	r2, [r4, #0]
 8006ef2:	d504      	bpl.n	8006efe <__sflush_r+0x76>
 8006ef4:	1c42      	adds	r2, r0, #1
 8006ef6:	d101      	bne.n	8006efc <__sflush_r+0x74>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b903      	cbnz	r3, 8006efe <__sflush_r+0x76>
 8006efc:	6560      	str	r0, [r4, #84]	@ 0x54
 8006efe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f00:	602f      	str	r7, [r5, #0]
 8006f02:	b1b9      	cbz	r1, 8006f34 <__sflush_r+0xac>
 8006f04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	d002      	beq.n	8006f12 <__sflush_r+0x8a>
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f7ff fd87 	bl	8006a20 <_free_r>
 8006f12:	2300      	movs	r3, #0
 8006f14:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f16:	e00d      	b.n	8006f34 <__sflush_r+0xac>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b0      	blx	r6
 8006f1e:	4602      	mov	r2, r0
 8006f20:	1c50      	adds	r0, r2, #1
 8006f22:	d1c9      	bne.n	8006eb8 <__sflush_r+0x30>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0c6      	beq.n	8006eb8 <__sflush_r+0x30>
 8006f2a:	2b1d      	cmp	r3, #29
 8006f2c:	d001      	beq.n	8006f32 <__sflush_r+0xaa>
 8006f2e:	2b16      	cmp	r3, #22
 8006f30:	d11d      	bne.n	8006f6e <__sflush_r+0xe6>
 8006f32:	602f      	str	r7, [r5, #0]
 8006f34:	2000      	movs	r0, #0
 8006f36:	e021      	b.n	8006f7c <__sflush_r+0xf4>
 8006f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	e01a      	b.n	8006f76 <__sflush_r+0xee>
 8006f40:	690f      	ldr	r7, [r1, #16]
 8006f42:	2f00      	cmp	r7, #0
 8006f44:	d0f6      	beq.n	8006f34 <__sflush_r+0xac>
 8006f46:	0793      	lsls	r3, r2, #30
 8006f48:	bf18      	it	ne
 8006f4a:	2300      	movne	r3, #0
 8006f4c:	680e      	ldr	r6, [r1, #0]
 8006f4e:	bf08      	it	eq
 8006f50:	694b      	ldreq	r3, [r1, #20]
 8006f52:	1bf6      	subs	r6, r6, r7
 8006f54:	600f      	str	r7, [r1, #0]
 8006f56:	608b      	str	r3, [r1, #8]
 8006f58:	2e00      	cmp	r6, #0
 8006f5a:	ddeb      	ble.n	8006f34 <__sflush_r+0xac>
 8006f5c:	4633      	mov	r3, r6
 8006f5e:	463a      	mov	r2, r7
 8006f60:	4628      	mov	r0, r5
 8006f62:	6a21      	ldr	r1, [r4, #32]
 8006f64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006f68:	47e0      	blx	ip
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	dc07      	bgt.n	8006f7e <__sflush_r+0xf6>
 8006f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7e:	4407      	add	r7, r0
 8006f80:	1a36      	subs	r6, r6, r0
 8006f82:	e7e9      	b.n	8006f58 <__sflush_r+0xd0>
 8006f84:	dfbffffe 	.word	0xdfbffffe

08006f88 <_fflush_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	690b      	ldr	r3, [r1, #16]
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	b913      	cbnz	r3, 8006f98 <_fflush_r+0x10>
 8006f92:	2500      	movs	r5, #0
 8006f94:	4628      	mov	r0, r5
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	b118      	cbz	r0, 8006fa2 <_fflush_r+0x1a>
 8006f9a:	6a03      	ldr	r3, [r0, #32]
 8006f9c:	b90b      	cbnz	r3, 8006fa2 <_fflush_r+0x1a>
 8006f9e:	f7ff fbe5 	bl	800676c <__sinit>
 8006fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f3      	beq.n	8006f92 <_fflush_r+0xa>
 8006faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fac:	07d0      	lsls	r0, r2, #31
 8006fae:	d404      	bmi.n	8006fba <_fflush_r+0x32>
 8006fb0:	0599      	lsls	r1, r3, #22
 8006fb2:	d402      	bmi.n	8006fba <_fflush_r+0x32>
 8006fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fb6:	f7ff fd22 	bl	80069fe <__retarget_lock_acquire_recursive>
 8006fba:	4628      	mov	r0, r5
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	f7ff ff63 	bl	8006e88 <__sflush_r>
 8006fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	07da      	lsls	r2, r3, #31
 8006fc8:	d4e4      	bmi.n	8006f94 <_fflush_r+0xc>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	059b      	lsls	r3, r3, #22
 8006fce:	d4e1      	bmi.n	8006f94 <_fflush_r+0xc>
 8006fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd2:	f7ff fd15 	bl	8006a00 <__retarget_lock_release_recursive>
 8006fd6:	e7dd      	b.n	8006f94 <_fflush_r+0xc>

08006fd8 <_sbrk_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4d05      	ldr	r5, [pc, #20]	@ (8006ff4 <_sbrk_r+0x1c>)
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa ff46 	bl	8001e74 <_sbrk>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_sbrk_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_sbrk_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20001770 	.word	0x20001770

08006ff8 <strcpy>:
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ffe:	f803 2b01 	strb.w	r2, [r3], #1
 8007002:	2a00      	cmp	r2, #0
 8007004:	d1f9      	bne.n	8006ffa <strcpy+0x2>
 8007006:	4770      	bx	lr

08007008 <quorem>:
 8007008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	6903      	ldr	r3, [r0, #16]
 800700e:	690c      	ldr	r4, [r1, #16]
 8007010:	4607      	mov	r7, r0
 8007012:	42a3      	cmp	r3, r4
 8007014:	db7e      	blt.n	8007114 <quorem+0x10c>
 8007016:	3c01      	subs	r4, #1
 8007018:	00a3      	lsls	r3, r4, #2
 800701a:	f100 0514 	add.w	r5, r0, #20
 800701e:	f101 0814 	add.w	r8, r1, #20
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800702e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007032:	3301      	adds	r3, #1
 8007034:	429a      	cmp	r2, r3
 8007036:	fbb2 f6f3 	udiv	r6, r2, r3
 800703a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800703e:	d32e      	bcc.n	800709e <quorem+0x96>
 8007040:	f04f 0a00 	mov.w	sl, #0
 8007044:	46c4      	mov	ip, r8
 8007046:	46ae      	mov	lr, r5
 8007048:	46d3      	mov	fp, sl
 800704a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800704e:	b298      	uxth	r0, r3
 8007050:	fb06 a000 	mla	r0, r6, r0, sl
 8007054:	0c1b      	lsrs	r3, r3, #16
 8007056:	0c02      	lsrs	r2, r0, #16
 8007058:	fb06 2303 	mla	r3, r6, r3, r2
 800705c:	f8de 2000 	ldr.w	r2, [lr]
 8007060:	b280      	uxth	r0, r0
 8007062:	b292      	uxth	r2, r2
 8007064:	1a12      	subs	r2, r2, r0
 8007066:	445a      	add	r2, fp
 8007068:	f8de 0000 	ldr.w	r0, [lr]
 800706c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007070:	b29b      	uxth	r3, r3
 8007072:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007076:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800707a:	b292      	uxth	r2, r2
 800707c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007080:	45e1      	cmp	r9, ip
 8007082:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007086:	f84e 2b04 	str.w	r2, [lr], #4
 800708a:	d2de      	bcs.n	800704a <quorem+0x42>
 800708c:	9b00      	ldr	r3, [sp, #0]
 800708e:	58eb      	ldr	r3, [r5, r3]
 8007090:	b92b      	cbnz	r3, 800709e <quorem+0x96>
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	3b04      	subs	r3, #4
 8007096:	429d      	cmp	r5, r3
 8007098:	461a      	mov	r2, r3
 800709a:	d32f      	bcc.n	80070fc <quorem+0xf4>
 800709c:	613c      	str	r4, [r7, #16]
 800709e:	4638      	mov	r0, r7
 80070a0:	f001 f882 	bl	80081a8 <__mcmp>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	db25      	blt.n	80070f4 <quorem+0xec>
 80070a8:	4629      	mov	r1, r5
 80070aa:	2000      	movs	r0, #0
 80070ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80070b0:	f8d1 c000 	ldr.w	ip, [r1]
 80070b4:	fa1f fe82 	uxth.w	lr, r2
 80070b8:	fa1f f38c 	uxth.w	r3, ip
 80070bc:	eba3 030e 	sub.w	r3, r3, lr
 80070c0:	4403      	add	r3, r0
 80070c2:	0c12      	lsrs	r2, r2, #16
 80070c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070d2:	45c1      	cmp	r9, r8
 80070d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070d8:	f841 3b04 	str.w	r3, [r1], #4
 80070dc:	d2e6      	bcs.n	80070ac <quorem+0xa4>
 80070de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070e6:	b922      	cbnz	r2, 80070f2 <quorem+0xea>
 80070e8:	3b04      	subs	r3, #4
 80070ea:	429d      	cmp	r5, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	d30b      	bcc.n	8007108 <quorem+0x100>
 80070f0:	613c      	str	r4, [r7, #16]
 80070f2:	3601      	adds	r6, #1
 80070f4:	4630      	mov	r0, r6
 80070f6:	b003      	add	sp, #12
 80070f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	3b04      	subs	r3, #4
 8007100:	2a00      	cmp	r2, #0
 8007102:	d1cb      	bne.n	800709c <quorem+0x94>
 8007104:	3c01      	subs	r4, #1
 8007106:	e7c6      	b.n	8007096 <quorem+0x8e>
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	3b04      	subs	r3, #4
 800710c:	2a00      	cmp	r2, #0
 800710e:	d1ef      	bne.n	80070f0 <quorem+0xe8>
 8007110:	3c01      	subs	r4, #1
 8007112:	e7ea      	b.n	80070ea <quorem+0xe2>
 8007114:	2000      	movs	r0, #0
 8007116:	e7ee      	b.n	80070f6 <quorem+0xee>

08007118 <_dtoa_r>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	69c7      	ldr	r7, [r0, #28]
 8007122:	b097      	sub	sp, #92	@ 0x5c
 8007124:	4683      	mov	fp, r0
 8007126:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800712a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800712c:	b97f      	cbnz	r7, 800714e <_dtoa_r+0x36>
 800712e:	2010      	movs	r0, #16
 8007130:	f000 fdba 	bl	8007ca8 <malloc>
 8007134:	4602      	mov	r2, r0
 8007136:	f8cb 001c 	str.w	r0, [fp, #28]
 800713a:	b920      	cbnz	r0, 8007146 <_dtoa_r+0x2e>
 800713c:	21ef      	movs	r1, #239	@ 0xef
 800713e:	4ba8      	ldr	r3, [pc, #672]	@ (80073e0 <_dtoa_r+0x2c8>)
 8007140:	48a8      	ldr	r0, [pc, #672]	@ (80073e4 <_dtoa_r+0x2cc>)
 8007142:	f001 f955 	bl	80083f0 <__assert_func>
 8007146:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800714a:	6007      	str	r7, [r0, #0]
 800714c:	60c7      	str	r7, [r0, #12]
 800714e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007152:	6819      	ldr	r1, [r3, #0]
 8007154:	b159      	cbz	r1, 800716e <_dtoa_r+0x56>
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	2301      	movs	r3, #1
 800715a:	4093      	lsls	r3, r2
 800715c:	604a      	str	r2, [r1, #4]
 800715e:	608b      	str	r3, [r1, #8]
 8007160:	4658      	mov	r0, fp
 8007162:	f000 fde9 	bl	8007d38 <_Bfree>
 8007166:	2200      	movs	r2, #0
 8007168:	f8db 301c 	ldr.w	r3, [fp, #28]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	1e2b      	subs	r3, r5, #0
 8007170:	bfaf      	iteee	ge
 8007172:	2300      	movge	r3, #0
 8007174:	2201      	movlt	r2, #1
 8007176:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800717a:	9303      	strlt	r3, [sp, #12]
 800717c:	bfa8      	it	ge
 800717e:	6033      	strge	r3, [r6, #0]
 8007180:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007184:	4b98      	ldr	r3, [pc, #608]	@ (80073e8 <_dtoa_r+0x2d0>)
 8007186:	bfb8      	it	lt
 8007188:	6032      	strlt	r2, [r6, #0]
 800718a:	ea33 0308 	bics.w	r3, r3, r8
 800718e:	d112      	bne.n	80071b6 <_dtoa_r+0x9e>
 8007190:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007194:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800719c:	4323      	orrs	r3, r4
 800719e:	f000 8550 	beq.w	8007c42 <_dtoa_r+0xb2a>
 80071a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071a4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80073ec <_dtoa_r+0x2d4>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8552 	beq.w	8007c52 <_dtoa_r+0xb3a>
 80071ae:	f10a 0303 	add.w	r3, sl, #3
 80071b2:	f000 bd4c 	b.w	8007c4e <_dtoa_r+0xb36>
 80071b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80071be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071c2:	2200      	movs	r2, #0
 80071c4:	2300      	movs	r3, #0
 80071c6:	f7f9 fbe7 	bl	8000998 <__aeabi_dcmpeq>
 80071ca:	4607      	mov	r7, r0
 80071cc:	b158      	cbz	r0, 80071e6 <_dtoa_r+0xce>
 80071ce:	2301      	movs	r3, #1
 80071d0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071d6:	b113      	cbz	r3, 80071de <_dtoa_r+0xc6>
 80071d8:	4b85      	ldr	r3, [pc, #532]	@ (80073f0 <_dtoa_r+0x2d8>)
 80071da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80073f4 <_dtoa_r+0x2dc>
 80071e2:	f000 bd36 	b.w	8007c52 <_dtoa_r+0xb3a>
 80071e6:	ab14      	add	r3, sp, #80	@ 0x50
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	ab15      	add	r3, sp, #84	@ 0x54
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4658      	mov	r0, fp
 80071f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071f4:	f001 f888 	bl	8008308 <__d2b>
 80071f8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80071fc:	4681      	mov	r9, r0
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d077      	beq.n	80072f2 <_dtoa_r+0x1da>
 8007202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007208:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007214:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007218:	9712      	str	r7, [sp, #72]	@ 0x48
 800721a:	4619      	mov	r1, r3
 800721c:	2200      	movs	r2, #0
 800721e:	4b76      	ldr	r3, [pc, #472]	@ (80073f8 <_dtoa_r+0x2e0>)
 8007220:	f7f8 ff9a 	bl	8000158 <__aeabi_dsub>
 8007224:	a368      	add	r3, pc, #416	@ (adr r3, 80073c8 <_dtoa_r+0x2b0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f94d 	bl	80004c8 <__aeabi_dmul>
 800722e:	a368      	add	r3, pc, #416	@ (adr r3, 80073d0 <_dtoa_r+0x2b8>)
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f8 ff92 	bl	800015c <__adddf3>
 8007238:	4604      	mov	r4, r0
 800723a:	4630      	mov	r0, r6
 800723c:	460d      	mov	r5, r1
 800723e:	f7f9 f8d9 	bl	80003f4 <__aeabi_i2d>
 8007242:	a365      	add	r3, pc, #404	@ (adr r3, 80073d8 <_dtoa_r+0x2c0>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f93e 	bl	80004c8 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4620      	mov	r0, r4
 8007252:	4629      	mov	r1, r5
 8007254:	f7f8 ff82 	bl	800015c <__adddf3>
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	f7f9 fbce 	bl	80009fc <__aeabi_d2iz>
 8007260:	2200      	movs	r2, #0
 8007262:	4607      	mov	r7, r0
 8007264:	2300      	movs	r3, #0
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fb9f 	bl	80009ac <__aeabi_dcmplt>
 800726e:	b140      	cbz	r0, 8007282 <_dtoa_r+0x16a>
 8007270:	4638      	mov	r0, r7
 8007272:	f7f9 f8bf 	bl	80003f4 <__aeabi_i2d>
 8007276:	4622      	mov	r2, r4
 8007278:	462b      	mov	r3, r5
 800727a:	f7f9 fb8d 	bl	8000998 <__aeabi_dcmpeq>
 800727e:	b900      	cbnz	r0, 8007282 <_dtoa_r+0x16a>
 8007280:	3f01      	subs	r7, #1
 8007282:	2f16      	cmp	r7, #22
 8007284:	d853      	bhi.n	800732e <_dtoa_r+0x216>
 8007286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800728a:	4b5c      	ldr	r3, [pc, #368]	@ (80073fc <_dtoa_r+0x2e4>)
 800728c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	f7f9 fb8a 	bl	80009ac <__aeabi_dcmplt>
 8007298:	2800      	cmp	r0, #0
 800729a:	d04a      	beq.n	8007332 <_dtoa_r+0x21a>
 800729c:	2300      	movs	r3, #0
 800729e:	3f01      	subs	r7, #1
 80072a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072a4:	1b9b      	subs	r3, r3, r6
 80072a6:	1e5a      	subs	r2, r3, #1
 80072a8:	bf46      	itte	mi
 80072aa:	f1c3 0801 	rsbmi	r8, r3, #1
 80072ae:	2300      	movmi	r3, #0
 80072b0:	f04f 0800 	movpl.w	r8, #0
 80072b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80072b6:	bf48      	it	mi
 80072b8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80072ba:	2f00      	cmp	r7, #0
 80072bc:	db3b      	blt.n	8007336 <_dtoa_r+0x21e>
 80072be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c0:	970e      	str	r7, [sp, #56]	@ 0x38
 80072c2:	443b      	add	r3, r7
 80072c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c6:	2300      	movs	r3, #0
 80072c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072cc:	2b09      	cmp	r3, #9
 80072ce:	d866      	bhi.n	800739e <_dtoa_r+0x286>
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	bfc4      	itt	gt
 80072d4:	3b04      	subgt	r3, #4
 80072d6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80072d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072da:	bfc8      	it	gt
 80072dc:	2400      	movgt	r4, #0
 80072de:	f1a3 0302 	sub.w	r3, r3, #2
 80072e2:	bfd8      	it	le
 80072e4:	2401      	movle	r4, #1
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d864      	bhi.n	80073b4 <_dtoa_r+0x29c>
 80072ea:	e8df f003 	tbb	[pc, r3]
 80072ee:	382b      	.short	0x382b
 80072f0:	5636      	.short	0x5636
 80072f2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072f6:	441e      	add	r6, r3
 80072f8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	bfc1      	itttt	gt
 8007300:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007304:	fa08 f803 	lslgt.w	r8, r8, r3
 8007308:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800730c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007310:	bfd6      	itet	le
 8007312:	f1c3 0320 	rsble	r3, r3, #32
 8007316:	ea48 0003 	orrgt.w	r0, r8, r3
 800731a:	fa04 f003 	lslle.w	r0, r4, r3
 800731e:	f7f9 f859 	bl	80003d4 <__aeabi_ui2d>
 8007322:	2201      	movs	r2, #1
 8007324:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007328:	3e01      	subs	r6, #1
 800732a:	9212      	str	r2, [sp, #72]	@ 0x48
 800732c:	e775      	b.n	800721a <_dtoa_r+0x102>
 800732e:	2301      	movs	r3, #1
 8007330:	e7b6      	b.n	80072a0 <_dtoa_r+0x188>
 8007332:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007334:	e7b5      	b.n	80072a2 <_dtoa_r+0x18a>
 8007336:	427b      	negs	r3, r7
 8007338:	930a      	str	r3, [sp, #40]	@ 0x28
 800733a:	2300      	movs	r3, #0
 800733c:	eba8 0807 	sub.w	r8, r8, r7
 8007340:	930e      	str	r3, [sp, #56]	@ 0x38
 8007342:	e7c2      	b.n	80072ca <_dtoa_r+0x1b2>
 8007344:	2300      	movs	r3, #0
 8007346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007348:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800734a:	2b00      	cmp	r3, #0
 800734c:	dc35      	bgt.n	80073ba <_dtoa_r+0x2a2>
 800734e:	2301      	movs	r3, #1
 8007350:	461a      	mov	r2, r3
 8007352:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007356:	9221      	str	r2, [sp, #132]	@ 0x84
 8007358:	e00b      	b.n	8007372 <_dtoa_r+0x25a>
 800735a:	2301      	movs	r3, #1
 800735c:	e7f3      	b.n	8007346 <_dtoa_r+0x22e>
 800735e:	2300      	movs	r3, #0
 8007360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007362:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007364:	18fb      	adds	r3, r7, r3
 8007366:	9308      	str	r3, [sp, #32]
 8007368:	3301      	adds	r3, #1
 800736a:	2b01      	cmp	r3, #1
 800736c:	9307      	str	r3, [sp, #28]
 800736e:	bfb8      	it	lt
 8007370:	2301      	movlt	r3, #1
 8007372:	2100      	movs	r1, #0
 8007374:	2204      	movs	r2, #4
 8007376:	f8db 001c 	ldr.w	r0, [fp, #28]
 800737a:	f102 0514 	add.w	r5, r2, #20
 800737e:	429d      	cmp	r5, r3
 8007380:	d91f      	bls.n	80073c2 <_dtoa_r+0x2aa>
 8007382:	6041      	str	r1, [r0, #4]
 8007384:	4658      	mov	r0, fp
 8007386:	f000 fc97 	bl	8007cb8 <_Balloc>
 800738a:	4682      	mov	sl, r0
 800738c:	2800      	cmp	r0, #0
 800738e:	d139      	bne.n	8007404 <_dtoa_r+0x2ec>
 8007390:	4602      	mov	r2, r0
 8007392:	f240 11af 	movw	r1, #431	@ 0x1af
 8007396:	4b1a      	ldr	r3, [pc, #104]	@ (8007400 <_dtoa_r+0x2e8>)
 8007398:	e6d2      	b.n	8007140 <_dtoa_r+0x28>
 800739a:	2301      	movs	r3, #1
 800739c:	e7e0      	b.n	8007360 <_dtoa_r+0x248>
 800739e:	2401      	movs	r4, #1
 80073a0:	2300      	movs	r3, #0
 80073a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073a4:	9320      	str	r3, [sp, #128]	@ 0x80
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295
 80073aa:	2200      	movs	r2, #0
 80073ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80073b0:	2312      	movs	r3, #18
 80073b2:	e7d0      	b.n	8007356 <_dtoa_r+0x23e>
 80073b4:	2301      	movs	r3, #1
 80073b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073b8:	e7f5      	b.n	80073a6 <_dtoa_r+0x28e>
 80073ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80073c0:	e7d7      	b.n	8007372 <_dtoa_r+0x25a>
 80073c2:	3101      	adds	r1, #1
 80073c4:	0052      	lsls	r2, r2, #1
 80073c6:	e7d8      	b.n	800737a <_dtoa_r+0x262>
 80073c8:	636f4361 	.word	0x636f4361
 80073cc:	3fd287a7 	.word	0x3fd287a7
 80073d0:	8b60c8b3 	.word	0x8b60c8b3
 80073d4:	3fc68a28 	.word	0x3fc68a28
 80073d8:	509f79fb 	.word	0x509f79fb
 80073dc:	3fd34413 	.word	0x3fd34413
 80073e0:	08009609 	.word	0x08009609
 80073e4:	08009620 	.word	0x08009620
 80073e8:	7ff00000 	.word	0x7ff00000
 80073ec:	08009603 	.word	0x08009603
 80073f0:	08009608 	.word	0x08009608
 80073f4:	08009607 	.word	0x08009607
 80073f8:	3ff80000 	.word	0x3ff80000
 80073fc:	08009718 	.word	0x08009718
 8007400:	08009678 	.word	0x08009678
 8007404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007408:	6018      	str	r0, [r3, #0]
 800740a:	9b07      	ldr	r3, [sp, #28]
 800740c:	2b0e      	cmp	r3, #14
 800740e:	f200 80a4 	bhi.w	800755a <_dtoa_r+0x442>
 8007412:	2c00      	cmp	r4, #0
 8007414:	f000 80a1 	beq.w	800755a <_dtoa_r+0x442>
 8007418:	2f00      	cmp	r7, #0
 800741a:	dd33      	ble.n	8007484 <_dtoa_r+0x36c>
 800741c:	4b86      	ldr	r3, [pc, #536]	@ (8007638 <_dtoa_r+0x520>)
 800741e:	f007 020f 	and.w	r2, r7, #15
 8007422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007426:	05f8      	lsls	r0, r7, #23
 8007428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800742c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007434:	d516      	bpl.n	8007464 <_dtoa_r+0x34c>
 8007436:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800743a:	4b80      	ldr	r3, [pc, #512]	@ (800763c <_dtoa_r+0x524>)
 800743c:	2603      	movs	r6, #3
 800743e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007442:	f7f9 f96b 	bl	800071c <__aeabi_ddiv>
 8007446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800744a:	f004 040f 	and.w	r4, r4, #15
 800744e:	4d7b      	ldr	r5, [pc, #492]	@ (800763c <_dtoa_r+0x524>)
 8007450:	b954      	cbnz	r4, 8007468 <_dtoa_r+0x350>
 8007452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800745a:	f7f9 f95f 	bl	800071c <__aeabi_ddiv>
 800745e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007462:	e028      	b.n	80074b6 <_dtoa_r+0x39e>
 8007464:	2602      	movs	r6, #2
 8007466:	e7f2      	b.n	800744e <_dtoa_r+0x336>
 8007468:	07e1      	lsls	r1, r4, #31
 800746a:	d508      	bpl.n	800747e <_dtoa_r+0x366>
 800746c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007474:	f7f9 f828 	bl	80004c8 <__aeabi_dmul>
 8007478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800747c:	3601      	adds	r6, #1
 800747e:	1064      	asrs	r4, r4, #1
 8007480:	3508      	adds	r5, #8
 8007482:	e7e5      	b.n	8007450 <_dtoa_r+0x338>
 8007484:	f000 80d2 	beq.w	800762c <_dtoa_r+0x514>
 8007488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800748c:	427c      	negs	r4, r7
 800748e:	4b6a      	ldr	r3, [pc, #424]	@ (8007638 <_dtoa_r+0x520>)
 8007490:	f004 020f 	and.w	r2, r4, #15
 8007494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f9 f814 	bl	80004c8 <__aeabi_dmul>
 80074a0:	2602      	movs	r6, #2
 80074a2:	2300      	movs	r3, #0
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	4d64      	ldr	r5, [pc, #400]	@ (800763c <_dtoa_r+0x524>)
 80074aa:	1124      	asrs	r4, r4, #4
 80074ac:	2c00      	cmp	r4, #0
 80074ae:	f040 80b2 	bne.w	8007616 <_dtoa_r+0x4fe>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d3      	bne.n	800745e <_dtoa_r+0x346>
 80074b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80b7 	beq.w	8007630 <_dtoa_r+0x518>
 80074c2:	2200      	movs	r2, #0
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	4b5d      	ldr	r3, [pc, #372]	@ (8007640 <_dtoa_r+0x528>)
 80074ca:	f7f9 fa6f 	bl	80009ac <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f000 80ae 	beq.w	8007630 <_dtoa_r+0x518>
 80074d4:	9b07      	ldr	r3, [sp, #28]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80aa 	beq.w	8007630 <_dtoa_r+0x518>
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd37      	ble.n	8007552 <_dtoa_r+0x43a>
 80074e2:	1e7b      	subs	r3, r7, #1
 80074e4:	4620      	mov	r0, r4
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	2200      	movs	r2, #0
 80074ea:	4629      	mov	r1, r5
 80074ec:	4b55      	ldr	r3, [pc, #340]	@ (8007644 <_dtoa_r+0x52c>)
 80074ee:	f7f8 ffeb 	bl	80004c8 <__aeabi_dmul>
 80074f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f6:	9c08      	ldr	r4, [sp, #32]
 80074f8:	3601      	adds	r6, #1
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7f8 ff7a 	bl	80003f4 <__aeabi_i2d>
 8007500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007504:	f7f8 ffe0 	bl	80004c8 <__aeabi_dmul>
 8007508:	2200      	movs	r2, #0
 800750a:	4b4f      	ldr	r3, [pc, #316]	@ (8007648 <_dtoa_r+0x530>)
 800750c:	f7f8 fe26 	bl	800015c <__adddf3>
 8007510:	4605      	mov	r5, r0
 8007512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007516:	2c00      	cmp	r4, #0
 8007518:	f040 809a 	bne.w	8007650 <_dtoa_r+0x538>
 800751c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007520:	2200      	movs	r2, #0
 8007522:	4b4a      	ldr	r3, [pc, #296]	@ (800764c <_dtoa_r+0x534>)
 8007524:	f7f8 fe18 	bl	8000158 <__aeabi_dsub>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007530:	462a      	mov	r2, r5
 8007532:	4633      	mov	r3, r6
 8007534:	f7f9 fa58 	bl	80009e8 <__aeabi_dcmpgt>
 8007538:	2800      	cmp	r0, #0
 800753a:	f040 828e 	bne.w	8007a5a <_dtoa_r+0x942>
 800753e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007542:	462a      	mov	r2, r5
 8007544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007548:	f7f9 fa30 	bl	80009ac <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f040 8127 	bne.w	80077a0 <_dtoa_r+0x688>
 8007552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800755a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800755c:	2b00      	cmp	r3, #0
 800755e:	f2c0 8163 	blt.w	8007828 <_dtoa_r+0x710>
 8007562:	2f0e      	cmp	r7, #14
 8007564:	f300 8160 	bgt.w	8007828 <_dtoa_r+0x710>
 8007568:	4b33      	ldr	r3, [pc, #204]	@ (8007638 <_dtoa_r+0x520>)
 800756a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800756e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007572:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007578:	2b00      	cmp	r3, #0
 800757a:	da03      	bge.n	8007584 <_dtoa_r+0x46c>
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f340 8100 	ble.w	8007784 <_dtoa_r+0x66c>
 8007584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007588:	4656      	mov	r6, sl
 800758a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 f8c3 	bl	800071c <__aeabi_ddiv>
 8007596:	f7f9 fa31 	bl	80009fc <__aeabi_d2iz>
 800759a:	4680      	mov	r8, r0
 800759c:	f7f8 ff2a 	bl	80003f4 <__aeabi_i2d>
 80075a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075a4:	f7f8 ff90 	bl	80004c8 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 fdd2 	bl	8000158 <__aeabi_dsub>
 80075b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075b8:	9d07      	ldr	r5, [sp, #28]
 80075ba:	f806 4b01 	strb.w	r4, [r6], #1
 80075be:	eba6 040a 	sub.w	r4, r6, sl
 80075c2:	42a5      	cmp	r5, r4
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	f040 8116 	bne.w	80077f8 <_dtoa_r+0x6e0>
 80075cc:	f7f8 fdc6 	bl	800015c <__adddf3>
 80075d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	f7f9 fa06 	bl	80009e8 <__aeabi_dcmpgt>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f040 80f8 	bne.w	80077d2 <_dtoa_r+0x6ba>
 80075e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f9 f9d5 	bl	8000998 <__aeabi_dcmpeq>
 80075ee:	b118      	cbz	r0, 80075f8 <_dtoa_r+0x4e0>
 80075f0:	f018 0f01 	tst.w	r8, #1
 80075f4:	f040 80ed 	bne.w	80077d2 <_dtoa_r+0x6ba>
 80075f8:	4649      	mov	r1, r9
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fb9c 	bl	8007d38 <_Bfree>
 8007600:	2300      	movs	r3, #0
 8007602:	7033      	strb	r3, [r6, #0]
 8007604:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007606:	3701      	adds	r7, #1
 8007608:	601f      	str	r7, [r3, #0]
 800760a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8320 	beq.w	8007c52 <_dtoa_r+0xb3a>
 8007612:	601e      	str	r6, [r3, #0]
 8007614:	e31d      	b.n	8007c52 <_dtoa_r+0xb3a>
 8007616:	07e2      	lsls	r2, r4, #31
 8007618:	d505      	bpl.n	8007626 <_dtoa_r+0x50e>
 800761a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800761e:	f7f8 ff53 	bl	80004c8 <__aeabi_dmul>
 8007622:	2301      	movs	r3, #1
 8007624:	3601      	adds	r6, #1
 8007626:	1064      	asrs	r4, r4, #1
 8007628:	3508      	adds	r5, #8
 800762a:	e73f      	b.n	80074ac <_dtoa_r+0x394>
 800762c:	2602      	movs	r6, #2
 800762e:	e742      	b.n	80074b6 <_dtoa_r+0x39e>
 8007630:	9c07      	ldr	r4, [sp, #28]
 8007632:	9704      	str	r7, [sp, #16]
 8007634:	e761      	b.n	80074fa <_dtoa_r+0x3e2>
 8007636:	bf00      	nop
 8007638:	08009718 	.word	0x08009718
 800763c:	080096f0 	.word	0x080096f0
 8007640:	3ff00000 	.word	0x3ff00000
 8007644:	40240000 	.word	0x40240000
 8007648:	401c0000 	.word	0x401c0000
 800764c:	40140000 	.word	0x40140000
 8007650:	4b70      	ldr	r3, [pc, #448]	@ (8007814 <_dtoa_r+0x6fc>)
 8007652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007654:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800765c:	4454      	add	r4, sl
 800765e:	2900      	cmp	r1, #0
 8007660:	d045      	beq.n	80076ee <_dtoa_r+0x5d6>
 8007662:	2000      	movs	r0, #0
 8007664:	496c      	ldr	r1, [pc, #432]	@ (8007818 <_dtoa_r+0x700>)
 8007666:	f7f9 f859 	bl	800071c <__aeabi_ddiv>
 800766a:	4633      	mov	r3, r6
 800766c:	462a      	mov	r2, r5
 800766e:	f7f8 fd73 	bl	8000158 <__aeabi_dsub>
 8007672:	4656      	mov	r6, sl
 8007674:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767c:	f7f9 f9be 	bl	80009fc <__aeabi_d2iz>
 8007680:	4605      	mov	r5, r0
 8007682:	f7f8 feb7 	bl	80003f4 <__aeabi_i2d>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768e:	f7f8 fd63 	bl	8000158 <__aeabi_dsub>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	3530      	adds	r5, #48	@ 0x30
 8007698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800769c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076a0:	f806 5b01 	strb.w	r5, [r6], #1
 80076a4:	f7f9 f982 	bl	80009ac <__aeabi_dcmplt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d163      	bne.n	8007774 <_dtoa_r+0x65c>
 80076ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b0:	2000      	movs	r0, #0
 80076b2:	495a      	ldr	r1, [pc, #360]	@ (800781c <_dtoa_r+0x704>)
 80076b4:	f7f8 fd50 	bl	8000158 <__aeabi_dsub>
 80076b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076bc:	f7f9 f976 	bl	80009ac <__aeabi_dcmplt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f040 8087 	bne.w	80077d4 <_dtoa_r+0x6bc>
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	f43f af43 	beq.w	8007552 <_dtoa_r+0x43a>
 80076cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b53      	ldr	r3, [pc, #332]	@ (8007820 <_dtoa_r+0x708>)
 80076d4:	f7f8 fef8 	bl	80004c8 <__aeabi_dmul>
 80076d8:	2200      	movs	r2, #0
 80076da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007820 <_dtoa_r+0x708>)
 80076e4:	f7f8 fef0 	bl	80004c8 <__aeabi_dmul>
 80076e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ec:	e7c4      	b.n	8007678 <_dtoa_r+0x560>
 80076ee:	4631      	mov	r1, r6
 80076f0:	4628      	mov	r0, r5
 80076f2:	f7f8 fee9 	bl	80004c8 <__aeabi_dmul>
 80076f6:	4656      	mov	r6, sl
 80076f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	f7f9 f97b 	bl	80009fc <__aeabi_d2iz>
 8007706:	4605      	mov	r5, r0
 8007708:	f7f8 fe74 	bl	80003f4 <__aeabi_i2d>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007714:	f7f8 fd20 	bl	8000158 <__aeabi_dsub>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	3530      	adds	r5, #48	@ 0x30
 800771e:	f806 5b01 	strb.w	r5, [r6], #1
 8007722:	42a6      	cmp	r6, r4
 8007724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	d124      	bne.n	8007778 <_dtoa_r+0x660>
 800772e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007732:	4b39      	ldr	r3, [pc, #228]	@ (8007818 <_dtoa_r+0x700>)
 8007734:	f7f8 fd12 	bl	800015c <__adddf3>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007740:	f7f9 f952 	bl	80009e8 <__aeabi_dcmpgt>
 8007744:	2800      	cmp	r0, #0
 8007746:	d145      	bne.n	80077d4 <_dtoa_r+0x6bc>
 8007748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800774c:	2000      	movs	r0, #0
 800774e:	4932      	ldr	r1, [pc, #200]	@ (8007818 <_dtoa_r+0x700>)
 8007750:	f7f8 fd02 	bl	8000158 <__aeabi_dsub>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800775c:	f7f9 f926 	bl	80009ac <__aeabi_dcmplt>
 8007760:	2800      	cmp	r0, #0
 8007762:	f43f aef6 	beq.w	8007552 <_dtoa_r+0x43a>
 8007766:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007768:	1e73      	subs	r3, r6, #1
 800776a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800776c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007770:	2b30      	cmp	r3, #48	@ 0x30
 8007772:	d0f8      	beq.n	8007766 <_dtoa_r+0x64e>
 8007774:	9f04      	ldr	r7, [sp, #16]
 8007776:	e73f      	b.n	80075f8 <_dtoa_r+0x4e0>
 8007778:	4b29      	ldr	r3, [pc, #164]	@ (8007820 <_dtoa_r+0x708>)
 800777a:	f7f8 fea5 	bl	80004c8 <__aeabi_dmul>
 800777e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007782:	e7bc      	b.n	80076fe <_dtoa_r+0x5e6>
 8007784:	d10c      	bne.n	80077a0 <_dtoa_r+0x688>
 8007786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800778a:	2200      	movs	r2, #0
 800778c:	4b25      	ldr	r3, [pc, #148]	@ (8007824 <_dtoa_r+0x70c>)
 800778e:	f7f8 fe9b 	bl	80004c8 <__aeabi_dmul>
 8007792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007796:	f7f9 f91d 	bl	80009d4 <__aeabi_dcmpge>
 800779a:	2800      	cmp	r0, #0
 800779c:	f000 815b 	beq.w	8007a56 <_dtoa_r+0x93e>
 80077a0:	2400      	movs	r4, #0
 80077a2:	4625      	mov	r5, r4
 80077a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077a6:	4656      	mov	r6, sl
 80077a8:	43db      	mvns	r3, r3
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	2700      	movs	r7, #0
 80077ae:	4621      	mov	r1, r4
 80077b0:	4658      	mov	r0, fp
 80077b2:	f000 fac1 	bl	8007d38 <_Bfree>
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	d0dc      	beq.n	8007774 <_dtoa_r+0x65c>
 80077ba:	b12f      	cbz	r7, 80077c8 <_dtoa_r+0x6b0>
 80077bc:	42af      	cmp	r7, r5
 80077be:	d003      	beq.n	80077c8 <_dtoa_r+0x6b0>
 80077c0:	4639      	mov	r1, r7
 80077c2:	4658      	mov	r0, fp
 80077c4:	f000 fab8 	bl	8007d38 <_Bfree>
 80077c8:	4629      	mov	r1, r5
 80077ca:	4658      	mov	r0, fp
 80077cc:	f000 fab4 	bl	8007d38 <_Bfree>
 80077d0:	e7d0      	b.n	8007774 <_dtoa_r+0x65c>
 80077d2:	9704      	str	r7, [sp, #16]
 80077d4:	4633      	mov	r3, r6
 80077d6:	461e      	mov	r6, r3
 80077d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077dc:	2a39      	cmp	r2, #57	@ 0x39
 80077de:	d107      	bne.n	80077f0 <_dtoa_r+0x6d8>
 80077e0:	459a      	cmp	sl, r3
 80077e2:	d1f8      	bne.n	80077d6 <_dtoa_r+0x6be>
 80077e4:	9a04      	ldr	r2, [sp, #16]
 80077e6:	3201      	adds	r2, #1
 80077e8:	9204      	str	r2, [sp, #16]
 80077ea:	2230      	movs	r2, #48	@ 0x30
 80077ec:	f88a 2000 	strb.w	r2, [sl]
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	3201      	adds	r2, #1
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e7bd      	b.n	8007774 <_dtoa_r+0x65c>
 80077f8:	2200      	movs	r2, #0
 80077fa:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <_dtoa_r+0x708>)
 80077fc:	f7f8 fe64 	bl	80004c8 <__aeabi_dmul>
 8007800:	2200      	movs	r2, #0
 8007802:	2300      	movs	r3, #0
 8007804:	4604      	mov	r4, r0
 8007806:	460d      	mov	r5, r1
 8007808:	f7f9 f8c6 	bl	8000998 <__aeabi_dcmpeq>
 800780c:	2800      	cmp	r0, #0
 800780e:	f43f aebc 	beq.w	800758a <_dtoa_r+0x472>
 8007812:	e6f1      	b.n	80075f8 <_dtoa_r+0x4e0>
 8007814:	08009718 	.word	0x08009718
 8007818:	3fe00000 	.word	0x3fe00000
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	40240000 	.word	0x40240000
 8007824:	40140000 	.word	0x40140000
 8007828:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800782a:	2a00      	cmp	r2, #0
 800782c:	f000 80db 	beq.w	80079e6 <_dtoa_r+0x8ce>
 8007830:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007832:	2a01      	cmp	r2, #1
 8007834:	f300 80bf 	bgt.w	80079b6 <_dtoa_r+0x89e>
 8007838:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800783a:	2a00      	cmp	r2, #0
 800783c:	f000 80b7 	beq.w	80079ae <_dtoa_r+0x896>
 8007840:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007844:	4646      	mov	r6, r8
 8007846:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800784a:	2101      	movs	r1, #1
 800784c:	441a      	add	r2, r3
 800784e:	4658      	mov	r0, fp
 8007850:	4498      	add	r8, r3
 8007852:	9209      	str	r2, [sp, #36]	@ 0x24
 8007854:	f000 fb24 	bl	8007ea0 <__i2b>
 8007858:	4605      	mov	r5, r0
 800785a:	b15e      	cbz	r6, 8007874 <_dtoa_r+0x75c>
 800785c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd08      	ble.n	8007874 <_dtoa_r+0x75c>
 8007862:	42b3      	cmp	r3, r6
 8007864:	bfa8      	it	ge
 8007866:	4633      	movge	r3, r6
 8007868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800786a:	eba8 0803 	sub.w	r8, r8, r3
 800786e:	1af6      	subs	r6, r6, r3
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	9309      	str	r3, [sp, #36]	@ 0x24
 8007874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007876:	b1f3      	cbz	r3, 80078b6 <_dtoa_r+0x79e>
 8007878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 80b7 	beq.w	80079ee <_dtoa_r+0x8d6>
 8007880:	b18c      	cbz	r4, 80078a6 <_dtoa_r+0x78e>
 8007882:	4629      	mov	r1, r5
 8007884:	4622      	mov	r2, r4
 8007886:	4658      	mov	r0, fp
 8007888:	f000 fbc8 	bl	800801c <__pow5mult>
 800788c:	464a      	mov	r2, r9
 800788e:	4601      	mov	r1, r0
 8007890:	4605      	mov	r5, r0
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fb1a 	bl	8007ecc <__multiply>
 8007898:	4649      	mov	r1, r9
 800789a:	9004      	str	r0, [sp, #16]
 800789c:	4658      	mov	r0, fp
 800789e:	f000 fa4b 	bl	8007d38 <_Bfree>
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	4699      	mov	r9, r3
 80078a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078a8:	1b1a      	subs	r2, r3, r4
 80078aa:	d004      	beq.n	80078b6 <_dtoa_r+0x79e>
 80078ac:	4649      	mov	r1, r9
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 fbb4 	bl	800801c <__pow5mult>
 80078b4:	4681      	mov	r9, r0
 80078b6:	2101      	movs	r1, #1
 80078b8:	4658      	mov	r0, fp
 80078ba:	f000 faf1 	bl	8007ea0 <__i2b>
 80078be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c0:	4604      	mov	r4, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 81c9 	beq.w	8007c5a <_dtoa_r+0xb42>
 80078c8:	461a      	mov	r2, r3
 80078ca:	4601      	mov	r1, r0
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fba5 	bl	800801c <__pow5mult>
 80078d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078d4:	4604      	mov	r4, r0
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	f300 808f 	bgt.w	80079fa <_dtoa_r+0x8e2>
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 8087 	bne.w	80079f2 <_dtoa_r+0x8da>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 8083 	bne.w	80079f6 <_dtoa_r+0x8de>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078f6:	0d1b      	lsrs	r3, r3, #20
 80078f8:	051b      	lsls	r3, r3, #20
 80078fa:	b12b      	cbz	r3, 8007908 <_dtoa_r+0x7f0>
 80078fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fe:	f108 0801 	add.w	r8, r8, #1
 8007902:	3301      	adds	r3, #1
 8007904:	9309      	str	r3, [sp, #36]	@ 0x24
 8007906:	2301      	movs	r3, #1
 8007908:	930a      	str	r3, [sp, #40]	@ 0x28
 800790a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 81aa 	beq.w	8007c66 <_dtoa_r+0xb4e>
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007918:	6918      	ldr	r0, [r3, #16]
 800791a:	f000 fa75 	bl	8007e08 <__hi0bits>
 800791e:	f1c0 0020 	rsb	r0, r0, #32
 8007922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007924:	4418      	add	r0, r3
 8007926:	f010 001f 	ands.w	r0, r0, #31
 800792a:	d071      	beq.n	8007a10 <_dtoa_r+0x8f8>
 800792c:	f1c0 0320 	rsb	r3, r0, #32
 8007930:	2b04      	cmp	r3, #4
 8007932:	dd65      	ble.n	8007a00 <_dtoa_r+0x8e8>
 8007934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007936:	f1c0 001c 	rsb	r0, r0, #28
 800793a:	4403      	add	r3, r0
 800793c:	4480      	add	r8, r0
 800793e:	4406      	add	r6, r0
 8007940:	9309      	str	r3, [sp, #36]	@ 0x24
 8007942:	f1b8 0f00 	cmp.w	r8, #0
 8007946:	dd05      	ble.n	8007954 <_dtoa_r+0x83c>
 8007948:	4649      	mov	r1, r9
 800794a:	4642      	mov	r2, r8
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fbbf 	bl	80080d0 <__lshift>
 8007952:	4681      	mov	r9, r0
 8007954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	dd05      	ble.n	8007966 <_dtoa_r+0x84e>
 800795a:	4621      	mov	r1, r4
 800795c:	461a      	mov	r2, r3
 800795e:	4658      	mov	r0, fp
 8007960:	f000 fbb6 	bl	80080d0 <__lshift>
 8007964:	4604      	mov	r4, r0
 8007966:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d053      	beq.n	8007a14 <_dtoa_r+0x8fc>
 800796c:	4621      	mov	r1, r4
 800796e:	4648      	mov	r0, r9
 8007970:	f000 fc1a 	bl	80081a8 <__mcmp>
 8007974:	2800      	cmp	r0, #0
 8007976:	da4d      	bge.n	8007a14 <_dtoa_r+0x8fc>
 8007978:	1e7b      	subs	r3, r7, #1
 800797a:	4649      	mov	r1, r9
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	220a      	movs	r2, #10
 8007980:	2300      	movs	r3, #0
 8007982:	4658      	mov	r0, fp
 8007984:	f000 f9fa 	bl	8007d7c <__multadd>
 8007988:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798a:	4681      	mov	r9, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 816c 	beq.w	8007c6a <_dtoa_r+0xb52>
 8007992:	2300      	movs	r3, #0
 8007994:	4629      	mov	r1, r5
 8007996:	220a      	movs	r2, #10
 8007998:	4658      	mov	r0, fp
 800799a:	f000 f9ef 	bl	8007d7c <__multadd>
 800799e:	9b08      	ldr	r3, [sp, #32]
 80079a0:	4605      	mov	r5, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dc61      	bgt.n	8007a6a <_dtoa_r+0x952>
 80079a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	dc3b      	bgt.n	8007a24 <_dtoa_r+0x90c>
 80079ac:	e05d      	b.n	8007a6a <_dtoa_r+0x952>
 80079ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079b0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079b4:	e746      	b.n	8007844 <_dtoa_r+0x72c>
 80079b6:	9b07      	ldr	r3, [sp, #28]
 80079b8:	1e5c      	subs	r4, r3, #1
 80079ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079bc:	42a3      	cmp	r3, r4
 80079be:	bfbf      	itttt	lt
 80079c0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079c2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80079c4:	1ae3      	sublt	r3, r4, r3
 80079c6:	18d2      	addlt	r2, r2, r3
 80079c8:	bfa8      	it	ge
 80079ca:	1b1c      	subge	r4, r3, r4
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	bfbe      	ittt	lt
 80079d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079d2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80079d4:	2400      	movlt	r4, #0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb5      	itete	lt
 80079da:	eba8 0603 	sublt.w	r6, r8, r3
 80079de:	4646      	movge	r6, r8
 80079e0:	2300      	movlt	r3, #0
 80079e2:	9b07      	ldrge	r3, [sp, #28]
 80079e4:	e730      	b.n	8007848 <_dtoa_r+0x730>
 80079e6:	4646      	mov	r6, r8
 80079e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079ec:	e735      	b.n	800785a <_dtoa_r+0x742>
 80079ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079f0:	e75c      	b.n	80078ac <_dtoa_r+0x794>
 80079f2:	2300      	movs	r3, #0
 80079f4:	e788      	b.n	8007908 <_dtoa_r+0x7f0>
 80079f6:	9b02      	ldr	r3, [sp, #8]
 80079f8:	e786      	b.n	8007908 <_dtoa_r+0x7f0>
 80079fa:	2300      	movs	r3, #0
 80079fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80079fe:	e788      	b.n	8007912 <_dtoa_r+0x7fa>
 8007a00:	d09f      	beq.n	8007942 <_dtoa_r+0x82a>
 8007a02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a04:	331c      	adds	r3, #28
 8007a06:	441a      	add	r2, r3
 8007a08:	4498      	add	r8, r3
 8007a0a:	441e      	add	r6, r3
 8007a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a0e:	e798      	b.n	8007942 <_dtoa_r+0x82a>
 8007a10:	4603      	mov	r3, r0
 8007a12:	e7f6      	b.n	8007a02 <_dtoa_r+0x8ea>
 8007a14:	9b07      	ldr	r3, [sp, #28]
 8007a16:	9704      	str	r7, [sp, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dc20      	bgt.n	8007a5e <_dtoa_r+0x946>
 8007a1c:	9308      	str	r3, [sp, #32]
 8007a1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	dd1e      	ble.n	8007a62 <_dtoa_r+0x94a>
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f47f aebc 	bne.w	80077a4 <_dtoa_r+0x68c>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	2205      	movs	r2, #5
 8007a30:	4658      	mov	r0, fp
 8007a32:	f000 f9a3 	bl	8007d7c <__multadd>
 8007a36:	4601      	mov	r1, r0
 8007a38:	4604      	mov	r4, r0
 8007a3a:	4648      	mov	r0, r9
 8007a3c:	f000 fbb4 	bl	80081a8 <__mcmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	f77f aeaf 	ble.w	80077a4 <_dtoa_r+0x68c>
 8007a46:	2331      	movs	r3, #49	@ 0x31
 8007a48:	4656      	mov	r6, sl
 8007a4a:	f806 3b01 	strb.w	r3, [r6], #1
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	3301      	adds	r3, #1
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	e6aa      	b.n	80077ac <_dtoa_r+0x694>
 8007a56:	9c07      	ldr	r4, [sp, #28]
 8007a58:	9704      	str	r7, [sp, #16]
 8007a5a:	4625      	mov	r5, r4
 8007a5c:	e7f3      	b.n	8007a46 <_dtoa_r+0x92e>
 8007a5e:	9b07      	ldr	r3, [sp, #28]
 8007a60:	9308      	str	r3, [sp, #32]
 8007a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8104 	beq.w	8007c72 <_dtoa_r+0xb5a>
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	dd05      	ble.n	8007a7a <_dtoa_r+0x962>
 8007a6e:	4629      	mov	r1, r5
 8007a70:	4632      	mov	r2, r6
 8007a72:	4658      	mov	r0, fp
 8007a74:	f000 fb2c 	bl	80080d0 <__lshift>
 8007a78:	4605      	mov	r5, r0
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d05a      	beq.n	8007b36 <_dtoa_r+0xa1e>
 8007a80:	4658      	mov	r0, fp
 8007a82:	6869      	ldr	r1, [r5, #4]
 8007a84:	f000 f918 	bl	8007cb8 <_Balloc>
 8007a88:	4606      	mov	r6, r0
 8007a8a:	b928      	cbnz	r0, 8007a98 <_dtoa_r+0x980>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a92:	4b83      	ldr	r3, [pc, #524]	@ (8007ca0 <_dtoa_r+0xb88>)
 8007a94:	f7ff bb54 	b.w	8007140 <_dtoa_r+0x28>
 8007a98:	692a      	ldr	r2, [r5, #16]
 8007a9a:	f105 010c 	add.w	r1, r5, #12
 8007a9e:	3202      	adds	r2, #2
 8007aa0:	0092      	lsls	r2, r2, #2
 8007aa2:	300c      	adds	r0, #12
 8007aa4:	f7fe ffad 	bl	8006a02 <memcpy>
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 fb0f 	bl	80080d0 <__lshift>
 8007ab2:	462f      	mov	r7, r5
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	f10a 0301 	add.w	r3, sl, #1
 8007aba:	9307      	str	r3, [sp, #28]
 8007abc:	9b08      	ldr	r3, [sp, #32]
 8007abe:	4453      	add	r3, sl
 8007ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ac2:	9b02      	ldr	r3, [sp, #8]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aca:	9b07      	ldr	r3, [sp, #28]
 8007acc:	4621      	mov	r1, r4
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	f7ff fa98 	bl	8007008 <quorem>
 8007ad8:	4639      	mov	r1, r7
 8007ada:	9008      	str	r0, [sp, #32]
 8007adc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ae0:	4648      	mov	r0, r9
 8007ae2:	f000 fb61 	bl	80081a8 <__mcmp>
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007aea:	4621      	mov	r1, r4
 8007aec:	4658      	mov	r0, fp
 8007aee:	f000 fb77 	bl	80081e0 <__mdiff>
 8007af2:	68c2      	ldr	r2, [r0, #12]
 8007af4:	4606      	mov	r6, r0
 8007af6:	bb02      	cbnz	r2, 8007b3a <_dtoa_r+0xa22>
 8007af8:	4601      	mov	r1, r0
 8007afa:	4648      	mov	r0, r9
 8007afc:	f000 fb54 	bl	80081a8 <__mcmp>
 8007b00:	4602      	mov	r2, r0
 8007b02:	4631      	mov	r1, r6
 8007b04:	4658      	mov	r0, fp
 8007b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b08:	f000 f916 	bl	8007d38 <_Bfree>
 8007b0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b10:	9e07      	ldr	r6, [sp, #28]
 8007b12:	ea43 0102 	orr.w	r1, r3, r2
 8007b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b18:	4319      	orrs	r1, r3
 8007b1a:	d110      	bne.n	8007b3e <_dtoa_r+0xa26>
 8007b1c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b20:	d029      	beq.n	8007b76 <_dtoa_r+0xa5e>
 8007b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dd02      	ble.n	8007b2e <_dtoa_r+0xa16>
 8007b28:	9b08      	ldr	r3, [sp, #32]
 8007b2a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	f883 8000 	strb.w	r8, [r3]
 8007b34:	e63b      	b.n	80077ae <_dtoa_r+0x696>
 8007b36:	4628      	mov	r0, r5
 8007b38:	e7bb      	b.n	8007ab2 <_dtoa_r+0x99a>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e7e1      	b.n	8007b02 <_dtoa_r+0x9ea>
 8007b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	db04      	blt.n	8007b4e <_dtoa_r+0xa36>
 8007b44:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007b46:	430b      	orrs	r3, r1
 8007b48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	d120      	bne.n	8007b90 <_dtoa_r+0xa78>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	dded      	ble.n	8007b2e <_dtoa_r+0xa16>
 8007b52:	4649      	mov	r1, r9
 8007b54:	2201      	movs	r2, #1
 8007b56:	4658      	mov	r0, fp
 8007b58:	f000 faba 	bl	80080d0 <__lshift>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4681      	mov	r9, r0
 8007b60:	f000 fb22 	bl	80081a8 <__mcmp>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	dc03      	bgt.n	8007b70 <_dtoa_r+0xa58>
 8007b68:	d1e1      	bne.n	8007b2e <_dtoa_r+0xa16>
 8007b6a:	f018 0f01 	tst.w	r8, #1
 8007b6e:	d0de      	beq.n	8007b2e <_dtoa_r+0xa16>
 8007b70:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b74:	d1d8      	bne.n	8007b28 <_dtoa_r+0xa10>
 8007b76:	2339      	movs	r3, #57	@ 0x39
 8007b78:	9a02      	ldr	r2, [sp, #8]
 8007b7a:	7013      	strb	r3, [r2, #0]
 8007b7c:	4633      	mov	r3, r6
 8007b7e:	461e      	mov	r6, r3
 8007b80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	2a39      	cmp	r2, #57	@ 0x39
 8007b88:	d052      	beq.n	8007c30 <_dtoa_r+0xb18>
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e60e      	b.n	80077ae <_dtoa_r+0x696>
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	dd07      	ble.n	8007ba4 <_dtoa_r+0xa8c>
 8007b94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b98:	d0ed      	beq.n	8007b76 <_dtoa_r+0xa5e>
 8007b9a:	9a02      	ldr	r2, [sp, #8]
 8007b9c:	f108 0301 	add.w	r3, r8, #1
 8007ba0:	7013      	strb	r3, [r2, #0]
 8007ba2:	e604      	b.n	80077ae <_dtoa_r+0x696>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	9a07      	ldr	r2, [sp, #28]
 8007ba8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d028      	beq.n	8007c04 <_dtoa_r+0xaec>
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	220a      	movs	r2, #10
 8007bb8:	4658      	mov	r0, fp
 8007bba:	f000 f8df 	bl	8007d7c <__multadd>
 8007bbe:	42af      	cmp	r7, r5
 8007bc0:	4681      	mov	r9, r0
 8007bc2:	f04f 0300 	mov.w	r3, #0
 8007bc6:	f04f 020a 	mov.w	r2, #10
 8007bca:	4639      	mov	r1, r7
 8007bcc:	4658      	mov	r0, fp
 8007bce:	d107      	bne.n	8007be0 <_dtoa_r+0xac8>
 8007bd0:	f000 f8d4 	bl	8007d7c <__multadd>
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	9307      	str	r3, [sp, #28]
 8007bde:	e774      	b.n	8007aca <_dtoa_r+0x9b2>
 8007be0:	f000 f8cc 	bl	8007d7c <__multadd>
 8007be4:	4629      	mov	r1, r5
 8007be6:	4607      	mov	r7, r0
 8007be8:	2300      	movs	r3, #0
 8007bea:	220a      	movs	r2, #10
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 f8c5 	bl	8007d7c <__multadd>
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	e7f0      	b.n	8007bd8 <_dtoa_r+0xac0>
 8007bf6:	9b08      	ldr	r3, [sp, #32]
 8007bf8:	2700      	movs	r7, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfcc      	ite	gt
 8007bfe:	461e      	movgt	r6, r3
 8007c00:	2601      	movle	r6, #1
 8007c02:	4456      	add	r6, sl
 8007c04:	4649      	mov	r1, r9
 8007c06:	2201      	movs	r2, #1
 8007c08:	4658      	mov	r0, fp
 8007c0a:	f000 fa61 	bl	80080d0 <__lshift>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4681      	mov	r9, r0
 8007c12:	f000 fac9 	bl	80081a8 <__mcmp>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	dcb0      	bgt.n	8007b7c <_dtoa_r+0xa64>
 8007c1a:	d102      	bne.n	8007c22 <_dtoa_r+0xb0a>
 8007c1c:	f018 0f01 	tst.w	r8, #1
 8007c20:	d1ac      	bne.n	8007b7c <_dtoa_r+0xa64>
 8007c22:	4633      	mov	r3, r6
 8007c24:	461e      	mov	r6, r3
 8007c26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2a:	2a30      	cmp	r2, #48	@ 0x30
 8007c2c:	d0fa      	beq.n	8007c24 <_dtoa_r+0xb0c>
 8007c2e:	e5be      	b.n	80077ae <_dtoa_r+0x696>
 8007c30:	459a      	cmp	sl, r3
 8007c32:	d1a4      	bne.n	8007b7e <_dtoa_r+0xa66>
 8007c34:	9b04      	ldr	r3, [sp, #16]
 8007c36:	3301      	adds	r3, #1
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	2331      	movs	r3, #49	@ 0x31
 8007c3c:	f88a 3000 	strb.w	r3, [sl]
 8007c40:	e5b5      	b.n	80077ae <_dtoa_r+0x696>
 8007c42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c44:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ca4 <_dtoa_r+0xb8c>
 8007c48:	b11b      	cbz	r3, 8007c52 <_dtoa_r+0xb3a>
 8007c4a:	f10a 0308 	add.w	r3, sl, #8
 8007c4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	4650      	mov	r0, sl
 8007c54:	b017      	add	sp, #92	@ 0x5c
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f77f ae3d 	ble.w	80078dc <_dtoa_r+0x7c4>
 8007c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c66:	2001      	movs	r0, #1
 8007c68:	e65b      	b.n	8007922 <_dtoa_r+0x80a>
 8007c6a:	9b08      	ldr	r3, [sp, #32]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f77f aed6 	ble.w	8007a1e <_dtoa_r+0x906>
 8007c72:	4656      	mov	r6, sl
 8007c74:	4621      	mov	r1, r4
 8007c76:	4648      	mov	r0, r9
 8007c78:	f7ff f9c6 	bl	8007008 <quorem>
 8007c7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	f806 8b01 	strb.w	r8, [r6], #1
 8007c86:	eba6 020a 	sub.w	r2, r6, sl
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	ddb3      	ble.n	8007bf6 <_dtoa_r+0xade>
 8007c8e:	4649      	mov	r1, r9
 8007c90:	2300      	movs	r3, #0
 8007c92:	220a      	movs	r2, #10
 8007c94:	4658      	mov	r0, fp
 8007c96:	f000 f871 	bl	8007d7c <__multadd>
 8007c9a:	4681      	mov	r9, r0
 8007c9c:	e7ea      	b.n	8007c74 <_dtoa_r+0xb5c>
 8007c9e:	bf00      	nop
 8007ca0:	08009678 	.word	0x08009678
 8007ca4:	080095fa 	.word	0x080095fa

08007ca8 <malloc>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <malloc+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f7fe bf21 	b.w	8006af4 <_malloc_r>
 8007cb2:	bf00      	nop
 8007cb4:	2000002c 	.word	0x2000002c

08007cb8 <_Balloc>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	69c6      	ldr	r6, [r0, #28]
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	460d      	mov	r5, r1
 8007cc0:	b976      	cbnz	r6, 8007ce0 <_Balloc+0x28>
 8007cc2:	2010      	movs	r0, #16
 8007cc4:	f7ff fff0 	bl	8007ca8 <malloc>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	61e0      	str	r0, [r4, #28]
 8007ccc:	b920      	cbnz	r0, 8007cd8 <_Balloc+0x20>
 8007cce:	216b      	movs	r1, #107	@ 0x6b
 8007cd0:	4b17      	ldr	r3, [pc, #92]	@ (8007d30 <_Balloc+0x78>)
 8007cd2:	4818      	ldr	r0, [pc, #96]	@ (8007d34 <_Balloc+0x7c>)
 8007cd4:	f000 fb8c 	bl	80083f0 <__assert_func>
 8007cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cdc:	6006      	str	r6, [r0, #0]
 8007cde:	60c6      	str	r6, [r0, #12]
 8007ce0:	69e6      	ldr	r6, [r4, #28]
 8007ce2:	68f3      	ldr	r3, [r6, #12]
 8007ce4:	b183      	cbz	r3, 8007d08 <_Balloc+0x50>
 8007ce6:	69e3      	ldr	r3, [r4, #28]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cee:	b9b8      	cbnz	r0, 8007d20 <_Balloc+0x68>
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8007cf6:	1d72      	adds	r2, r6, #5
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	f000 fb96 	bl	800842c <_calloc_r>
 8007d00:	b160      	cbz	r0, 8007d1c <_Balloc+0x64>
 8007d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d06:	e00e      	b.n	8007d26 <_Balloc+0x6e>
 8007d08:	2221      	movs	r2, #33	@ 0x21
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 fb8d 	bl	800842c <_calloc_r>
 8007d12:	69e3      	ldr	r3, [r4, #28]
 8007d14:	60f0      	str	r0, [r6, #12]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e4      	bne.n	8007ce6 <_Balloc+0x2e>
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	6802      	ldr	r2, [r0, #0]
 8007d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d26:	2300      	movs	r3, #0
 8007d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d2c:	e7f7      	b.n	8007d1e <_Balloc+0x66>
 8007d2e:	bf00      	nop
 8007d30:	08009609 	.word	0x08009609
 8007d34:	08009689 	.word	0x08009689

08007d38 <_Bfree>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	69c6      	ldr	r6, [r0, #28]
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b976      	cbnz	r6, 8007d60 <_Bfree+0x28>
 8007d42:	2010      	movs	r0, #16
 8007d44:	f7ff ffb0 	bl	8007ca8 <malloc>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	61e8      	str	r0, [r5, #28]
 8007d4c:	b920      	cbnz	r0, 8007d58 <_Bfree+0x20>
 8007d4e:	218f      	movs	r1, #143	@ 0x8f
 8007d50:	4b08      	ldr	r3, [pc, #32]	@ (8007d74 <_Bfree+0x3c>)
 8007d52:	4809      	ldr	r0, [pc, #36]	@ (8007d78 <_Bfree+0x40>)
 8007d54:	f000 fb4c 	bl	80083f0 <__assert_func>
 8007d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d5c:	6006      	str	r6, [r0, #0]
 8007d5e:	60c6      	str	r6, [r0, #12]
 8007d60:	b13c      	cbz	r4, 8007d72 <_Bfree+0x3a>
 8007d62:	69eb      	ldr	r3, [r5, #28]
 8007d64:	6862      	ldr	r2, [r4, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d6c:	6021      	str	r1, [r4, #0]
 8007d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	08009609 	.word	0x08009609
 8007d78:	08009689 	.word	0x08009689

08007d7c <__multadd>:
 8007d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4607      	mov	r7, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	461e      	mov	r6, r3
 8007d86:	2000      	movs	r0, #0
 8007d88:	690d      	ldr	r5, [r1, #16]
 8007d8a:	f101 0c14 	add.w	ip, r1, #20
 8007d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d92:	3001      	adds	r0, #1
 8007d94:	b299      	uxth	r1, r3
 8007d96:	fb02 6101 	mla	r1, r2, r1, r6
 8007d9a:	0c1e      	lsrs	r6, r3, #16
 8007d9c:	0c0b      	lsrs	r3, r1, #16
 8007d9e:	fb02 3306 	mla	r3, r2, r6, r3
 8007da2:	b289      	uxth	r1, r1
 8007da4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007da8:	4285      	cmp	r5, r0
 8007daa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dae:	f84c 1b04 	str.w	r1, [ip], #4
 8007db2:	dcec      	bgt.n	8007d8e <__multadd+0x12>
 8007db4:	b30e      	cbz	r6, 8007dfa <__multadd+0x7e>
 8007db6:	68a3      	ldr	r3, [r4, #8]
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dc19      	bgt.n	8007df0 <__multadd+0x74>
 8007dbc:	6861      	ldr	r1, [r4, #4]
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	3101      	adds	r1, #1
 8007dc2:	f7ff ff79 	bl	8007cb8 <_Balloc>
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	b928      	cbnz	r0, 8007dd6 <__multadd+0x5a>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	21ba      	movs	r1, #186	@ 0xba
 8007dce:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <__multadd+0x84>)
 8007dd0:	480c      	ldr	r0, [pc, #48]	@ (8007e04 <__multadd+0x88>)
 8007dd2:	f000 fb0d 	bl	80083f0 <__assert_func>
 8007dd6:	6922      	ldr	r2, [r4, #16]
 8007dd8:	f104 010c 	add.w	r1, r4, #12
 8007ddc:	3202      	adds	r2, #2
 8007dde:	0092      	lsls	r2, r2, #2
 8007de0:	300c      	adds	r0, #12
 8007de2:	f7fe fe0e 	bl	8006a02 <memcpy>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff ffa5 	bl	8007d38 <_Bfree>
 8007dee:	4644      	mov	r4, r8
 8007df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007df4:	3501      	adds	r5, #1
 8007df6:	615e      	str	r6, [r3, #20]
 8007df8:	6125      	str	r5, [r4, #16]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	08009678 	.word	0x08009678
 8007e04:	08009689 	.word	0x08009689

08007e08 <__hi0bits>:
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e0e:	bf3a      	itte	cc
 8007e10:	0403      	lslcc	r3, r0, #16
 8007e12:	2010      	movcc	r0, #16
 8007e14:	2000      	movcs	r0, #0
 8007e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e1a:	bf3c      	itt	cc
 8007e1c:	021b      	lslcc	r3, r3, #8
 8007e1e:	3008      	addcc	r0, #8
 8007e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e24:	bf3c      	itt	cc
 8007e26:	011b      	lslcc	r3, r3, #4
 8007e28:	3004      	addcc	r0, #4
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e2e:	bf3c      	itt	cc
 8007e30:	009b      	lslcc	r3, r3, #2
 8007e32:	3002      	addcc	r0, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	db05      	blt.n	8007e44 <__hi0bits+0x3c>
 8007e38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e3c:	f100 0001 	add.w	r0, r0, #1
 8007e40:	bf08      	it	eq
 8007e42:	2020      	moveq	r0, #32
 8007e44:	4770      	bx	lr

08007e46 <__lo0bits>:
 8007e46:	6803      	ldr	r3, [r0, #0]
 8007e48:	4602      	mov	r2, r0
 8007e4a:	f013 0007 	ands.w	r0, r3, #7
 8007e4e:	d00b      	beq.n	8007e68 <__lo0bits+0x22>
 8007e50:	07d9      	lsls	r1, r3, #31
 8007e52:	d421      	bmi.n	8007e98 <__lo0bits+0x52>
 8007e54:	0798      	lsls	r0, r3, #30
 8007e56:	bf49      	itett	mi
 8007e58:	085b      	lsrmi	r3, r3, #1
 8007e5a:	089b      	lsrpl	r3, r3, #2
 8007e5c:	2001      	movmi	r0, #1
 8007e5e:	6013      	strmi	r3, [r2, #0]
 8007e60:	bf5c      	itt	pl
 8007e62:	2002      	movpl	r0, #2
 8007e64:	6013      	strpl	r3, [r2, #0]
 8007e66:	4770      	bx	lr
 8007e68:	b299      	uxth	r1, r3
 8007e6a:	b909      	cbnz	r1, 8007e70 <__lo0bits+0x2a>
 8007e6c:	2010      	movs	r0, #16
 8007e6e:	0c1b      	lsrs	r3, r3, #16
 8007e70:	b2d9      	uxtb	r1, r3
 8007e72:	b909      	cbnz	r1, 8007e78 <__lo0bits+0x32>
 8007e74:	3008      	adds	r0, #8
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	0719      	lsls	r1, r3, #28
 8007e7a:	bf04      	itt	eq
 8007e7c:	091b      	lsreq	r3, r3, #4
 8007e7e:	3004      	addeq	r0, #4
 8007e80:	0799      	lsls	r1, r3, #30
 8007e82:	bf04      	itt	eq
 8007e84:	089b      	lsreq	r3, r3, #2
 8007e86:	3002      	addeq	r0, #2
 8007e88:	07d9      	lsls	r1, r3, #31
 8007e8a:	d403      	bmi.n	8007e94 <__lo0bits+0x4e>
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	f100 0001 	add.w	r0, r0, #1
 8007e92:	d003      	beq.n	8007e9c <__lo0bits+0x56>
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4770      	bx	lr
 8007e98:	2000      	movs	r0, #0
 8007e9a:	4770      	bx	lr
 8007e9c:	2020      	movs	r0, #32
 8007e9e:	4770      	bx	lr

08007ea0 <__i2b>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	f7ff ff07 	bl	8007cb8 <_Balloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	b928      	cbnz	r0, 8007eba <__i2b+0x1a>
 8007eae:	f240 1145 	movw	r1, #325	@ 0x145
 8007eb2:	4b04      	ldr	r3, [pc, #16]	@ (8007ec4 <__i2b+0x24>)
 8007eb4:	4804      	ldr	r0, [pc, #16]	@ (8007ec8 <__i2b+0x28>)
 8007eb6:	f000 fa9b 	bl	80083f0 <__assert_func>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	6144      	str	r4, [r0, #20]
 8007ebe:	6103      	str	r3, [r0, #16]
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08009678 	.word	0x08009678
 8007ec8:	08009689 	.word	0x08009689

08007ecc <__multiply>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	690a      	ldr	r2, [r1, #16]
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	bfa2      	ittt	ge
 8007edc:	4623      	movge	r3, r4
 8007ede:	460c      	movge	r4, r1
 8007ee0:	461f      	movge	r7, r3
 8007ee2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ee6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	eb0a 0609 	add.w	r6, sl, r9
 8007ef2:	42b3      	cmp	r3, r6
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	bfb8      	it	lt
 8007ef8:	3101      	addlt	r1, #1
 8007efa:	f7ff fedd 	bl	8007cb8 <_Balloc>
 8007efe:	b930      	cbnz	r0, 8007f0e <__multiply+0x42>
 8007f00:	4602      	mov	r2, r0
 8007f02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f06:	4b43      	ldr	r3, [pc, #268]	@ (8008014 <__multiply+0x148>)
 8007f08:	4843      	ldr	r0, [pc, #268]	@ (8008018 <__multiply+0x14c>)
 8007f0a:	f000 fa71 	bl	80083f0 <__assert_func>
 8007f0e:	f100 0514 	add.w	r5, r0, #20
 8007f12:	462b      	mov	r3, r5
 8007f14:	2200      	movs	r2, #0
 8007f16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f1a:	4543      	cmp	r3, r8
 8007f1c:	d321      	bcc.n	8007f62 <__multiply+0x96>
 8007f1e:	f107 0114 	add.w	r1, r7, #20
 8007f22:	f104 0214 	add.w	r2, r4, #20
 8007f26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f2a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	1b13      	subs	r3, r2, r4
 8007f32:	3b15      	subs	r3, #21
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	3304      	adds	r3, #4
 8007f3a:	f104 0715 	add.w	r7, r4, #21
 8007f3e:	42ba      	cmp	r2, r7
 8007f40:	bf38      	it	cc
 8007f42:	2304      	movcc	r3, #4
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	9103      	str	r1, [sp, #12]
 8007f4a:	428b      	cmp	r3, r1
 8007f4c:	d80c      	bhi.n	8007f68 <__multiply+0x9c>
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	dd03      	ble.n	8007f5a <__multiply+0x8e>
 8007f52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d05a      	beq.n	8008010 <__multiply+0x144>
 8007f5a:	6106      	str	r6, [r0, #16]
 8007f5c:	b005      	add	sp, #20
 8007f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f62:	f843 2b04 	str.w	r2, [r3], #4
 8007f66:	e7d8      	b.n	8007f1a <__multiply+0x4e>
 8007f68:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f6c:	f1ba 0f00 	cmp.w	sl, #0
 8007f70:	d023      	beq.n	8007fba <__multiply+0xee>
 8007f72:	46a9      	mov	r9, r5
 8007f74:	f04f 0c00 	mov.w	ip, #0
 8007f78:	f104 0e14 	add.w	lr, r4, #20
 8007f7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f80:	f8d9 3000 	ldr.w	r3, [r9]
 8007f84:	fa1f fb87 	uxth.w	fp, r7
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f8e:	4463      	add	r3, ip
 8007f90:	f8d9 c000 	ldr.w	ip, [r9]
 8007f94:	0c3f      	lsrs	r7, r7, #16
 8007f96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f9a:	fb0a c707 	mla	r7, sl, r7, ip
 8007f9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fa8:	4572      	cmp	r2, lr
 8007faa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fae:	f849 3b04 	str.w	r3, [r9], #4
 8007fb2:	d8e3      	bhi.n	8007f7c <__multiply+0xb0>
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	f845 c003 	str.w	ip, [r5, r3]
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	3104      	adds	r1, #4
 8007fbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fc2:	f1b9 0f00 	cmp.w	r9, #0
 8007fc6:	d021      	beq.n	800800c <__multiply+0x140>
 8007fc8:	46ae      	mov	lr, r5
 8007fca:	f04f 0a00 	mov.w	sl, #0
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	f104 0c14 	add.w	ip, r4, #20
 8007fd4:	f8bc b000 	ldrh.w	fp, [ip]
 8007fd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	fb09 770b 	mla	r7, r9, fp, r7
 8007fe2:	4457      	add	r7, sl
 8007fe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fe8:	f84e 3b04 	str.w	r3, [lr], #4
 8007fec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ff0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ff4:	f8be 3000 	ldrh.w	r3, [lr]
 8007ff8:	4562      	cmp	r2, ip
 8007ffa:	fb09 330a 	mla	r3, r9, sl, r3
 8007ffe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008002:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008006:	d8e5      	bhi.n	8007fd4 <__multiply+0x108>
 8008008:	9f01      	ldr	r7, [sp, #4]
 800800a:	51eb      	str	r3, [r5, r7]
 800800c:	3504      	adds	r5, #4
 800800e:	e79a      	b.n	8007f46 <__multiply+0x7a>
 8008010:	3e01      	subs	r6, #1
 8008012:	e79c      	b.n	8007f4e <__multiply+0x82>
 8008014:	08009678 	.word	0x08009678
 8008018:	08009689 	.word	0x08009689

0800801c <__pow5mult>:
 800801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008020:	4615      	mov	r5, r2
 8008022:	f012 0203 	ands.w	r2, r2, #3
 8008026:	4607      	mov	r7, r0
 8008028:	460e      	mov	r6, r1
 800802a:	d007      	beq.n	800803c <__pow5mult+0x20>
 800802c:	4c25      	ldr	r4, [pc, #148]	@ (80080c4 <__pow5mult+0xa8>)
 800802e:	3a01      	subs	r2, #1
 8008030:	2300      	movs	r3, #0
 8008032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008036:	f7ff fea1 	bl	8007d7c <__multadd>
 800803a:	4606      	mov	r6, r0
 800803c:	10ad      	asrs	r5, r5, #2
 800803e:	d03d      	beq.n	80080bc <__pow5mult+0xa0>
 8008040:	69fc      	ldr	r4, [r7, #28]
 8008042:	b97c      	cbnz	r4, 8008064 <__pow5mult+0x48>
 8008044:	2010      	movs	r0, #16
 8008046:	f7ff fe2f 	bl	8007ca8 <malloc>
 800804a:	4602      	mov	r2, r0
 800804c:	61f8      	str	r0, [r7, #28]
 800804e:	b928      	cbnz	r0, 800805c <__pow5mult+0x40>
 8008050:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008054:	4b1c      	ldr	r3, [pc, #112]	@ (80080c8 <__pow5mult+0xac>)
 8008056:	481d      	ldr	r0, [pc, #116]	@ (80080cc <__pow5mult+0xb0>)
 8008058:	f000 f9ca 	bl	80083f0 <__assert_func>
 800805c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008060:	6004      	str	r4, [r0, #0]
 8008062:	60c4      	str	r4, [r0, #12]
 8008064:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800806c:	b94c      	cbnz	r4, 8008082 <__pow5mult+0x66>
 800806e:	f240 2171 	movw	r1, #625	@ 0x271
 8008072:	4638      	mov	r0, r7
 8008074:	f7ff ff14 	bl	8007ea0 <__i2b>
 8008078:	2300      	movs	r3, #0
 800807a:	4604      	mov	r4, r0
 800807c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008080:	6003      	str	r3, [r0, #0]
 8008082:	f04f 0900 	mov.w	r9, #0
 8008086:	07eb      	lsls	r3, r5, #31
 8008088:	d50a      	bpl.n	80080a0 <__pow5mult+0x84>
 800808a:	4631      	mov	r1, r6
 800808c:	4622      	mov	r2, r4
 800808e:	4638      	mov	r0, r7
 8008090:	f7ff ff1c 	bl	8007ecc <__multiply>
 8008094:	4680      	mov	r8, r0
 8008096:	4631      	mov	r1, r6
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff fe4d 	bl	8007d38 <_Bfree>
 800809e:	4646      	mov	r6, r8
 80080a0:	106d      	asrs	r5, r5, #1
 80080a2:	d00b      	beq.n	80080bc <__pow5mult+0xa0>
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	b938      	cbnz	r0, 80080b8 <__pow5mult+0x9c>
 80080a8:	4622      	mov	r2, r4
 80080aa:	4621      	mov	r1, r4
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7ff ff0d 	bl	8007ecc <__multiply>
 80080b2:	6020      	str	r0, [r4, #0]
 80080b4:	f8c0 9000 	str.w	r9, [r0]
 80080b8:	4604      	mov	r4, r0
 80080ba:	e7e4      	b.n	8008086 <__pow5mult+0x6a>
 80080bc:	4630      	mov	r0, r6
 80080be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c2:	bf00      	nop
 80080c4:	080096e4 	.word	0x080096e4
 80080c8:	08009609 	.word	0x08009609
 80080cc:	08009689 	.word	0x08009689

080080d0 <__lshift>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	460c      	mov	r4, r1
 80080d6:	4607      	mov	r7, r0
 80080d8:	4691      	mov	r9, r2
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	6849      	ldr	r1, [r1, #4]
 80080de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080e2:	68a3      	ldr	r3, [r4, #8]
 80080e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080e8:	f108 0601 	add.w	r6, r8, #1
 80080ec:	42b3      	cmp	r3, r6
 80080ee:	db0b      	blt.n	8008108 <__lshift+0x38>
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7ff fde1 	bl	8007cb8 <_Balloc>
 80080f6:	4605      	mov	r5, r0
 80080f8:	b948      	cbnz	r0, 800810e <__lshift+0x3e>
 80080fa:	4602      	mov	r2, r0
 80080fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008100:	4b27      	ldr	r3, [pc, #156]	@ (80081a0 <__lshift+0xd0>)
 8008102:	4828      	ldr	r0, [pc, #160]	@ (80081a4 <__lshift+0xd4>)
 8008104:	f000 f974 	bl	80083f0 <__assert_func>
 8008108:	3101      	adds	r1, #1
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	e7ee      	b.n	80080ec <__lshift+0x1c>
 800810e:	2300      	movs	r3, #0
 8008110:	f100 0114 	add.w	r1, r0, #20
 8008114:	f100 0210 	add.w	r2, r0, #16
 8008118:	4618      	mov	r0, r3
 800811a:	4553      	cmp	r3, sl
 800811c:	db33      	blt.n	8008186 <__lshift+0xb6>
 800811e:	6920      	ldr	r0, [r4, #16]
 8008120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008124:	f104 0314 	add.w	r3, r4, #20
 8008128:	f019 091f 	ands.w	r9, r9, #31
 800812c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008130:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008134:	d02b      	beq.n	800818e <__lshift+0xbe>
 8008136:	468a      	mov	sl, r1
 8008138:	2200      	movs	r2, #0
 800813a:	f1c9 0e20 	rsb	lr, r9, #32
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	fa00 f009 	lsl.w	r0, r0, r9
 8008144:	4310      	orrs	r0, r2
 8008146:	f84a 0b04 	str.w	r0, [sl], #4
 800814a:	f853 2b04 	ldr.w	r2, [r3], #4
 800814e:	459c      	cmp	ip, r3
 8008150:	fa22 f20e 	lsr.w	r2, r2, lr
 8008154:	d8f3      	bhi.n	800813e <__lshift+0x6e>
 8008156:	ebac 0304 	sub.w	r3, ip, r4
 800815a:	3b15      	subs	r3, #21
 800815c:	f023 0303 	bic.w	r3, r3, #3
 8008160:	3304      	adds	r3, #4
 8008162:	f104 0015 	add.w	r0, r4, #21
 8008166:	4584      	cmp	ip, r0
 8008168:	bf38      	it	cc
 800816a:	2304      	movcc	r3, #4
 800816c:	50ca      	str	r2, [r1, r3]
 800816e:	b10a      	cbz	r2, 8008174 <__lshift+0xa4>
 8008170:	f108 0602 	add.w	r6, r8, #2
 8008174:	3e01      	subs	r6, #1
 8008176:	4638      	mov	r0, r7
 8008178:	4621      	mov	r1, r4
 800817a:	612e      	str	r6, [r5, #16]
 800817c:	f7ff fddc 	bl	8007d38 <_Bfree>
 8008180:	4628      	mov	r0, r5
 8008182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008186:	f842 0f04 	str.w	r0, [r2, #4]!
 800818a:	3301      	adds	r3, #1
 800818c:	e7c5      	b.n	800811a <__lshift+0x4a>
 800818e:	3904      	subs	r1, #4
 8008190:	f853 2b04 	ldr.w	r2, [r3], #4
 8008194:	459c      	cmp	ip, r3
 8008196:	f841 2f04 	str.w	r2, [r1, #4]!
 800819a:	d8f9      	bhi.n	8008190 <__lshift+0xc0>
 800819c:	e7ea      	b.n	8008174 <__lshift+0xa4>
 800819e:	bf00      	nop
 80081a0:	08009678 	.word	0x08009678
 80081a4:	08009689 	.word	0x08009689

080081a8 <__mcmp>:
 80081a8:	4603      	mov	r3, r0
 80081aa:	690a      	ldr	r2, [r1, #16]
 80081ac:	6900      	ldr	r0, [r0, #16]
 80081ae:	b530      	push	{r4, r5, lr}
 80081b0:	1a80      	subs	r0, r0, r2
 80081b2:	d10e      	bne.n	80081d2 <__mcmp+0x2a>
 80081b4:	3314      	adds	r3, #20
 80081b6:	3114      	adds	r1, #20
 80081b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081c8:	4295      	cmp	r5, r2
 80081ca:	d003      	beq.n	80081d4 <__mcmp+0x2c>
 80081cc:	d205      	bcs.n	80081da <__mcmp+0x32>
 80081ce:	f04f 30ff 	mov.w	r0, #4294967295
 80081d2:	bd30      	pop	{r4, r5, pc}
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	d3f3      	bcc.n	80081c0 <__mcmp+0x18>
 80081d8:	e7fb      	b.n	80081d2 <__mcmp+0x2a>
 80081da:	2001      	movs	r0, #1
 80081dc:	e7f9      	b.n	80081d2 <__mcmp+0x2a>
	...

080081e0 <__mdiff>:
 80081e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	4689      	mov	r9, r1
 80081e6:	4606      	mov	r6, r0
 80081e8:	4611      	mov	r1, r2
 80081ea:	4648      	mov	r0, r9
 80081ec:	4614      	mov	r4, r2
 80081ee:	f7ff ffdb 	bl	80081a8 <__mcmp>
 80081f2:	1e05      	subs	r5, r0, #0
 80081f4:	d112      	bne.n	800821c <__mdiff+0x3c>
 80081f6:	4629      	mov	r1, r5
 80081f8:	4630      	mov	r0, r6
 80081fa:	f7ff fd5d 	bl	8007cb8 <_Balloc>
 80081fe:	4602      	mov	r2, r0
 8008200:	b928      	cbnz	r0, 800820e <__mdiff+0x2e>
 8008202:	f240 2137 	movw	r1, #567	@ 0x237
 8008206:	4b3e      	ldr	r3, [pc, #248]	@ (8008300 <__mdiff+0x120>)
 8008208:	483e      	ldr	r0, [pc, #248]	@ (8008304 <__mdiff+0x124>)
 800820a:	f000 f8f1 	bl	80083f0 <__assert_func>
 800820e:	2301      	movs	r3, #1
 8008210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008214:	4610      	mov	r0, r2
 8008216:	b003      	add	sp, #12
 8008218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821c:	bfbc      	itt	lt
 800821e:	464b      	movlt	r3, r9
 8008220:	46a1      	movlt	r9, r4
 8008222:	4630      	mov	r0, r6
 8008224:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008228:	bfba      	itte	lt
 800822a:	461c      	movlt	r4, r3
 800822c:	2501      	movlt	r5, #1
 800822e:	2500      	movge	r5, #0
 8008230:	f7ff fd42 	bl	8007cb8 <_Balloc>
 8008234:	4602      	mov	r2, r0
 8008236:	b918      	cbnz	r0, 8008240 <__mdiff+0x60>
 8008238:	f240 2145 	movw	r1, #581	@ 0x245
 800823c:	4b30      	ldr	r3, [pc, #192]	@ (8008300 <__mdiff+0x120>)
 800823e:	e7e3      	b.n	8008208 <__mdiff+0x28>
 8008240:	f100 0b14 	add.w	fp, r0, #20
 8008244:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008248:	f109 0310 	add.w	r3, r9, #16
 800824c:	60c5      	str	r5, [r0, #12]
 800824e:	f04f 0c00 	mov.w	ip, #0
 8008252:	f109 0514 	add.w	r5, r9, #20
 8008256:	46d9      	mov	r9, fp
 8008258:	6926      	ldr	r6, [r4, #16]
 800825a:	f104 0e14 	add.w	lr, r4, #20
 800825e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008262:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800826e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008272:	b281      	uxth	r1, r0
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	fa1f f38a 	uxth.w	r3, sl
 800827a:	1a5b      	subs	r3, r3, r1
 800827c:	0c00      	lsrs	r0, r0, #16
 800827e:	4463      	add	r3, ip
 8008280:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008284:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008288:	b29b      	uxth	r3, r3
 800828a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800828e:	4576      	cmp	r6, lr
 8008290:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008294:	f849 3b04 	str.w	r3, [r9], #4
 8008298:	d8e6      	bhi.n	8008268 <__mdiff+0x88>
 800829a:	1b33      	subs	r3, r6, r4
 800829c:	3b15      	subs	r3, #21
 800829e:	f023 0303 	bic.w	r3, r3, #3
 80082a2:	3415      	adds	r4, #21
 80082a4:	3304      	adds	r3, #4
 80082a6:	42a6      	cmp	r6, r4
 80082a8:	bf38      	it	cc
 80082aa:	2304      	movcc	r3, #4
 80082ac:	441d      	add	r5, r3
 80082ae:	445b      	add	r3, fp
 80082b0:	461e      	mov	r6, r3
 80082b2:	462c      	mov	r4, r5
 80082b4:	4544      	cmp	r4, r8
 80082b6:	d30e      	bcc.n	80082d6 <__mdiff+0xf6>
 80082b8:	f108 0103 	add.w	r1, r8, #3
 80082bc:	1b49      	subs	r1, r1, r5
 80082be:	f021 0103 	bic.w	r1, r1, #3
 80082c2:	3d03      	subs	r5, #3
 80082c4:	45a8      	cmp	r8, r5
 80082c6:	bf38      	it	cc
 80082c8:	2100      	movcc	r1, #0
 80082ca:	440b      	add	r3, r1
 80082cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082d0:	b199      	cbz	r1, 80082fa <__mdiff+0x11a>
 80082d2:	6117      	str	r7, [r2, #16]
 80082d4:	e79e      	b.n	8008214 <__mdiff+0x34>
 80082d6:	46e6      	mov	lr, ip
 80082d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80082dc:	fa1f fc81 	uxth.w	ip, r1
 80082e0:	44f4      	add	ip, lr
 80082e2:	0c08      	lsrs	r0, r1, #16
 80082e4:	4471      	add	r1, lr
 80082e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082ea:	b289      	uxth	r1, r1
 80082ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082f4:	f846 1b04 	str.w	r1, [r6], #4
 80082f8:	e7dc      	b.n	80082b4 <__mdiff+0xd4>
 80082fa:	3f01      	subs	r7, #1
 80082fc:	e7e6      	b.n	80082cc <__mdiff+0xec>
 80082fe:	bf00      	nop
 8008300:	08009678 	.word	0x08009678
 8008304:	08009689 	.word	0x08009689

08008308 <__d2b>:
 8008308:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800830c:	2101      	movs	r1, #1
 800830e:	4690      	mov	r8, r2
 8008310:	4699      	mov	r9, r3
 8008312:	9e08      	ldr	r6, [sp, #32]
 8008314:	f7ff fcd0 	bl	8007cb8 <_Balloc>
 8008318:	4604      	mov	r4, r0
 800831a:	b930      	cbnz	r0, 800832a <__d2b+0x22>
 800831c:	4602      	mov	r2, r0
 800831e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008322:	4b23      	ldr	r3, [pc, #140]	@ (80083b0 <__d2b+0xa8>)
 8008324:	4823      	ldr	r0, [pc, #140]	@ (80083b4 <__d2b+0xac>)
 8008326:	f000 f863 	bl	80083f0 <__assert_func>
 800832a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800832e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008332:	b10d      	cbz	r5, 8008338 <__d2b+0x30>
 8008334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f1b8 0300 	subs.w	r3, r8, #0
 800833e:	d024      	beq.n	800838a <__d2b+0x82>
 8008340:	4668      	mov	r0, sp
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	f7ff fd7f 	bl	8007e46 <__lo0bits>
 8008348:	e9dd 1200 	ldrd	r1, r2, [sp]
 800834c:	b1d8      	cbz	r0, 8008386 <__d2b+0x7e>
 800834e:	f1c0 0320 	rsb	r3, r0, #32
 8008352:	fa02 f303 	lsl.w	r3, r2, r3
 8008356:	430b      	orrs	r3, r1
 8008358:	40c2      	lsrs	r2, r0
 800835a:	6163      	str	r3, [r4, #20]
 800835c:	9201      	str	r2, [sp, #4]
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2201      	moveq	r2, #1
 8008366:	2202      	movne	r2, #2
 8008368:	61a3      	str	r3, [r4, #24]
 800836a:	6122      	str	r2, [r4, #16]
 800836c:	b1ad      	cbz	r5, 800839a <__d2b+0x92>
 800836e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008372:	4405      	add	r5, r0
 8008374:	6035      	str	r5, [r6, #0]
 8008376:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800837a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800837c:	6018      	str	r0, [r3, #0]
 800837e:	4620      	mov	r0, r4
 8008380:	b002      	add	sp, #8
 8008382:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008386:	6161      	str	r1, [r4, #20]
 8008388:	e7e9      	b.n	800835e <__d2b+0x56>
 800838a:	a801      	add	r0, sp, #4
 800838c:	f7ff fd5b 	bl	8007e46 <__lo0bits>
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	6163      	str	r3, [r4, #20]
 8008396:	3020      	adds	r0, #32
 8008398:	e7e7      	b.n	800836a <__d2b+0x62>
 800839a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800839e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083a2:	6030      	str	r0, [r6, #0]
 80083a4:	6918      	ldr	r0, [r3, #16]
 80083a6:	f7ff fd2f 	bl	8007e08 <__hi0bits>
 80083aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083ae:	e7e4      	b.n	800837a <__d2b+0x72>
 80083b0:	08009678 	.word	0x08009678
 80083b4:	08009689 	.word	0x08009689

080083b8 <_mprec_log10>:
 80083b8:	2817      	cmp	r0, #23
 80083ba:	b5d0      	push	{r4, r6, r7, lr}
 80083bc:	4604      	mov	r4, r0
 80083be:	dc05      	bgt.n	80083cc <_mprec_log10+0x14>
 80083c0:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <_mprec_log10+0x2c>)
 80083c2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80083c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ca:	bdd0      	pop	{r4, r6, r7, pc}
 80083cc:	2000      	movs	r0, #0
 80083ce:	2600      	movs	r6, #0
 80083d0:	4905      	ldr	r1, [pc, #20]	@ (80083e8 <_mprec_log10+0x30>)
 80083d2:	4f06      	ldr	r7, [pc, #24]	@ (80083ec <_mprec_log10+0x34>)
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	f7f8 f876 	bl	80004c8 <__aeabi_dmul>
 80083dc:	3c01      	subs	r4, #1
 80083de:	d1f9      	bne.n	80083d4 <_mprec_log10+0x1c>
 80083e0:	e7f3      	b.n	80083ca <_mprec_log10+0x12>
 80083e2:	bf00      	nop
 80083e4:	08009718 	.word	0x08009718
 80083e8:	3ff00000 	.word	0x3ff00000
 80083ec:	40240000 	.word	0x40240000

080083f0 <__assert_func>:
 80083f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083f2:	4614      	mov	r4, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b09      	ldr	r3, [pc, #36]	@ (800841c <__assert_func+0x2c>)
 80083f8:	4605      	mov	r5, r0
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68d8      	ldr	r0, [r3, #12]
 80083fe:	b954      	cbnz	r4, 8008416 <__assert_func+0x26>
 8008400:	4b07      	ldr	r3, [pc, #28]	@ (8008420 <__assert_func+0x30>)
 8008402:	461c      	mov	r4, r3
 8008404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008408:	9100      	str	r1, [sp, #0]
 800840a:	462b      	mov	r3, r5
 800840c:	4905      	ldr	r1, [pc, #20]	@ (8008424 <__assert_func+0x34>)
 800840e:	f000 f821 	bl	8008454 <fiprintf>
 8008412:	f000 f831 	bl	8008478 <abort>
 8008416:	4b04      	ldr	r3, [pc, #16]	@ (8008428 <__assert_func+0x38>)
 8008418:	e7f4      	b.n	8008404 <__assert_func+0x14>
 800841a:	bf00      	nop
 800841c:	2000002c 	.word	0x2000002c
 8008420:	0800981b 	.word	0x0800981b
 8008424:	080097ed 	.word	0x080097ed
 8008428:	080097e0 	.word	0x080097e0

0800842c <_calloc_r>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	fba1 5402 	umull	r5, r4, r1, r2
 8008432:	b93c      	cbnz	r4, 8008444 <_calloc_r+0x18>
 8008434:	4629      	mov	r1, r5
 8008436:	f7fe fb5d 	bl	8006af4 <_malloc_r>
 800843a:	4606      	mov	r6, r0
 800843c:	b928      	cbnz	r0, 800844a <_calloc_r+0x1e>
 800843e:	2600      	movs	r6, #0
 8008440:	4630      	mov	r0, r6
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	220c      	movs	r2, #12
 8008446:	6002      	str	r2, [r0, #0]
 8008448:	e7f9      	b.n	800843e <_calloc_r+0x12>
 800844a:	462a      	mov	r2, r5
 800844c:	4621      	mov	r1, r4
 800844e:	f7fe fa06 	bl	800685e <memset>
 8008452:	e7f5      	b.n	8008440 <_calloc_r+0x14>

08008454 <fiprintf>:
 8008454:	b40e      	push	{r1, r2, r3}
 8008456:	b503      	push	{r0, r1, lr}
 8008458:	4601      	mov	r1, r0
 800845a:	ab03      	add	r3, sp, #12
 800845c:	4805      	ldr	r0, [pc, #20]	@ (8008474 <fiprintf+0x20>)
 800845e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008462:	6800      	ldr	r0, [r0, #0]
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	f000 f835 	bl	80084d4 <_vfiprintf_r>
 800846a:	b002      	add	sp, #8
 800846c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008470:	b003      	add	sp, #12
 8008472:	4770      	bx	lr
 8008474:	2000002c 	.word	0x2000002c

08008478 <abort>:
 8008478:	2006      	movs	r0, #6
 800847a:	b508      	push	{r3, lr}
 800847c:	f000 fb90 	bl	8008ba0 <raise>
 8008480:	2001      	movs	r0, #1
 8008482:	f7f9 fc82 	bl	8001d8a <_exit>

08008486 <__sfputc_r>:
 8008486:	6893      	ldr	r3, [r2, #8]
 8008488:	b410      	push	{r4}
 800848a:	3b01      	subs	r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	6093      	str	r3, [r2, #8]
 8008490:	da07      	bge.n	80084a2 <__sfputc_r+0x1c>
 8008492:	6994      	ldr	r4, [r2, #24]
 8008494:	42a3      	cmp	r3, r4
 8008496:	db01      	blt.n	800849c <__sfputc_r+0x16>
 8008498:	290a      	cmp	r1, #10
 800849a:	d102      	bne.n	80084a2 <__sfputc_r+0x1c>
 800849c:	bc10      	pop	{r4}
 800849e:	f000 bac3 	b.w	8008a28 <__swbuf_r>
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	1c58      	adds	r0, r3, #1
 80084a6:	6010      	str	r0, [r2, #0]
 80084a8:	7019      	strb	r1, [r3, #0]
 80084aa:	4608      	mov	r0, r1
 80084ac:	bc10      	pop	{r4}
 80084ae:	4770      	bx	lr

080084b0 <__sfputs_r>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	4606      	mov	r6, r0
 80084b4:	460f      	mov	r7, r1
 80084b6:	4614      	mov	r4, r2
 80084b8:	18d5      	adds	r5, r2, r3
 80084ba:	42ac      	cmp	r4, r5
 80084bc:	d101      	bne.n	80084c2 <__sfputs_r+0x12>
 80084be:	2000      	movs	r0, #0
 80084c0:	e007      	b.n	80084d2 <__sfputs_r+0x22>
 80084c2:	463a      	mov	r2, r7
 80084c4:	4630      	mov	r0, r6
 80084c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ca:	f7ff ffdc 	bl	8008486 <__sfputc_r>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	d1f3      	bne.n	80084ba <__sfputs_r+0xa>
 80084d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084d4 <_vfiprintf_r>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	460d      	mov	r5, r1
 80084da:	4614      	mov	r4, r2
 80084dc:	4698      	mov	r8, r3
 80084de:	4606      	mov	r6, r0
 80084e0:	b09d      	sub	sp, #116	@ 0x74
 80084e2:	b118      	cbz	r0, 80084ec <_vfiprintf_r+0x18>
 80084e4:	6a03      	ldr	r3, [r0, #32]
 80084e6:	b90b      	cbnz	r3, 80084ec <_vfiprintf_r+0x18>
 80084e8:	f7fe f940 	bl	800676c <__sinit>
 80084ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084ee:	07d9      	lsls	r1, r3, #31
 80084f0:	d405      	bmi.n	80084fe <_vfiprintf_r+0x2a>
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	059a      	lsls	r2, r3, #22
 80084f6:	d402      	bmi.n	80084fe <_vfiprintf_r+0x2a>
 80084f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084fa:	f7fe fa80 	bl	80069fe <__retarget_lock_acquire_recursive>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	071b      	lsls	r3, r3, #28
 8008502:	d501      	bpl.n	8008508 <_vfiprintf_r+0x34>
 8008504:	692b      	ldr	r3, [r5, #16]
 8008506:	b99b      	cbnz	r3, 8008530 <_vfiprintf_r+0x5c>
 8008508:	4629      	mov	r1, r5
 800850a:	4630      	mov	r0, r6
 800850c:	f000 faca 	bl	8008aa4 <__swsetup_r>
 8008510:	b170      	cbz	r0, 8008530 <_vfiprintf_r+0x5c>
 8008512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008514:	07dc      	lsls	r4, r3, #31
 8008516:	d504      	bpl.n	8008522 <_vfiprintf_r+0x4e>
 8008518:	f04f 30ff 	mov.w	r0, #4294967295
 800851c:	b01d      	add	sp, #116	@ 0x74
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	0598      	lsls	r0, r3, #22
 8008526:	d4f7      	bmi.n	8008518 <_vfiprintf_r+0x44>
 8008528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800852a:	f7fe fa69 	bl	8006a00 <__retarget_lock_release_recursive>
 800852e:	e7f3      	b.n	8008518 <_vfiprintf_r+0x44>
 8008530:	2300      	movs	r3, #0
 8008532:	9309      	str	r3, [sp, #36]	@ 0x24
 8008534:	2320      	movs	r3, #32
 8008536:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800853a:	2330      	movs	r3, #48	@ 0x30
 800853c:	f04f 0901 	mov.w	r9, #1
 8008540:	f8cd 800c 	str.w	r8, [sp, #12]
 8008544:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80086f0 <_vfiprintf_r+0x21c>
 8008548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800854c:	4623      	mov	r3, r4
 800854e:	469a      	mov	sl, r3
 8008550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008554:	b10a      	cbz	r2, 800855a <_vfiprintf_r+0x86>
 8008556:	2a25      	cmp	r2, #37	@ 0x25
 8008558:	d1f9      	bne.n	800854e <_vfiprintf_r+0x7a>
 800855a:	ebba 0b04 	subs.w	fp, sl, r4
 800855e:	d00b      	beq.n	8008578 <_vfiprintf_r+0xa4>
 8008560:	465b      	mov	r3, fp
 8008562:	4622      	mov	r2, r4
 8008564:	4629      	mov	r1, r5
 8008566:	4630      	mov	r0, r6
 8008568:	f7ff ffa2 	bl	80084b0 <__sfputs_r>
 800856c:	3001      	adds	r0, #1
 800856e:	f000 80a7 	beq.w	80086c0 <_vfiprintf_r+0x1ec>
 8008572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008574:	445a      	add	r2, fp
 8008576:	9209      	str	r2, [sp, #36]	@ 0x24
 8008578:	f89a 3000 	ldrb.w	r3, [sl]
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 809f 	beq.w	80086c0 <_vfiprintf_r+0x1ec>
 8008582:	2300      	movs	r3, #0
 8008584:	f04f 32ff 	mov.w	r2, #4294967295
 8008588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858c:	f10a 0a01 	add.w	sl, sl, #1
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	9307      	str	r3, [sp, #28]
 8008594:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008598:	931a      	str	r3, [sp, #104]	@ 0x68
 800859a:	4654      	mov	r4, sl
 800859c:	2205      	movs	r2, #5
 800859e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a2:	4853      	ldr	r0, [pc, #332]	@ (80086f0 <_vfiprintf_r+0x21c>)
 80085a4:	f000 fb18 	bl	8008bd8 <memchr>
 80085a8:	9a04      	ldr	r2, [sp, #16]
 80085aa:	b9d8      	cbnz	r0, 80085e4 <_vfiprintf_r+0x110>
 80085ac:	06d1      	lsls	r1, r2, #27
 80085ae:	bf44      	itt	mi
 80085b0:	2320      	movmi	r3, #32
 80085b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085b6:	0713      	lsls	r3, r2, #28
 80085b8:	bf44      	itt	mi
 80085ba:	232b      	movmi	r3, #43	@ 0x2b
 80085bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085c0:	f89a 3000 	ldrb.w	r3, [sl]
 80085c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c6:	d015      	beq.n	80085f4 <_vfiprintf_r+0x120>
 80085c8:	4654      	mov	r4, sl
 80085ca:	2000      	movs	r0, #0
 80085cc:	f04f 0c0a 	mov.w	ip, #10
 80085d0:	9a07      	ldr	r2, [sp, #28]
 80085d2:	4621      	mov	r1, r4
 80085d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d8:	3b30      	subs	r3, #48	@ 0x30
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d94b      	bls.n	8008676 <_vfiprintf_r+0x1a2>
 80085de:	b1b0      	cbz	r0, 800860e <_vfiprintf_r+0x13a>
 80085e0:	9207      	str	r2, [sp, #28]
 80085e2:	e014      	b.n	800860e <_vfiprintf_r+0x13a>
 80085e4:	eba0 0308 	sub.w	r3, r0, r8
 80085e8:	fa09 f303 	lsl.w	r3, r9, r3
 80085ec:	4313      	orrs	r3, r2
 80085ee:	46a2      	mov	sl, r4
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	e7d2      	b.n	800859a <_vfiprintf_r+0xc6>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	1d19      	adds	r1, r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	9103      	str	r1, [sp, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfbb      	ittet	lt
 8008600:	425b      	neglt	r3, r3
 8008602:	f042 0202 	orrlt.w	r2, r2, #2
 8008606:	9307      	strge	r3, [sp, #28]
 8008608:	9307      	strlt	r3, [sp, #28]
 800860a:	bfb8      	it	lt
 800860c:	9204      	strlt	r2, [sp, #16]
 800860e:	7823      	ldrb	r3, [r4, #0]
 8008610:	2b2e      	cmp	r3, #46	@ 0x2e
 8008612:	d10a      	bne.n	800862a <_vfiprintf_r+0x156>
 8008614:	7863      	ldrb	r3, [r4, #1]
 8008616:	2b2a      	cmp	r3, #42	@ 0x2a
 8008618:	d132      	bne.n	8008680 <_vfiprintf_r+0x1ac>
 800861a:	9b03      	ldr	r3, [sp, #12]
 800861c:	3402      	adds	r4, #2
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008628:	9305      	str	r3, [sp, #20]
 800862a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80086f4 <_vfiprintf_r+0x220>
 800862e:	2203      	movs	r2, #3
 8008630:	4650      	mov	r0, sl
 8008632:	7821      	ldrb	r1, [r4, #0]
 8008634:	f000 fad0 	bl	8008bd8 <memchr>
 8008638:	b138      	cbz	r0, 800864a <_vfiprintf_r+0x176>
 800863a:	2240      	movs	r2, #64	@ 0x40
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	eba0 000a 	sub.w	r0, r0, sl
 8008642:	4082      	lsls	r2, r0
 8008644:	4313      	orrs	r3, r2
 8008646:	3401      	adds	r4, #1
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864e:	2206      	movs	r2, #6
 8008650:	4829      	ldr	r0, [pc, #164]	@ (80086f8 <_vfiprintf_r+0x224>)
 8008652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008656:	f000 fabf 	bl	8008bd8 <memchr>
 800865a:	2800      	cmp	r0, #0
 800865c:	d03f      	beq.n	80086de <_vfiprintf_r+0x20a>
 800865e:	4b27      	ldr	r3, [pc, #156]	@ (80086fc <_vfiprintf_r+0x228>)
 8008660:	bb1b      	cbnz	r3, 80086aa <_vfiprintf_r+0x1d6>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	3307      	adds	r3, #7
 8008666:	f023 0307 	bic.w	r3, r3, #7
 800866a:	3308      	adds	r3, #8
 800866c:	9303      	str	r3, [sp, #12]
 800866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008670:	443b      	add	r3, r7
 8008672:	9309      	str	r3, [sp, #36]	@ 0x24
 8008674:	e76a      	b.n	800854c <_vfiprintf_r+0x78>
 8008676:	460c      	mov	r4, r1
 8008678:	2001      	movs	r0, #1
 800867a:	fb0c 3202 	mla	r2, ip, r2, r3
 800867e:	e7a8      	b.n	80085d2 <_vfiprintf_r+0xfe>
 8008680:	2300      	movs	r3, #0
 8008682:	f04f 0c0a 	mov.w	ip, #10
 8008686:	4619      	mov	r1, r3
 8008688:	3401      	adds	r4, #1
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	4620      	mov	r0, r4
 800868e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008692:	3a30      	subs	r2, #48	@ 0x30
 8008694:	2a09      	cmp	r2, #9
 8008696:	d903      	bls.n	80086a0 <_vfiprintf_r+0x1cc>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0c6      	beq.n	800862a <_vfiprintf_r+0x156>
 800869c:	9105      	str	r1, [sp, #20]
 800869e:	e7c4      	b.n	800862a <_vfiprintf_r+0x156>
 80086a0:	4604      	mov	r4, r0
 80086a2:	2301      	movs	r3, #1
 80086a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a8:	e7f0      	b.n	800868c <_vfiprintf_r+0x1b8>
 80086aa:	ab03      	add	r3, sp, #12
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	462a      	mov	r2, r5
 80086b0:	4630      	mov	r0, r6
 80086b2:	4b13      	ldr	r3, [pc, #76]	@ (8008700 <_vfiprintf_r+0x22c>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	f3af 8000 	nop.w
 80086ba:	4607      	mov	r7, r0
 80086bc:	1c78      	adds	r0, r7, #1
 80086be:	d1d6      	bne.n	800866e <_vfiprintf_r+0x19a>
 80086c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086c2:	07d9      	lsls	r1, r3, #31
 80086c4:	d405      	bmi.n	80086d2 <_vfiprintf_r+0x1fe>
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	059a      	lsls	r2, r3, #22
 80086ca:	d402      	bmi.n	80086d2 <_vfiprintf_r+0x1fe>
 80086cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ce:	f7fe f997 	bl	8006a00 <__retarget_lock_release_recursive>
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	065b      	lsls	r3, r3, #25
 80086d6:	f53f af1f 	bmi.w	8008518 <_vfiprintf_r+0x44>
 80086da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086dc:	e71e      	b.n	800851c <_vfiprintf_r+0x48>
 80086de:	ab03      	add	r3, sp, #12
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	462a      	mov	r2, r5
 80086e4:	4630      	mov	r0, r6
 80086e6:	4b06      	ldr	r3, [pc, #24]	@ (8008700 <_vfiprintf_r+0x22c>)
 80086e8:	a904      	add	r1, sp, #16
 80086ea:	f000 f87d 	bl	80087e8 <_printf_i>
 80086ee:	e7e4      	b.n	80086ba <_vfiprintf_r+0x1e6>
 80086f0:	0800981c 	.word	0x0800981c
 80086f4:	08009822 	.word	0x08009822
 80086f8:	08009826 	.word	0x08009826
 80086fc:	00000000 	.word	0x00000000
 8008700:	080084b1 	.word	0x080084b1

08008704 <_printf_common>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	4616      	mov	r6, r2
 800870a:	4698      	mov	r8, r3
 800870c:	688a      	ldr	r2, [r1, #8]
 800870e:	690b      	ldr	r3, [r1, #16]
 8008710:	4607      	mov	r7, r0
 8008712:	4293      	cmp	r3, r2
 8008714:	bfb8      	it	lt
 8008716:	4613      	movlt	r3, r2
 8008718:	6033      	str	r3, [r6, #0]
 800871a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800871e:	460c      	mov	r4, r1
 8008720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008724:	b10a      	cbz	r2, 800872a <_printf_common+0x26>
 8008726:	3301      	adds	r3, #1
 8008728:	6033      	str	r3, [r6, #0]
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	0699      	lsls	r1, r3, #26
 800872e:	bf42      	ittt	mi
 8008730:	6833      	ldrmi	r3, [r6, #0]
 8008732:	3302      	addmi	r3, #2
 8008734:	6033      	strmi	r3, [r6, #0]
 8008736:	6825      	ldr	r5, [r4, #0]
 8008738:	f015 0506 	ands.w	r5, r5, #6
 800873c:	d106      	bne.n	800874c <_printf_common+0x48>
 800873e:	f104 0a19 	add.w	sl, r4, #25
 8008742:	68e3      	ldr	r3, [r4, #12]
 8008744:	6832      	ldr	r2, [r6, #0]
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	42ab      	cmp	r3, r5
 800874a:	dc2b      	bgt.n	80087a4 <_printf_common+0xa0>
 800874c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008750:	6822      	ldr	r2, [r4, #0]
 8008752:	3b00      	subs	r3, #0
 8008754:	bf18      	it	ne
 8008756:	2301      	movne	r3, #1
 8008758:	0692      	lsls	r2, r2, #26
 800875a:	d430      	bmi.n	80087be <_printf_common+0xba>
 800875c:	4641      	mov	r1, r8
 800875e:	4638      	mov	r0, r7
 8008760:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008764:	47c8      	blx	r9
 8008766:	3001      	adds	r0, #1
 8008768:	d023      	beq.n	80087b2 <_printf_common+0xae>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	6922      	ldr	r2, [r4, #16]
 800876e:	f003 0306 	and.w	r3, r3, #6
 8008772:	2b04      	cmp	r3, #4
 8008774:	bf14      	ite	ne
 8008776:	2500      	movne	r5, #0
 8008778:	6833      	ldreq	r3, [r6, #0]
 800877a:	f04f 0600 	mov.w	r6, #0
 800877e:	bf08      	it	eq
 8008780:	68e5      	ldreq	r5, [r4, #12]
 8008782:	f104 041a 	add.w	r4, r4, #26
 8008786:	bf08      	it	eq
 8008788:	1aed      	subeq	r5, r5, r3
 800878a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800878e:	bf08      	it	eq
 8008790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008794:	4293      	cmp	r3, r2
 8008796:	bfc4      	itt	gt
 8008798:	1a9b      	subgt	r3, r3, r2
 800879a:	18ed      	addgt	r5, r5, r3
 800879c:	42b5      	cmp	r5, r6
 800879e:	d11a      	bne.n	80087d6 <_printf_common+0xd2>
 80087a0:	2000      	movs	r0, #0
 80087a2:	e008      	b.n	80087b6 <_printf_common+0xb2>
 80087a4:	2301      	movs	r3, #1
 80087a6:	4652      	mov	r2, sl
 80087a8:	4641      	mov	r1, r8
 80087aa:	4638      	mov	r0, r7
 80087ac:	47c8      	blx	r9
 80087ae:	3001      	adds	r0, #1
 80087b0:	d103      	bne.n	80087ba <_printf_common+0xb6>
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	3501      	adds	r5, #1
 80087bc:	e7c1      	b.n	8008742 <_printf_common+0x3e>
 80087be:	2030      	movs	r0, #48	@ 0x30
 80087c0:	18e1      	adds	r1, r4, r3
 80087c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087cc:	4422      	add	r2, r4
 80087ce:	3302      	adds	r3, #2
 80087d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087d4:	e7c2      	b.n	800875c <_printf_common+0x58>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4622      	mov	r2, r4
 80087da:	4641      	mov	r1, r8
 80087dc:	4638      	mov	r0, r7
 80087de:	47c8      	blx	r9
 80087e0:	3001      	adds	r0, #1
 80087e2:	d0e6      	beq.n	80087b2 <_printf_common+0xae>
 80087e4:	3601      	adds	r6, #1
 80087e6:	e7d9      	b.n	800879c <_printf_common+0x98>

080087e8 <_printf_i>:
 80087e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	7e0f      	ldrb	r7, [r1, #24]
 80087ee:	4691      	mov	r9, r2
 80087f0:	2f78      	cmp	r7, #120	@ 0x78
 80087f2:	4680      	mov	r8, r0
 80087f4:	460c      	mov	r4, r1
 80087f6:	469a      	mov	sl, r3
 80087f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087fe:	d807      	bhi.n	8008810 <_printf_i+0x28>
 8008800:	2f62      	cmp	r7, #98	@ 0x62
 8008802:	d80a      	bhi.n	800881a <_printf_i+0x32>
 8008804:	2f00      	cmp	r7, #0
 8008806:	f000 80d3 	beq.w	80089b0 <_printf_i+0x1c8>
 800880a:	2f58      	cmp	r7, #88	@ 0x58
 800880c:	f000 80ba 	beq.w	8008984 <_printf_i+0x19c>
 8008810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008818:	e03a      	b.n	8008890 <_printf_i+0xa8>
 800881a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800881e:	2b15      	cmp	r3, #21
 8008820:	d8f6      	bhi.n	8008810 <_printf_i+0x28>
 8008822:	a101      	add	r1, pc, #4	@ (adr r1, 8008828 <_printf_i+0x40>)
 8008824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008828:	08008881 	.word	0x08008881
 800882c:	08008895 	.word	0x08008895
 8008830:	08008811 	.word	0x08008811
 8008834:	08008811 	.word	0x08008811
 8008838:	08008811 	.word	0x08008811
 800883c:	08008811 	.word	0x08008811
 8008840:	08008895 	.word	0x08008895
 8008844:	08008811 	.word	0x08008811
 8008848:	08008811 	.word	0x08008811
 800884c:	08008811 	.word	0x08008811
 8008850:	08008811 	.word	0x08008811
 8008854:	08008997 	.word	0x08008997
 8008858:	080088bf 	.word	0x080088bf
 800885c:	08008951 	.word	0x08008951
 8008860:	08008811 	.word	0x08008811
 8008864:	08008811 	.word	0x08008811
 8008868:	080089b9 	.word	0x080089b9
 800886c:	08008811 	.word	0x08008811
 8008870:	080088bf 	.word	0x080088bf
 8008874:	08008811 	.word	0x08008811
 8008878:	08008811 	.word	0x08008811
 800887c:	08008959 	.word	0x08008959
 8008880:	6833      	ldr	r3, [r6, #0]
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6032      	str	r2, [r6, #0]
 8008888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800888c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008890:	2301      	movs	r3, #1
 8008892:	e09e      	b.n	80089d2 <_printf_i+0x1ea>
 8008894:	6833      	ldr	r3, [r6, #0]
 8008896:	6820      	ldr	r0, [r4, #0]
 8008898:	1d19      	adds	r1, r3, #4
 800889a:	6031      	str	r1, [r6, #0]
 800889c:	0606      	lsls	r6, r0, #24
 800889e:	d501      	bpl.n	80088a4 <_printf_i+0xbc>
 80088a0:	681d      	ldr	r5, [r3, #0]
 80088a2:	e003      	b.n	80088ac <_printf_i+0xc4>
 80088a4:	0645      	lsls	r5, r0, #25
 80088a6:	d5fb      	bpl.n	80088a0 <_printf_i+0xb8>
 80088a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088ac:	2d00      	cmp	r5, #0
 80088ae:	da03      	bge.n	80088b8 <_printf_i+0xd0>
 80088b0:	232d      	movs	r3, #45	@ 0x2d
 80088b2:	426d      	negs	r5, r5
 80088b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088b8:	230a      	movs	r3, #10
 80088ba:	4859      	ldr	r0, [pc, #356]	@ (8008a20 <_printf_i+0x238>)
 80088bc:	e011      	b.n	80088e2 <_printf_i+0xfa>
 80088be:	6821      	ldr	r1, [r4, #0]
 80088c0:	6833      	ldr	r3, [r6, #0]
 80088c2:	0608      	lsls	r0, r1, #24
 80088c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088c8:	d402      	bmi.n	80088d0 <_printf_i+0xe8>
 80088ca:	0649      	lsls	r1, r1, #25
 80088cc:	bf48      	it	mi
 80088ce:	b2ad      	uxthmi	r5, r5
 80088d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088d2:	6033      	str	r3, [r6, #0]
 80088d4:	bf14      	ite	ne
 80088d6:	230a      	movne	r3, #10
 80088d8:	2308      	moveq	r3, #8
 80088da:	4851      	ldr	r0, [pc, #324]	@ (8008a20 <_printf_i+0x238>)
 80088dc:	2100      	movs	r1, #0
 80088de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088e2:	6866      	ldr	r6, [r4, #4]
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	bfa8      	it	ge
 80088e8:	6821      	ldrge	r1, [r4, #0]
 80088ea:	60a6      	str	r6, [r4, #8]
 80088ec:	bfa4      	itt	ge
 80088ee:	f021 0104 	bicge.w	r1, r1, #4
 80088f2:	6021      	strge	r1, [r4, #0]
 80088f4:	b90d      	cbnz	r5, 80088fa <_printf_i+0x112>
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	d04b      	beq.n	8008992 <_printf_i+0x1aa>
 80088fa:	4616      	mov	r6, r2
 80088fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008900:	fb03 5711 	mls	r7, r3, r1, r5
 8008904:	5dc7      	ldrb	r7, [r0, r7]
 8008906:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800890a:	462f      	mov	r7, r5
 800890c:	42bb      	cmp	r3, r7
 800890e:	460d      	mov	r5, r1
 8008910:	d9f4      	bls.n	80088fc <_printf_i+0x114>
 8008912:	2b08      	cmp	r3, #8
 8008914:	d10b      	bne.n	800892e <_printf_i+0x146>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	07df      	lsls	r7, r3, #31
 800891a:	d508      	bpl.n	800892e <_printf_i+0x146>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	6861      	ldr	r1, [r4, #4]
 8008920:	4299      	cmp	r1, r3
 8008922:	bfde      	ittt	le
 8008924:	2330      	movle	r3, #48	@ 0x30
 8008926:	f806 3c01 	strble.w	r3, [r6, #-1]
 800892a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800892e:	1b92      	subs	r2, r2, r6
 8008930:	6122      	str	r2, [r4, #16]
 8008932:	464b      	mov	r3, r9
 8008934:	4621      	mov	r1, r4
 8008936:	4640      	mov	r0, r8
 8008938:	f8cd a000 	str.w	sl, [sp]
 800893c:	aa03      	add	r2, sp, #12
 800893e:	f7ff fee1 	bl	8008704 <_printf_common>
 8008942:	3001      	adds	r0, #1
 8008944:	d14a      	bne.n	80089dc <_printf_i+0x1f4>
 8008946:	f04f 30ff 	mov.w	r0, #4294967295
 800894a:	b004      	add	sp, #16
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	f043 0320 	orr.w	r3, r3, #32
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	2778      	movs	r7, #120	@ 0x78
 800895a:	4832      	ldr	r0, [pc, #200]	@ (8008a24 <_printf_i+0x23c>)
 800895c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	6831      	ldr	r1, [r6, #0]
 8008964:	061f      	lsls	r7, r3, #24
 8008966:	f851 5b04 	ldr.w	r5, [r1], #4
 800896a:	d402      	bmi.n	8008972 <_printf_i+0x18a>
 800896c:	065f      	lsls	r7, r3, #25
 800896e:	bf48      	it	mi
 8008970:	b2ad      	uxthmi	r5, r5
 8008972:	6031      	str	r1, [r6, #0]
 8008974:	07d9      	lsls	r1, r3, #31
 8008976:	bf44      	itt	mi
 8008978:	f043 0320 	orrmi.w	r3, r3, #32
 800897c:	6023      	strmi	r3, [r4, #0]
 800897e:	b11d      	cbz	r5, 8008988 <_printf_i+0x1a0>
 8008980:	2310      	movs	r3, #16
 8008982:	e7ab      	b.n	80088dc <_printf_i+0xf4>
 8008984:	4826      	ldr	r0, [pc, #152]	@ (8008a20 <_printf_i+0x238>)
 8008986:	e7e9      	b.n	800895c <_printf_i+0x174>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	f023 0320 	bic.w	r3, r3, #32
 800898e:	6023      	str	r3, [r4, #0]
 8008990:	e7f6      	b.n	8008980 <_printf_i+0x198>
 8008992:	4616      	mov	r6, r2
 8008994:	e7bd      	b.n	8008912 <_printf_i+0x12a>
 8008996:	6833      	ldr	r3, [r6, #0]
 8008998:	6825      	ldr	r5, [r4, #0]
 800899a:	1d18      	adds	r0, r3, #4
 800899c:	6961      	ldr	r1, [r4, #20]
 800899e:	6030      	str	r0, [r6, #0]
 80089a0:	062e      	lsls	r6, r5, #24
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	d501      	bpl.n	80089aa <_printf_i+0x1c2>
 80089a6:	6019      	str	r1, [r3, #0]
 80089a8:	e002      	b.n	80089b0 <_printf_i+0x1c8>
 80089aa:	0668      	lsls	r0, r5, #25
 80089ac:	d5fb      	bpl.n	80089a6 <_printf_i+0x1be>
 80089ae:	8019      	strh	r1, [r3, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	4616      	mov	r6, r2
 80089b4:	6123      	str	r3, [r4, #16]
 80089b6:	e7bc      	b.n	8008932 <_printf_i+0x14a>
 80089b8:	6833      	ldr	r3, [r6, #0]
 80089ba:	2100      	movs	r1, #0
 80089bc:	1d1a      	adds	r2, r3, #4
 80089be:	6032      	str	r2, [r6, #0]
 80089c0:	681e      	ldr	r6, [r3, #0]
 80089c2:	6862      	ldr	r2, [r4, #4]
 80089c4:	4630      	mov	r0, r6
 80089c6:	f000 f907 	bl	8008bd8 <memchr>
 80089ca:	b108      	cbz	r0, 80089d0 <_printf_i+0x1e8>
 80089cc:	1b80      	subs	r0, r0, r6
 80089ce:	6060      	str	r0, [r4, #4]
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	6123      	str	r3, [r4, #16]
 80089d4:	2300      	movs	r3, #0
 80089d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089da:	e7aa      	b.n	8008932 <_printf_i+0x14a>
 80089dc:	4632      	mov	r2, r6
 80089de:	4649      	mov	r1, r9
 80089e0:	4640      	mov	r0, r8
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	47d0      	blx	sl
 80089e6:	3001      	adds	r0, #1
 80089e8:	d0ad      	beq.n	8008946 <_printf_i+0x15e>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	079b      	lsls	r3, r3, #30
 80089ee:	d413      	bmi.n	8008a18 <_printf_i+0x230>
 80089f0:	68e0      	ldr	r0, [r4, #12]
 80089f2:	9b03      	ldr	r3, [sp, #12]
 80089f4:	4298      	cmp	r0, r3
 80089f6:	bfb8      	it	lt
 80089f8:	4618      	movlt	r0, r3
 80089fa:	e7a6      	b.n	800894a <_printf_i+0x162>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4632      	mov	r2, r6
 8008a00:	4649      	mov	r1, r9
 8008a02:	4640      	mov	r0, r8
 8008a04:	47d0      	blx	sl
 8008a06:	3001      	adds	r0, #1
 8008a08:	d09d      	beq.n	8008946 <_printf_i+0x15e>
 8008a0a:	3501      	adds	r5, #1
 8008a0c:	68e3      	ldr	r3, [r4, #12]
 8008a0e:	9903      	ldr	r1, [sp, #12]
 8008a10:	1a5b      	subs	r3, r3, r1
 8008a12:	42ab      	cmp	r3, r5
 8008a14:	dcf2      	bgt.n	80089fc <_printf_i+0x214>
 8008a16:	e7eb      	b.n	80089f0 <_printf_i+0x208>
 8008a18:	2500      	movs	r5, #0
 8008a1a:	f104 0619 	add.w	r6, r4, #25
 8008a1e:	e7f5      	b.n	8008a0c <_printf_i+0x224>
 8008a20:	0800982d 	.word	0x0800982d
 8008a24:	0800983e 	.word	0x0800983e

08008a28 <__swbuf_r>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	460e      	mov	r6, r1
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b118      	cbz	r0, 8008a3a <__swbuf_r+0x12>
 8008a32:	6a03      	ldr	r3, [r0, #32]
 8008a34:	b90b      	cbnz	r3, 8008a3a <__swbuf_r+0x12>
 8008a36:	f7fd fe99 	bl	800676c <__sinit>
 8008a3a:	69a3      	ldr	r3, [r4, #24]
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	071a      	lsls	r2, r3, #28
 8008a42:	d501      	bpl.n	8008a48 <__swbuf_r+0x20>
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	b943      	cbnz	r3, 8008a5a <__swbuf_r+0x32>
 8008a48:	4621      	mov	r1, r4
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f000 f82a 	bl	8008aa4 <__swsetup_r>
 8008a50:	b118      	cbz	r0, 8008a5a <__swbuf_r+0x32>
 8008a52:	f04f 37ff 	mov.w	r7, #4294967295
 8008a56:	4638      	mov	r0, r7
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	b2f6      	uxtb	r6, r6
 8008a60:	1a98      	subs	r0, r3, r2
 8008a62:	6963      	ldr	r3, [r4, #20]
 8008a64:	4637      	mov	r7, r6
 8008a66:	4283      	cmp	r3, r0
 8008a68:	dc05      	bgt.n	8008a76 <__swbuf_r+0x4e>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f7fe fa8b 	bl	8006f88 <_fflush_r>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d1ed      	bne.n	8008a52 <__swbuf_r+0x2a>
 8008a76:	68a3      	ldr	r3, [r4, #8]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	60a3      	str	r3, [r4, #8]
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	6022      	str	r2, [r4, #0]
 8008a82:	701e      	strb	r6, [r3, #0]
 8008a84:	6962      	ldr	r2, [r4, #20]
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d004      	beq.n	8008a96 <__swbuf_r+0x6e>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	07db      	lsls	r3, r3, #31
 8008a90:	d5e1      	bpl.n	8008a56 <__swbuf_r+0x2e>
 8008a92:	2e0a      	cmp	r6, #10
 8008a94:	d1df      	bne.n	8008a56 <__swbuf_r+0x2e>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f7fe fa75 	bl	8006f88 <_fflush_r>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0d9      	beq.n	8008a56 <__swbuf_r+0x2e>
 8008aa2:	e7d6      	b.n	8008a52 <__swbuf_r+0x2a>

08008aa4 <__swsetup_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4b29      	ldr	r3, [pc, #164]	@ (8008b4c <__swsetup_r+0xa8>)
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	460c      	mov	r4, r1
 8008aae:	b118      	cbz	r0, 8008ab8 <__swsetup_r+0x14>
 8008ab0:	6a03      	ldr	r3, [r0, #32]
 8008ab2:	b90b      	cbnz	r3, 8008ab8 <__swsetup_r+0x14>
 8008ab4:	f7fd fe5a 	bl	800676c <__sinit>
 8008ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abc:	0719      	lsls	r1, r3, #28
 8008abe:	d422      	bmi.n	8008b06 <__swsetup_r+0x62>
 8008ac0:	06da      	lsls	r2, r3, #27
 8008ac2:	d407      	bmi.n	8008ad4 <__swsetup_r+0x30>
 8008ac4:	2209      	movs	r2, #9
 8008ac6:	602a      	str	r2, [r5, #0]
 8008ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e033      	b.n	8008b3c <__swsetup_r+0x98>
 8008ad4:	0758      	lsls	r0, r3, #29
 8008ad6:	d512      	bpl.n	8008afe <__swsetup_r+0x5a>
 8008ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ada:	b141      	cbz	r1, 8008aee <__swsetup_r+0x4a>
 8008adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	d002      	beq.n	8008aea <__swsetup_r+0x46>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7fd ff9b 	bl	8006a20 <_free_r>
 8008aea:	2300      	movs	r3, #0
 8008aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	2300      	movs	r3, #0
 8008af8:	6063      	str	r3, [r4, #4]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f043 0308 	orr.w	r3, r3, #8
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	b94b      	cbnz	r3, 8008b1e <__swsetup_r+0x7a>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b14:	d003      	beq.n	8008b1e <__swsetup_r+0x7a>
 8008b16:	4621      	mov	r1, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 f890 	bl	8008c3e <__smakebuf_r>
 8008b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b22:	f013 0201 	ands.w	r2, r3, #1
 8008b26:	d00a      	beq.n	8008b3e <__swsetup_r+0x9a>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	60a2      	str	r2, [r4, #8]
 8008b2c:	6962      	ldr	r2, [r4, #20]
 8008b2e:	4252      	negs	r2, r2
 8008b30:	61a2      	str	r2, [r4, #24]
 8008b32:	6922      	ldr	r2, [r4, #16]
 8008b34:	b942      	cbnz	r2, 8008b48 <__swsetup_r+0xa4>
 8008b36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b3a:	d1c5      	bne.n	8008ac8 <__swsetup_r+0x24>
 8008b3c:	bd38      	pop	{r3, r4, r5, pc}
 8008b3e:	0799      	lsls	r1, r3, #30
 8008b40:	bf58      	it	pl
 8008b42:	6962      	ldrpl	r2, [r4, #20]
 8008b44:	60a2      	str	r2, [r4, #8]
 8008b46:	e7f4      	b.n	8008b32 <__swsetup_r+0x8e>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e7f7      	b.n	8008b3c <__swsetup_r+0x98>
 8008b4c:	2000002c 	.word	0x2000002c

08008b50 <_raise_r>:
 8008b50:	291f      	cmp	r1, #31
 8008b52:	b538      	push	{r3, r4, r5, lr}
 8008b54:	4605      	mov	r5, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	d904      	bls.n	8008b64 <_raise_r+0x14>
 8008b5a:	2316      	movs	r3, #22
 8008b5c:	6003      	str	r3, [r0, #0]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b66:	b112      	cbz	r2, 8008b6e <_raise_r+0x1e>
 8008b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b6c:	b94b      	cbnz	r3, 8008b82 <_raise_r+0x32>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f000 f830 	bl	8008bd4 <_getpid_r>
 8008b74:	4622      	mov	r2, r4
 8008b76:	4601      	mov	r1, r0
 8008b78:	4628      	mov	r0, r5
 8008b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7e:	f000 b817 	b.w	8008bb0 <_kill_r>
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d00a      	beq.n	8008b9c <_raise_r+0x4c>
 8008b86:	1c59      	adds	r1, r3, #1
 8008b88:	d103      	bne.n	8008b92 <_raise_r+0x42>
 8008b8a:	2316      	movs	r3, #22
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	2001      	movs	r0, #1
 8008b90:	e7e7      	b.n	8008b62 <_raise_r+0x12>
 8008b92:	2100      	movs	r1, #0
 8008b94:	4620      	mov	r0, r4
 8008b96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b9a:	4798      	blx	r3
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e7e0      	b.n	8008b62 <_raise_r+0x12>

08008ba0 <raise>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <raise+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f7ff bfd3 	b.w	8008b50 <_raise_r>
 8008baa:	bf00      	nop
 8008bac:	2000002c 	.word	0x2000002c

08008bb0 <_kill_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4d06      	ldr	r5, [pc, #24]	@ (8008bd0 <_kill_r+0x20>)
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7f9 f8d4 	bl	8001d6a <_kill>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_kill_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_kill_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	20001770 	.word	0x20001770

08008bd4 <_getpid_r>:
 8008bd4:	f7f9 b8c2 	b.w	8001d5c <_getpid>

08008bd8 <memchr>:
 8008bd8:	4603      	mov	r3, r0
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	b2c9      	uxtb	r1, r1
 8008bde:	4402      	add	r2, r0
 8008be0:	4293      	cmp	r3, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	d101      	bne.n	8008bea <memchr+0x12>
 8008be6:	2000      	movs	r0, #0
 8008be8:	e003      	b.n	8008bf2 <memchr+0x1a>
 8008bea:	7804      	ldrb	r4, [r0, #0]
 8008bec:	3301      	adds	r3, #1
 8008bee:	428c      	cmp	r4, r1
 8008bf0:	d1f6      	bne.n	8008be0 <memchr+0x8>
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <__swhatbuf_r>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfc:	4615      	mov	r5, r2
 8008bfe:	2900      	cmp	r1, #0
 8008c00:	461e      	mov	r6, r3
 8008c02:	b096      	sub	sp, #88	@ 0x58
 8008c04:	da0c      	bge.n	8008c20 <__swhatbuf_r+0x2c>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c0e:	bf14      	ite	ne
 8008c10:	2340      	movne	r3, #64	@ 0x40
 8008c12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c16:	2000      	movs	r0, #0
 8008c18:	6031      	str	r1, [r6, #0]
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	b016      	add	sp, #88	@ 0x58
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	466a      	mov	r2, sp
 8008c22:	f000 f849 	bl	8008cb8 <_fstat_r>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	dbed      	blt.n	8008c06 <__swhatbuf_r+0x12>
 8008c2a:	9901      	ldr	r1, [sp, #4]
 8008c2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c34:	4259      	negs	r1, r3
 8008c36:	4159      	adcs	r1, r3
 8008c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c3c:	e7eb      	b.n	8008c16 <__swhatbuf_r+0x22>

08008c3e <__smakebuf_r>:
 8008c3e:	898b      	ldrh	r3, [r1, #12]
 8008c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c42:	079d      	lsls	r5, r3, #30
 8008c44:	4606      	mov	r6, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	d507      	bpl.n	8008c5a <__smakebuf_r+0x1c>
 8008c4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	6123      	str	r3, [r4, #16]
 8008c52:	2301      	movs	r3, #1
 8008c54:	6163      	str	r3, [r4, #20]
 8008c56:	b003      	add	sp, #12
 8008c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c5a:	466a      	mov	r2, sp
 8008c5c:	ab01      	add	r3, sp, #4
 8008c5e:	f7ff ffc9 	bl	8008bf4 <__swhatbuf_r>
 8008c62:	9f00      	ldr	r7, [sp, #0]
 8008c64:	4605      	mov	r5, r0
 8008c66:	4639      	mov	r1, r7
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7fd ff43 	bl	8006af4 <_malloc_r>
 8008c6e:	b948      	cbnz	r0, 8008c84 <__smakebuf_r+0x46>
 8008c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c74:	059a      	lsls	r2, r3, #22
 8008c76:	d4ee      	bmi.n	8008c56 <__smakebuf_r+0x18>
 8008c78:	f023 0303 	bic.w	r3, r3, #3
 8008c7c:	f043 0302 	orr.w	r3, r3, #2
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	e7e2      	b.n	8008c4a <__smakebuf_r+0xc>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	9b01      	ldr	r3, [sp, #4]
 8008c92:	6020      	str	r0, [r4, #0]
 8008c94:	b15b      	cbz	r3, 8008cae <__smakebuf_r+0x70>
 8008c96:	4630      	mov	r0, r6
 8008c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c9c:	f000 f81e 	bl	8008cdc <_isatty_r>
 8008ca0:	b128      	cbz	r0, 8008cae <__smakebuf_r+0x70>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f023 0303 	bic.w	r3, r3, #3
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	431d      	orrs	r5, r3
 8008cb2:	81a5      	strh	r5, [r4, #12]
 8008cb4:	e7cf      	b.n	8008c56 <__smakebuf_r+0x18>
	...

08008cb8 <_fstat_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4d06      	ldr	r5, [pc, #24]	@ (8008cd8 <_fstat_r+0x20>)
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4608      	mov	r0, r1
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	602b      	str	r3, [r5, #0]
 8008cc6:	f7f9 f8af 	bl	8001e28 <_fstat>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d102      	bne.n	8008cd4 <_fstat_r+0x1c>
 8008cce:	682b      	ldr	r3, [r5, #0]
 8008cd0:	b103      	cbz	r3, 8008cd4 <_fstat_r+0x1c>
 8008cd2:	6023      	str	r3, [r4, #0]
 8008cd4:	bd38      	pop	{r3, r4, r5, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20001770 	.word	0x20001770

08008cdc <_isatty_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	2300      	movs	r3, #0
 8008ce0:	4d05      	ldr	r5, [pc, #20]	@ (8008cf8 <_isatty_r+0x1c>)
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4608      	mov	r0, r1
 8008ce6:	602b      	str	r3, [r5, #0]
 8008ce8:	f7f9 f8ad 	bl	8001e46 <_isatty>
 8008cec:	1c43      	adds	r3, r0, #1
 8008cee:	d102      	bne.n	8008cf6 <_isatty_r+0x1a>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	b103      	cbz	r3, 8008cf6 <_isatty_r+0x1a>
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	20001770 	.word	0x20001770

08008cfc <_init>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	bf00      	nop
 8008d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d02:	bc08      	pop	{r3}
 8008d04:	469e      	mov	lr, r3
 8008d06:	4770      	bx	lr

08008d08 <_fini>:
 8008d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0a:	bf00      	nop
 8008d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d0e:	bc08      	pop	{r3}
 8008d10:	469e      	mov	lr, r3
 8008d12:	4770      	bx	lr
